; ModuleID = 'network-dijkstra.rbc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._QITEM = type { i32, i32, i32, %struct._QITEM* }
%struct._NODE = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@qHead = global %struct._QITEM* null, align 8
@g_qCount = global i32 0, align 4
@ch = common global i32 0, align 4
@rgnNodes = common global [100 x %struct._NODE] zeroinitializer, align 16
@iNode = common global i32 0, align 4
@iDist = common global i32 0, align 4
@iPrev = common global i32 0, align 4
@i = common global i32 0, align 4
@AdjMatrix = common global [100 x [100 x i32]] zeroinitializer, align 16
@iCost = common global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@stdout = external global %struct._IO_FILE*, align 8
@stderr = external global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"Out of memory.\0A\00", align 1
@.str.2 = private unnamed_addr constant [54 x i8] c"Shortest path is 0 in cost. Just stay where you are.\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Shortest path is %d in cost. \00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Path is: \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Usage: dijkstra <filename>\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"Only supports matrix size is #define'd.\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str = private unnamed_addr constant [53 x i8] c"Shortest path is 0 in cost. Just stay where you are.\00"

; Function Attrs: noinline nounwind uwtable
define void @print_path(%struct._NODE*, i32) #0 {
  %3 = alloca %struct._NODE*, align 8
  %4 = alloca i32, align 4
  store %struct._NODE* %0, %struct._NODE** %3, align 8
  store i32 %1, i32* %4, align 4
  %5 = sext i32 %1 to i64
  %6 = getelementptr inbounds %struct._NODE, %struct._NODE* %0, i64 %5, i32 1
  %7 = load i32, i32* %6, align 4
  %8 = icmp eq i32 %7, 9999
  br i1 %8, label %15, label %9

; <label>:9:                                      ; preds = %2
  %10 = load %struct._NODE*, %struct._NODE** %3, align 8
  %11 = load i32, i32* %4, align 4
  %12 = sext i32 %11 to i64
  %13 = getelementptr inbounds %struct._NODE, %struct._NODE* %10, i64 %12, i32 1
  %14 = load i32, i32* %13, align 4
  call void @print_path(%struct._NODE* %10, i32 %14)
  br label %15

; <label>:15:                                     ; preds = %2, %9
  %16 = load i32, i32* %4, align 4
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %16) #4
  %18 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %19 = call i32 @fflush(%struct._IO_FILE* %18) #4
  ret void
}

declare i32 @printf(i8*, ...) #1

declare i32 @fflush(%struct._IO_FILE*) #1

; Function Attrs: noinline nounwind uwtable
define void @enqueue(i32, i32, i32) #0 {
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct._QITEM*, align 8
  %8 = alloca %struct._QITEM*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  store i32 %2, i32* %6, align 4
  %9 = call noalias i8* @malloc(i64 24) #4
  %10 = bitcast %struct._QITEM** %7 to i8**
  store i8* %9, i8** %10, align 8
  %11 = load i64, i64* bitcast (%struct._QITEM** @qHead to i64*), align 8
  %12 = bitcast %struct._QITEM** %8 to i64*
  store i64 %11, i64* %12, align 8
  %13 = icmp eq i8* %9, null
  br i1 %13, label %14, label %17

; <label>:14:                                     ; preds = %3
  %15 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %16 = call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %15) #5
  call void @exit(i32 1) #6
  unreachable

; <label>:17:                                     ; preds = %3
  %18 = load i32, i32* %4, align 4
  %19 = load %struct._QITEM*, %struct._QITEM** %7, align 8
  %20 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %19, i64 0, i32 0
  store i32 %18, i32* %20, align 8
  %21 = load i32, i32* %5, align 4
  %22 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %19, i64 0, i32 1
  store i32 %21, i32* %22, align 4
  %23 = load i32, i32* %6, align 4
  %24 = load %struct._QITEM*, %struct._QITEM** %7, align 8
  %25 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %24, i64 0, i32 2
  store i32 %23, i32* %25, align 8
  %26 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %24, i64 0, i32 3
  store %struct._QITEM* null, %struct._QITEM** %26, align 8
  %27 = load %struct._QITEM*, %struct._QITEM** %8, align 8
  %28 = icmp eq %struct._QITEM* %27, null
  br i1 %28, label %29, label %32

; <label>:29:                                     ; preds = %17
  %30 = bitcast %struct._QITEM** %7 to i64*
  %31 = load i64, i64* %30, align 8
  store i64 %31, i64* bitcast (%struct._QITEM** @qHead to i64*), align 8
  br label %50

; <label>:32:                                     ; preds = %17
  br label %33

; <label>:33:                                     ; preds = %38, %32
  %34 = load %struct._QITEM*, %struct._QITEM** %8, align 8
  %35 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %34, i64 0, i32 3
  %36 = load %struct._QITEM*, %struct._QITEM** %35, align 8
  %37 = icmp eq %struct._QITEM* %36, null
  br i1 %37, label %44, label %38

; <label>:38:                                     ; preds = %33
  %39 = load %struct._QITEM*, %struct._QITEM** %8, align 8
  %40 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %39, i64 0, i32 3
  %41 = bitcast %struct._QITEM** %40 to i64*
  %42 = load i64, i64* %41, align 8
  %43 = bitcast %struct._QITEM** %8 to i64*
  store i64 %42, i64* %43, align 8
  br label %33

; <label>:44:                                     ; preds = %33
  %45 = bitcast %struct._QITEM** %7 to i64*
  %46 = load i64, i64* %45, align 8
  %47 = load %struct._QITEM*, %struct._QITEM** %8, align 8
  %48 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %47, i64 0, i32 3
  %49 = bitcast %struct._QITEM** %48 to i64*
  store i64 %46, i64* %49, align 8
  br label %50

; <label>:50:                                     ; preds = %44, %29
  %51 = load i32, i32* @g_qCount, align 4
  %52 = add nsw i32 %51, 1
  store i32 %52, i32* @g_qCount, align 4
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) #2

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: noinline nounwind uwtable
define void @dequeue(i32*, i32*, i32*) #0 {
  %4 = alloca i32*, align 8
  %5 = alloca i32*, align 8
  %6 = alloca i32*, align 8
  %7 = alloca %struct._QITEM*, align 8
  store i32* %0, i32** %4, align 8
  store i32* %1, i32** %5, align 8
  store i32* %2, i32** %6, align 8
  %8 = load i64, i64* bitcast (%struct._QITEM** @qHead to i64*), align 8
  %9 = bitcast %struct._QITEM** %7 to i64*
  store i64 %8, i64* %9, align 8
  %10 = icmp eq i64 %8, 0
  br i1 %10, label %32, label %11

; <label>:11:                                     ; preds = %3
  %12 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %13 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %12, i64 0, i32 0
  %14 = load i32, i32* %13, align 8
  %15 = load i32*, i32** %4, align 8
  store i32 %14, i32* %15, align 4
  %16 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %17 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %16, i64 0, i32 1
  %18 = load i32, i32* %17, align 4
  %19 = load i32*, i32** %5, align 8
  store i32 %18, i32* %19, align 4
  %20 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %21 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %20, i64 0, i32 2
  %22 = load i32, i32* %21, align 8
  %23 = load i32*, i32** %6, align 8
  store i32 %22, i32* %23, align 4
  %24 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %25 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %24, i64 0, i32 3
  %26 = bitcast %struct._QITEM** %25 to i64*
  %27 = load i64, i64* %26, align 8
  store i64 %27, i64* bitcast (%struct._QITEM** @qHead to i64*), align 8
  %28 = bitcast %struct._QITEM** %7 to i8**
  %29 = load i8*, i8** %28, align 8
  call void @free(i8* %29) #4
  %30 = load i32, i32* @g_qCount, align 4
  %31 = add nsw i32 %30, -1
  store i32 %31, i32* @g_qCount, align 4
  br label %32

; <label>:32:                                     ; preds = %3, %11
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #2

; Function Attrs: noinline nounwind uwtable
define i32 @qcount() #0 {
  %1 = load i32, i32* @g_qCount, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define i32 @dijkstra(i32, i32) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  br label %6

; <label>:6:                                      ; preds = %14, %2
  %storemerge = phi i32 [ 0, %2 ], [ %16, %14 ]
  store i32 %storemerge, i32* @ch, align 4
  %7 = icmp slt i32 %storemerge, 100
  br i1 %7, label %8, label %17

; <label>:8:                                      ; preds = %6
  %9 = load i32, i32* @ch, align 4
  %10 = sext i32 %9 to i64
  %11 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %10, i32 0
  store i32 9999, i32* %11, align 8
  %12 = sext i32 %9 to i64
  %13 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %12, i32 1
  store i32 9999, i32* %13, align 4
  br label %14

; <label>:14:                                     ; preds = %8
  %15 = load i32, i32* @ch, align 4
  %16 = add nsw i32 %15, 1
  br label %6

; <label>:17:                                     ; preds = %6
  %18 = load i32, i32* %4, align 4
  %19 = load i32, i32* %5, align 4
  %20 = icmp eq i32 %18, %19
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %17
  %puts = call i32 @puts(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @str, i64 0, i64 0))
  br label %86

; <label>:22:                                     ; preds = %17
  %23 = load i32, i32* %4, align 4
  %24 = sext i32 %23 to i64
  %25 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %24, i32 0
  store i32 0, i32* %25, align 8
  %26 = sext i32 %23 to i64
  %27 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %26, i32 1
  store i32 9999, i32* %27, align 4
  %28 = load i32, i32* %4, align 4
  call void @enqueue(i32 %28, i32 0, i32 9999)
  br label %29

; <label>:29:                                     ; preds = %78, %22
  %30 = call i32 @qcount()
  %31 = icmp sgt i32 %30, 0
  br i1 %31, label %32, label %79

; <label>:32:                                     ; preds = %29
  call void @dequeue(i32* nonnull @iNode, i32* nonnull @iDist, i32* nonnull @iPrev)
  br label %33

; <label>:33:                                     ; preds = %75, %32
  %storemerge1 = phi i32 [ 0, %32 ], [ %77, %75 ]
  store i32 %storemerge1, i32* @i, align 4
  %34 = icmp slt i32 %storemerge1, 100
  br i1 %34, label %35, label %78

; <label>:35:                                     ; preds = %33
  %36 = load i32, i32* @iNode, align 4
  %37 = sext i32 %36 to i64
  %38 = load i32, i32* @i, align 4
  %39 = sext i32 %38 to i64
  %40 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* @AdjMatrix, i64 0, i64 %37, i64 %39
  %41 = load i32, i32* %40, align 4
  store i32 %41, i32* @iCost, align 4
  %42 = icmp eq i32 %41, 9999
  br i1 %42, label %74, label %43

; <label>:43:                                     ; preds = %35
  %44 = load i32, i32* @i, align 4
  %45 = sext i32 %44 to i64
  %46 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %45, i32 0
  %47 = load i32, i32* %46, align 8
  %48 = icmp eq i32 %47, 9999
  br i1 %48, label %58, label %49

; <label>:49:                                     ; preds = %43
  %50 = load i32, i32* @i, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %51, i32 0
  %53 = load i32, i32* %52, align 8
  %54 = load i32, i32* @iCost, align 4
  %55 = load i32, i32* @iDist, align 4
  %56 = add nsw i32 %54, %55
  %57 = icmp sgt i32 %53, %56
  br i1 %57, label %58, label %73

; <label>:58:                                     ; preds = %49, %43
  %59 = load i32, i32* @iDist, align 4
  %60 = load i32, i32* @iCost, align 4
  %61 = add nsw i32 %59, %60
  %62 = load i32, i32* @i, align 4
  %63 = sext i32 %62 to i64
  %64 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %63, i32 0
  store i32 %61, i32* %64, align 8
  %65 = load i32, i32* @iNode, align 4
  %66 = sext i32 %62 to i64
  %67 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %66, i32 1
  store i32 %65, i32* %67, align 4
  %68 = load i32, i32* @i, align 4
  %69 = load i32, i32* @iDist, align 4
  %70 = load i32, i32* @iCost, align 4
  %71 = add nsw i32 %69, %70
  %72 = load i32, i32* @iNode, align 4
  call void @enqueue(i32 %68, i32 %71, i32 %72)
  br label %73

; <label>:73:                                     ; preds = %58, %49
  br label %74

; <label>:74:                                     ; preds = %35, %73
  br label %75

; <label>:75:                                     ; preds = %74
  %76 = load i32, i32* @i, align 4
  %77 = add nsw i32 %76, 1
  br label %33

; <label>:78:                                     ; preds = %33
  br label %29

; <label>:79:                                     ; preds = %29
  %80 = load i32, i32* %5, align 4
  %81 = sext i32 %80 to i64
  %82 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %81, i32 0
  %83 = load i32, i32* %82, align 8
  %84 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %83) #4
  %85 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0)) #4
  call void @print_path(%struct._NODE* getelementptr inbounds ([100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 0), i32 %80)
  %putchar = call i32 @putchar(i32 10)
  br label %86

; <label>:86:                                     ; preds = %79, %21
  %87 = load i32, i32* %3, align 4
  ret i32 %87
}

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i8**, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca %struct._IO_FILE*, align 8
  store i8** %1, i8*** %3, align 8
  %8 = icmp slt i32 %0, 2
  br i1 %8, label %9, label %14

; <label>:9:                                      ; preds = %2
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %11 = call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %10) #5
  %12 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %13 = call i64 @fwrite(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0), i64 40, i64 1, %struct._IO_FILE* %12) #5
  br label %14

; <label>:14:                                     ; preds = %9, %2
  %15 = load i8**, i8*** %3, align 8
  %16 = getelementptr inbounds i8*, i8** %15, i64 1
  %17 = load i8*, i8** %16, align 8
  %18 = call %struct._IO_FILE* @fopen(i8* %17, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0)) #4
  store %struct._IO_FILE* %18, %struct._IO_FILE** %7, align 8
  br label %19

; <label>:19:                                     ; preds = %37, %14
  %storemerge = phi i32 [ 0, %14 ], [ %39, %37 ]
  store i32 %storemerge, i32* %4, align 4
  %20 = icmp slt i32 %storemerge, 100
  br i1 %20, label %21, label %40

; <label>:21:                                     ; preds = %19
  br label %22

; <label>:22:                                     ; preds = %33, %21
  %storemerge2 = phi i32 [ 0, %21 ], [ %35, %33 ]
  store i32 %storemerge2, i32* %5, align 4
  %23 = icmp slt i32 %storemerge2, 100
  br i1 %23, label %24, label %36

; <label>:24:                                     ; preds = %22
  %25 = load %struct._IO_FILE*, %struct._IO_FILE** %7, align 8
  %26 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %25, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32* nonnull %6) #4
  %27 = load i32, i32* %6, align 4
  %28 = load i32, i32* %4, align 4
  %29 = sext i32 %28 to i64
  %30 = load i32, i32* %5, align 4
  %31 = sext i32 %30 to i64
  %32 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* @AdjMatrix, i64 0, i64 %29, i64 %31
  store i32 %27, i32* %32, align 4
  br label %33

; <label>:33:                                     ; preds = %24
  %34 = load i32, i32* %5, align 4
  %35 = add nsw i32 %34, 1
  br label %22

; <label>:36:                                     ; preds = %22
  br label %37

; <label>:37:                                     ; preds = %36
  %38 = load i32, i32* %4, align 4
  %39 = add nsw i32 %38, 1
  br label %19

; <label>:40:                                     ; preds = %19
  store i32 0, i32* %4, align 4
  br label %41

; <label>:41:                                     ; preds = %49, %40
  %storemerge1 = phi i32 [ 50, %40 ], [ %53, %49 ]
  store i32 %storemerge1, i32* %5, align 4
  %42 = load i32, i32* %4, align 4
  %43 = icmp slt i32 %42, 100
  br i1 %43, label %44, label %54

; <label>:44:                                     ; preds = %41
  %45 = load i32, i32* %5, align 4
  %46 = srem i32 %45, 100
  store i32 %46, i32* %5, align 4
  %47 = load i32, i32* %4, align 4
  %48 = call i32 @dijkstra(i32 %47, i32 %46)
  br label %49

; <label>:49:                                     ; preds = %44
  %50 = load i32, i32* %4, align 4
  %51 = add nsw i32 %50, 1
  store i32 %51, i32* %4, align 4
  %52 = load i32, i32* %5, align 4
  %53 = add nsw i32 %52, 1
  br label %41

; <label>:54:                                     ; preds = %41
  call void @exit(i32 0) #6
  unreachable
                                                  ; No predecessors!
  ret i32 undef
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) #1

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) #4

; Function Attrs: nounwind
declare i32 @putchar(i32) #4

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) #4

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { cold }
attributes #6 = { noreturn nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
