; ModuleID = 'network-dijkstra.rbc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._QITEM = type { i32, i32, i32, %struct._QITEM* }
%struct._NODE = type { i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@qHead = local_unnamed_addr global %struct._QITEM* null, align 8
@g_qCount = local_unnamed_addr global i32 0, align 4
@ch = common local_unnamed_addr global i32 0, align 4
@rgnNodes = common global [100 x %struct._NODE] zeroinitializer, align 16
@iNode = common global i32 0, align 4
@iDist = common global i32 0, align 4
@iPrev = common global i32 0, align 4
@i = common local_unnamed_addr global i32 0, align 4
@AdjMatrix = common local_unnamed_addr global [100 x [100 x i32]] zeroinitializer, align 16
@iCost = common local_unnamed_addr global i32 0, align 4
@.str = private unnamed_addr constant [4 x i8] c" %d\00", align 1
@stdout = external local_unnamed_addr global %struct._IO_FILE*, align 8
@stderr = external local_unnamed_addr global %struct._IO_FILE*, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"Out of memory.\0A\00", align 1
@.str.3 = private unnamed_addr constant [30 x i8] c"Shortest path is %d in cost. \00", align 1
@.str.4 = private unnamed_addr constant [10 x i8] c"Path is: \00", align 1
@.str.6 = private unnamed_addr constant [28 x i8] c"Usage: dijkstra <filename>\0A\00", align 1
@.str.7 = private unnamed_addr constant [41 x i8] c"Only supports matrix size is #define'd.\0A\00", align 1
@.str.8 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.9 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@str = private unnamed_addr constant [53 x i8] c"Shortest path is 0 in cost. Just stay where you are.\00"

; Function Attrs: noinline nounwind uwtable
define void @print_path(%struct._NODE* nocapture readonly, i32) local_unnamed_addr #0 {
  %3 = sext i32 %1 to i64
  %4 = getelementptr inbounds %struct._NODE, %struct._NODE* %0, i64 %3, i32 1
  %5 = load i32, i32* %4, align 4
  %6 = icmp eq i32 %5, 9999
  br i1 %6, label %8, label %7

; <label>:7:                                      ; preds = %2
  tail call void @print_path(%struct._NODE* nonnull %0, i32 %5)
  br label %8

; <label>:8:                                      ; preds = %2, %7
  %9 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %1)
  %10 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %11 = tail call i32 @fflush(%struct._IO_FILE* %10)
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @fflush(%struct._IO_FILE* nocapture) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define void @enqueue(i32, i32, i32) local_unnamed_addr #0 {
  %4 = tail call noalias i8* @malloc(i64 24) #6
  %5 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %6 = icmp eq i8* %4, null
  br i1 %6, label %7, label %10

; <label>:7:                                      ; preds = %3
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i64 0, i64 0), i64 15, i64 1, %struct._IO_FILE* %8) #7
  tail call void @exit(i32 1) #8
  unreachable

; <label>:10:                                     ; preds = %3
  %11 = bitcast i8* %4 to i32*
  store i32 %0, i32* %11, align 8
  %12 = getelementptr inbounds i8, i8* %4, i64 4
  %13 = bitcast i8* %12 to i32*
  store i32 %1, i32* %13, align 4
  %14 = getelementptr inbounds i8, i8* %4, i64 8
  %15 = bitcast i8* %14 to i32*
  store i32 %2, i32* %15, align 8
  %16 = getelementptr inbounds i8, i8* %4, i64 16
  %17 = bitcast i8* %16 to %struct._QITEM**
  store %struct._QITEM* null, %struct._QITEM** %17, align 8
  %18 = icmp eq %struct._QITEM* %5, null
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %10
  store i8* %4, i8** bitcast (%struct._QITEM** @qHead to i8**), align 8
  br label %28

; <label>:20:                                     ; preds = %10
  br label %21

; <label>:21:                                     ; preds = %21, %20
  %.0 = phi %struct._QITEM* [ %5, %20 ], [ %23, %21 ]
  %22 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %.0, i64 0, i32 3
  %23 = load %struct._QITEM*, %struct._QITEM** %22, align 8
  %24 = icmp eq %struct._QITEM* %23, null
  br i1 %24, label %25, label %21

; <label>:25:                                     ; preds = %21
  %26 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %.0, i64 0, i32 3
  %27 = bitcast %struct._QITEM** %26 to i8**
  store i8* %4, i8** %27, align 8
  br label %28

; <label>:28:                                     ; preds = %25, %19
  %29 = load i32, i32* @g_qCount, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* @g_qCount, align 4
  ret void
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: noreturn nounwind
declare void @exit(i32) local_unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define void @dequeue(i32* nocapture, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  %4 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %5 = icmp eq %struct._QITEM* %4, null
  br i1 %5, label %22, label %6

; <label>:6:                                      ; preds = %3
  %7 = bitcast %struct._QITEM* %4 to i8*
  %8 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %4, i64 0, i32 0
  %9 = load i32, i32* %8, align 8
  store i32 %9, i32* %0, align 4
  %10 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %11 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %10, i64 0, i32 1
  %12 = load i32, i32* %11, align 4
  store i32 %12, i32* %1, align 4
  %13 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %14 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %13, i64 0, i32 2
  %15 = load i32, i32* %14, align 8
  store i32 %15, i32* %2, align 4
  %16 = load %struct._QITEM*, %struct._QITEM** @qHead, align 8
  %17 = getelementptr inbounds %struct._QITEM, %struct._QITEM* %16, i64 0, i32 3
  %18 = bitcast %struct._QITEM** %17 to i64*
  %19 = load i64, i64* %18, align 8
  store i64 %19, i64* bitcast (%struct._QITEM** @qHead to i64*), align 8
  tail call void @free(i8* %7) #6
  %20 = load i32, i32* @g_qCount, align 4
  %21 = add nsw i32 %20, -1
  store i32 %21, i32* @g_qCount, align 4
  br label %22

; <label>:22:                                     ; preds = %3, %6
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: noinline norecurse nounwind readonly uwtable
define i32 @qcount() local_unnamed_addr #3 {
  %1 = load i32, i32* @g_qCount, align 4
  ret i32 %1
}

; Function Attrs: noinline nounwind uwtable
define i32 @dijkstra(i32, i32) local_unnamed_addr #0 {
  store i32 0, i32* @ch, align 4
  br label %3

; <label>:3:                                      ; preds = %3, %2
  %indvars.iv = phi i64 [ 0, %2 ], [ %indvars.iv.next.4.1, %3 ]
  %4 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv, i32 0
  %5 = bitcast i32* %4 to <4 x i32>*
  store <4 x i32> <i32 9999, i32 9999, i32 9999, i32 9999>, <4 x i32>* %5, align 16
  %indvars.iv.next.1 = add nuw nsw i64 %indvars.iv, 2
  %6 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.1, i32 0
  %7 = bitcast i32* %6 to <4 x i32>*
  store <4 x i32> <i32 9999, i32 9999, i32 9999, i32 9999>, <4 x i32>* %7, align 16
  %indvars.iv.next.3 = add nuw nsw i64 %indvars.iv, 4
  %8 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.3, i32 0
  store i32 9999, i32* %8, align 16
  %9 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.3, i32 1
  store i32 9999, i32* %9, align 4
  %indvars.iv.next.4 = add nuw nsw i64 %indvars.iv, 5
  %10 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.4, i32 0
  %11 = bitcast i32* %10 to <4 x i32>*
  store <4 x i32> <i32 9999, i32 9999, i32 9999, i32 9999>, <4 x i32>* %11, align 8
  %indvars.iv.next.1.1 = add nuw nsw i64 %indvars.iv, 7
  %12 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.1.1, i32 0
  %13 = bitcast i32* %12 to <4 x i32>*
  store <4 x i32> <i32 9999, i32 9999, i32 9999, i32 9999>, <4 x i32>* %13, align 8
  %indvars.iv.next.3.1 = add nuw nsw i64 %indvars.iv, 9
  %14 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.3.1, i32 0
  store i32 9999, i32* %14, align 8
  %15 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %indvars.iv.next.3.1, i32 1
  store i32 9999, i32* %15, align 4
  %indvars.iv.next.4.1 = add nuw nsw i64 %indvars.iv, 10
  %exitcond.4.1 = icmp eq i64 %indvars.iv.next.4.1, 100
  br i1 %exitcond.4.1, label %16, label %3

; <label>:16:                                     ; preds = %3
  store i32 100, i32* @ch, align 4
  %17 = icmp eq i32 %0, %1
  br i1 %17, label %18, label %19

; <label>:18:                                     ; preds = %16
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @str, i64 0, i64 0))
  br label %51

; <label>:19:                                     ; preds = %16
  %20 = sext i32 %0 to i64
  %21 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %20, i32 0
  store i32 0, i32* %21, align 8
  %22 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %20, i32 1
  store i32 9999, i32* %22, align 4
  tail call void @enqueue(i32 %0, i32 0, i32 9999)
  %23 = tail call i32 @qcount()
  %24 = icmp sgt i32 %23, 0
  br i1 %24, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %19
  br label %25

; <label>:25:                                     ; preds = %.lr.ph, %43
  tail call void @dequeue(i32* nonnull @iNode, i32* nonnull @iDist, i32* nonnull @iPrev)
  store i32 0, i32* @i, align 4
  br label %26

; <label>:26:                                     ; preds = %25, %39
  %storemerge12 = phi i32 [ 0, %25 ], [ %41, %39 ]
  %27 = load i32, i32* @iNode, align 4
  %28 = sext i32 %27 to i64
  %29 = sext i32 %storemerge12 to i64
  %30 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* @AdjMatrix, i64 0, i64 %28, i64 %29
  %31 = load i32, i32* %30, align 4
  store i32 %31, i32* @iCost, align 4
  %32 = icmp eq i32 %31, 9999
  br i1 %32, label %39, label %33

; <label>:33:                                     ; preds = %26
  %34 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %29, i32 0
  %35 = load i32, i32* %34, align 8
  %36 = icmp eq i32 %35, 9999
  %.pre = load i32, i32* @iDist, align 4
  %.pre6 = add nsw i32 %.pre, %31
  %37 = icmp sgt i32 %35, %.pre6
  %or.cond = or i1 %36, %37
  br i1 %or.cond, label %._crit_edge4, label %39

._crit_edge4:                                     ; preds = %33
  store i32 %.pre6, i32* %34, align 8
  %38 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %29, i32 1
  store i32 %27, i32* %38, align 4
  tail call void @enqueue(i32 %storemerge12, i32 %.pre6, i32 %27)
  %.pre5 = load i32, i32* @i, align 4
  br label %39

; <label>:39:                                     ; preds = %33, %26, %._crit_edge4
  %40 = phi i32 [ %storemerge12, %26 ], [ %.pre5, %._crit_edge4 ], [ %storemerge12, %33 ]
  %41 = add nsw i32 %40, 1
  store i32 %41, i32* @i, align 4
  %42 = icmp slt i32 %40, 99
  br i1 %42, label %26, label %43

; <label>:43:                                     ; preds = %39
  %44 = tail call i32 @qcount()
  %45 = icmp sgt i32 %44, 0
  br i1 %45, label %25, label %._crit_edge

._crit_edge:                                      ; preds = %43, %19
  %46 = sext i32 %1 to i64
  %47 = getelementptr inbounds [100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 %46, i32 0
  %48 = load i32, i32* %47, align 8
  %49 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3, i64 0, i64 0), i32 %48)
  %50 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.4, i64 0, i64 0))
  tail call void @print_path(%struct._NODE* getelementptr inbounds ([100 x %struct._NODE], [100 x %struct._NODE]* @rgnNodes, i64 0, i64 0), i32 %1)
  %putchar = tail call i32 @putchar(i32 10)
  br label %51

; <label>:51:                                     ; preds = %._crit_edge, %18
  ret i32 undef
}

; Function Attrs: noinline noreturn nounwind uwtable
define i32 @main(i32, i8** nocapture readonly) local_unnamed_addr #4 {
  %3 = alloca i32, align 4
  %4 = icmp slt i32 %0, 2
  br i1 %4, label %5, label %10

; <label>:5:                                      ; preds = %2
  %6 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %7 = tail call i64 @fwrite(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i64 0, i64 0), i64 27, i64 1, %struct._IO_FILE* %6) #7
  %8 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %9 = tail call i64 @fwrite(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.7, i64 0, i64 0), i64 40, i64 1, %struct._IO_FILE* %8) #7
  br label %10

; <label>:10:                                     ; preds = %5, %2
  %11 = getelementptr inbounds i8*, i8** %1, i64 1
  %12 = load i8*, i8** %11, align 8
  %13 = tail call %struct._IO_FILE* @fopen(i8* %12, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.8, i64 0, i64 0))
  br label %14

; <label>:14:                                     ; preds = %19, %10
  %indvars.iv8 = phi i64 [ 0, %10 ], [ %indvars.iv.next9, %19 ]
  br label %15

; <label>:15:                                     ; preds = %15, %14
  %indvars.iv = phi i64 [ 0, %14 ], [ %indvars.iv.next, %15 ]
  %16 = call i32 (%struct._IO_FILE*, i8*, ...) @__isoc99_fscanf(%struct._IO_FILE* %13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.9, i64 0, i64 0), i32* nonnull %3) #6
  %17 = load i32, i32* %3, align 4
  %18 = getelementptr inbounds [100 x [100 x i32]], [100 x [100 x i32]]* @AdjMatrix, i64 0, i64 %indvars.iv8, i64 %indvars.iv
  store i32 %17, i32* %18, align 4
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond7 = icmp eq i64 %indvars.iv.next, 100
  br i1 %exitcond7, label %19, label %15

; <label>:19:                                     ; preds = %15
  %indvars.iv.next9 = add nuw nsw i64 %indvars.iv8, 1
  %exitcond10 = icmp eq i64 %indvars.iv.next9, 100
  br i1 %exitcond10, label %20, label %14

; <label>:20:                                     ; preds = %19
  br label %21

; <label>:21:                                     ; preds = %21, %20
  %.14 = phi i32 [ 50, %20 ], [ %25, %21 ]
  %.123 = phi i32 [ 0, %20 ], [ %24, %21 ]
  %22 = srem i32 %.14, 100
  %23 = call i32 @dijkstra(i32 %.123, i32 %22)
  %24 = add nuw nsw i32 %.123, 1
  %25 = add nsw i32 %22, 1
  %exitcond = icmp eq i32 %24, 100
  br i1 %exitcond, label %26, label %21

; <label>:26:                                     ; preds = %21
  call void @exit(i32 0) #8
  unreachable
}

; Function Attrs: nounwind
declare noalias %struct._IO_FILE* @fopen(i8* nocapture readonly, i8* nocapture readonly) local_unnamed_addr #1

declare i32 @__isoc99_fscanf(%struct._IO_FILE*, i8*, ...) local_unnamed_addr #5

; Function Attrs: nounwind
declare i64 @fwrite(i8* nocapture, i64, i64, %struct._IO_FILE* nocapture) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @putchar(i32) local_unnamed_addr #6

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #6

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { noinline noreturn nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind }
attributes #7 = { cold }
attributes #8 = { noreturn nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
