; ModuleID = 'SPEdriver.c'
source_filename = "SPEdriver.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }

; Function Attrs: noinline nounwind uwtable
define double @SPEdriver(double*, double*, double*, double*, double*, [12 x double]*, [12 x double]*, [12 x double]*) #0 {
  %9 = alloca double*, align 8
  %10 = alloca double*, align 8
  %11 = alloca double*, align 8
  %12 = alloca double*, align 8
  %13 = alloca double*, align 8
  %14 = alloca [12 x double]*, align 8
  %15 = alloca [12 x double]*, align 8
  %16 = alloca [12 x double]*, align 8
  %17 = alloca %struct.timeval, align 8
  %18 = alloca %struct.timeval, align 8
  %19 = alloca i64, align 8
  %20 = alloca i64, align 8
  %21 = alloca double, align 8
  %22 = alloca double, align 8
  %23 = alloca i32, align 4
  %24 = alloca i32, align 4
  %25 = alloca i32, align 4
  %26 = alloca i32, align 4
  store double* %0, double** %9, align 8
  store double* %1, double** %10, align 8
  store double* %2, double** %11, align 8
  store double* %3, double** %12, align 8
  store double* %4, double** %13, align 8
  store [12 x double]* %5, [12 x double]** %14, align 8
  store [12 x double]* %6, [12 x double]** %15, align 8
  store [12 x double]* %7, [12 x double]** %16, align 8
  store i64 0, i64* %19, align 8
  store i64 0, i64* %20, align 8
  store double 0.000000e+00, double* %21, align 8
  store i32 2000000, i32* %23, align 4
  store i32 0, i32* %24, align 4
  %27 = call i32 @gettimeofday(%struct.timeval* %17, %struct.timezone* null) #3
  %28 = call i64 @clock() #3
  store i64 %28, i64* %19, align 8
  store i32 0, i32* %24, align 4
  br label %29

; <label>:29:                                     ; preds = %41, %8
  %30 = load i32, i32* %24, align 4
  %31 = icmp slt i32 %30, 2000000
  br i1 %31, label %32, label %44

; <label>:32:                                     ; preds = %29
  %33 = load double*, double** %9, align 8
  %34 = load double*, double** %10, align 8
  %35 = load double*, double** %11, align 8
  %36 = load double*, double** %12, align 8
  %37 = load double*, double** %13, align 8
  %38 = load [12 x double]*, [12 x double]** %14, align 8
  %39 = load [12 x double]*, [12 x double]** %15, align 8
  %40 = load [12 x double]*, [12 x double]** %16, align 8
  call void @Crystal_div(i32 12, double 1.000000e-02, double* %33, double* %34, double* %35, double* %36, double* %37, [12 x double]* %38, [12 x double]* %39, [12 x double]* %40)
  br label %41

; <label>:41:                                     ; preds = %32
  %42 = load i32, i32* %24, align 4
  %43 = add nsw i32 %42, 1
  store i32 %43, i32* %24, align 4
  br label %29

; <label>:44:                                     ; preds = %29
  store i32 0, i32* %24, align 4
  br label %45

; <label>:45:                                     ; preds = %51, %44
  %46 = load i32, i32* %24, align 4
  %47 = icmp slt i32 %46, 2000000
  br i1 %47, label %48, label %54

; <label>:48:                                     ; preds = %45
  %49 = load double*, double** %9, align 8
  %50 = call double @Crystal_pow(i32 12, double* %49)
  store double %50, double* %22, align 8
  br label %51

; <label>:51:                                     ; preds = %48
  %52 = load i32, i32* %24, align 4
  %53 = add nsw i32 %52, 1
  store i32 %53, i32* %24, align 4
  br label %45

; <label>:54:                                     ; preds = %45
  store i32 0, i32* %24, align 4
  br label %55

; <label>:55:                                     ; preds = %82, %54
  %56 = load i32, i32* %24, align 4
  %57 = icmp slt i32 %56, 12
  br i1 %57, label %58, label %85

; <label>:58:                                     ; preds = %55
  store i32 0, i32* %25, align 4
  br label %59

; <label>:59:                                     ; preds = %78, %58
  %60 = load i32, i32* %25, align 4
  %61 = icmp slt i32 %60, 12
  br i1 %61, label %62, label %81

; <label>:62:                                     ; preds = %59
  %63 = load [12 x double]*, [12 x double]** %14, align 8
  %64 = load i32, i32* %24, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds [12 x double], [12 x double]* %63, i64 %65
  %67 = load i32, i32* %25, align 4
  %68 = sext i32 %67 to i64
  %69 = getelementptr inbounds [12 x double], [12 x double]* %66, i64 0, i64 %68
  %70 = load double, double* %69, align 8
  %71 = load [12 x double]*, [12 x double]** %16, align 8
  %72 = load i32, i32* %24, align 4
  %73 = sext i32 %72 to i64
  %74 = getelementptr inbounds [12 x double], [12 x double]* %71, i64 %73
  %75 = load i32, i32* %25, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds [12 x double], [12 x double]* %74, i64 0, i64 %76
  store double %70, double* %77, align 8
  br label %78

; <label>:78:                                     ; preds = %62
  %79 = load i32, i32* %25, align 4
  %80 = add nsw i32 %79, 1
  store i32 %80, i32* %25, align 4
  br label %59

; <label>:81:                                     ; preds = %59
  br label %82

; <label>:82:                                     ; preds = %81
  %83 = load i32, i32* %24, align 4
  %84 = add nsw i32 %83, 1
  store i32 %84, i32* %24, align 4
  br label %55

; <label>:85:                                     ; preds = %55
  store i32 0, i32* %24, align 4
  br label %86

; <label>:86:                                     ; preds = %124, %85
  %87 = load i32, i32* %24, align 4
  %88 = icmp slt i32 %87, 2000000
  br i1 %88, label %89, label %127

; <label>:89:                                     ; preds = %86
  store i32 0, i32* %25, align 4
  br label %90

; <label>:90:                                     ; preds = %117, %89
  %91 = load i32, i32* %25, align 4
  %92 = icmp slt i32 %91, 12
  br i1 %92, label %93, label %120

; <label>:93:                                     ; preds = %90
  store i32 0, i32* %26, align 4
  br label %94

; <label>:94:                                     ; preds = %113, %93
  %95 = load i32, i32* %26, align 4
  %96 = icmp slt i32 %95, 12
  br i1 %96, label %97, label %116

; <label>:97:                                     ; preds = %94
  %98 = load [12 x double]*, [12 x double]** %16, align 8
  %99 = load i32, i32* %25, align 4
  %100 = sext i32 %99 to i64
  %101 = getelementptr inbounds [12 x double], [12 x double]* %98, i64 %100
  %102 = load i32, i32* %26, align 4
  %103 = sext i32 %102 to i64
  %104 = getelementptr inbounds [12 x double], [12 x double]* %101, i64 0, i64 %103
  %105 = load double, double* %104, align 8
  %106 = load [12 x double]*, [12 x double]** %14, align 8
  %107 = load i32, i32* %25, align 4
  %108 = sext i32 %107 to i64
  %109 = getelementptr inbounds [12 x double], [12 x double]* %106, i64 %108
  %110 = load i32, i32* %26, align 4
  %111 = sext i32 %110 to i64
  %112 = getelementptr inbounds [12 x double], [12 x double]* %109, i64 0, i64 %111
  store double %105, double* %112, align 8
  br label %113

; <label>:113:                                    ; preds = %97
  %114 = load i32, i32* %26, align 4
  %115 = add nsw i32 %114, 1
  store i32 %115, i32* %26, align 4
  br label %94

; <label>:116:                                    ; preds = %94
  br label %117

; <label>:117:                                    ; preds = %116
  %118 = load i32, i32* %25, align 4
  %119 = add nsw i32 %118, 1
  store i32 %119, i32* %25, align 4
  br label %90

; <label>:120:                                    ; preds = %90
  %121 = load [12 x double]*, [12 x double]** %14, align 8
  %122 = load double*, double** %11, align 8
  %123 = load double*, double** %13, align 8
  call void @Crystal_Cholesky(i32 12, [12 x double]* %121, double* %122, double* %123)
  br label %124

; <label>:124:                                    ; preds = %120
  %125 = load i32, i32* %24, align 4
  %126 = add nsw i32 %125, 1
  store i32 %126, i32* %24, align 4
  br label %86

; <label>:127:                                    ; preds = %86
  %128 = load double, double* %22, align 8
  ret double %128
}

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #1

; Function Attrs: nounwind
declare i64 @clock() #1

declare void @Crystal_div(i32, double, double*, double*, double*, double*, double*, [12 x double]*, [12 x double]*, [12 x double]*) #2

declare double @Crystal_pow(i32, double*) #2

declare void @Crystal_Cholesky(i32, [12 x double]*, double*, double*) #2

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
