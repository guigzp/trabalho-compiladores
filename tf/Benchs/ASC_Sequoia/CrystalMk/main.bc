; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.timeval = type { i64, i64 }

@.str = private unnamed_addr constant [32 x i8] c"\0ASequoia benchmark version 1.0\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"\0A***** results \0A\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"returnVal = %f \0A\00", align 1
@.str.3 = private unnamed_addr constant [41 x i8] c"i = %5d j = %5d    dtcdgd[i][j]   = %e \0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.timeval, align 8
  %3 = alloca %struct.timeval, align 8
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca [12 x double], align 16
  %7 = alloca [12 x double], align 16
  %8 = alloca [12 x double], align 16
  %9 = alloca [12 x double], align 16
  %10 = alloca [12 x double], align 16
  %11 = alloca [12 x [12 x double]], align 16
  %12 = alloca [12 x [12 x double]], align 16
  %13 = alloca [12 x [12 x double]], align 16
  %14 = alloca double, align 8
  %15 = alloca double, align 8
  %16 = alloca i32, align 4
  %17 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i64 0, i64* %4, align 8
  store i64 0, i64* %5, align 8
  store double 0.000000e+00, double* %14, align 8
  store double 0.000000e+00, double* %15, align 8
  store i32 0, i32* %16, align 4
  store i32 0, i32* %17, align 4
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str, i32 0, i32 0))
  %19 = getelementptr inbounds [12 x double], [12 x double]* %6, i32 0, i32 0
  %20 = getelementptr inbounds [12 x double], [12 x double]* %7, i32 0, i32 0
  %21 = getelementptr inbounds [12 x double], [12 x double]* %8, i32 0, i32 0
  %22 = getelementptr inbounds [12 x double], [12 x double]* %9, i32 0, i32 0
  %23 = getelementptr inbounds [12 x double], [12 x double]* %10, i32 0, i32 0
  %24 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %11, i32 0, i32 0
  %25 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %12, i32 0, i32 0
  %26 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %13, i32 0, i32 0
  call void @init(double* %19, double* %20, double* %21, double* %22, double* %23, [12 x double]* %24, [12 x double]* %25, [12 x double]* %26)
  %27 = getelementptr inbounds [12 x double], [12 x double]* %6, i32 0, i32 0
  %28 = getelementptr inbounds [12 x double], [12 x double]* %7, i32 0, i32 0
  %29 = getelementptr inbounds [12 x double], [12 x double]* %8, i32 0, i32 0
  %30 = getelementptr inbounds [12 x double], [12 x double]* %9, i32 0, i32 0
  %31 = getelementptr inbounds [12 x double], [12 x double]* %10, i32 0, i32 0
  %32 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %11, i32 0, i32 0
  %33 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %12, i32 0, i32 0
  %34 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %13, i32 0, i32 0
  %35 = call double @SPEdriver(double* %27, double* %28, double* %29, double* %30, double* %31, [12 x double]* %32, [12 x double]* %33, [12 x double]* %34)
  store double %35, double* %15, align 8
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %37 = load double, double* %15, align 8
  %38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.2, i32 0, i32 0), double %37)
  store i32 0, i32* %16, align 4
  br label %39

; <label>:39:                                     ; preds = %61, %0
  %40 = load i32, i32* %16, align 4
  %41 = icmp slt i32 %40, 12
  br i1 %41, label %42, label %64

; <label>:42:                                     ; preds = %39
  store i32 0, i32* %17, align 4
  br label %43

; <label>:43:                                     ; preds = %57, %42
  %44 = load i32, i32* %17, align 4
  %45 = icmp slt i32 %44, 12
  br i1 %45, label %46, label %60

; <label>:46:                                     ; preds = %43
  %47 = load i32, i32* %16, align 4
  %48 = load i32, i32* %17, align 4
  %49 = load i32, i32* %16, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds [12 x [12 x double]], [12 x [12 x double]]* %11, i64 0, i64 %50
  %52 = load i32, i32* %17, align 4
  %53 = sext i32 %52 to i64
  %54 = getelementptr inbounds [12 x double], [12 x double]* %51, i64 0, i64 %53
  %55 = load double, double* %54, align 8
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.3, i32 0, i32 0), i32 %47, i32 %48, double %55)
  br label %57

; <label>:57:                                     ; preds = %46
  %58 = load i32, i32* %17, align 4
  %59 = add nsw i32 %58, 4
  store i32 %59, i32* %17, align 4
  br label %43

; <label>:60:                                     ; preds = %43
  br label %61

; <label>:61:                                     ; preds = %60
  %62 = load i32, i32* %16, align 4
  %63 = add nsw i32 %62, 4
  store i32 %63, i32* %16, align 4
  br label %39

; <label>:64:                                     ; preds = %39
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

declare void @init(double*, double*, double*, double*, double*, [12 x double]*, [12 x double]*, [12 x double]*) #1

declare double @SPEdriver(double*, double*, double*, double*, double*, [12 x double]*, [12 x double]*, [12 x double]*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
