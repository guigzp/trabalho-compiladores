; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.timeval = type { i64, i64 }
%struct.timezone = type { i32, i32 }
%struct.hypre_CSRMatrix = type { double*, i32*, i32*, i32, i32, i32, i32*, i32, i32 }
%struct.hypre_Vector = type { double*, i32, i32, i32, i32, i32, i32 }

@testIter = constant i32 2000, align 4
@totalWallTime = global double 0.000000e+00, align 8
@totalCPUTime = global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.1 = private unnamed_addr constant [17 x i8] c"//------------ \0A\00", align 1
@.str.2 = private unnamed_addr constant [5 x i8] c"// \0A\00", align 1
@.str.3 = private unnamed_addr constant [36 x i8] c"//  Sequoia Benchmark Version 1.0 \0A\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"//   MATVEC\0A\00", align 1
@.str.5 = private unnamed_addr constant [12 x i8] c"//   Relax\0A\00", align 1
@.str.6 = private unnamed_addr constant [11 x i8] c"//   Axpy\0A\00", align 1
@.str.7 = private unnamed_addr constant [22 x i8] c" \0A Matvec: error: %e\0A\00", align 1
@.str.8 = private unnamed_addr constant [21 x i8] c" \0A Relax: error: %e\0A\00", align 1
@.str.9 = private unnamed_addr constant [20 x i8] c" \0A Axpy: error: %e\0A\00", align 1

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca %struct.timeval, align 8
  %7 = alloca %struct.timeval, align 8
  %8 = alloca i64, align 8
  %9 = alloca i64, align 8
  %10 = alloca double, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i64 0, i64* %8, align 8
  store i64 0, i64* %9, align 8
  store double 0.000000e+00, double* %10, align 8
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.3, i32 0, i32 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %17 = call i32 @gettimeofday(%struct.timeval* %6, %struct.timezone* null) #4
  %18 = call i64 @clock() #4
  store i64 %18, i64* %8, align 8
  store double 0.000000e+00, double* @totalWallTime, align 8
  store double 0.000000e+00, double* @totalCPUTime, align 8
  call void @test_Matvec()
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  store double 0.000000e+00, double* @totalWallTime, align 8
  store double 0.000000e+00, double* @totalCPUTime, align 8
  call void @test_Relax()
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.5, i32 0, i32 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  store double 0.000000e+00, double* @totalWallTime, align 8
  store double 0.000000e+00, double* @totalCPUTime, align 8
  call void @test_Axpy()
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6, i32 0, i32 0))
  %35 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.2, i32 0, i32 0))
  %36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.1, i32 0, i32 0))
  %37 = call i32 @gettimeofday(%struct.timeval* %7, %struct.timezone* null) #4
  %38 = call i64 @clock() #4
  store i64 %38, i64* %9, align 8
  %39 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 0
  %40 = load i64, i64* %39, align 8
  %41 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 0
  %42 = load i64, i64* %41, align 8
  %43 = sub nsw i64 %40, %42
  %44 = sitofp i64 %43 to double
  %45 = getelementptr inbounds %struct.timeval, %struct.timeval* %7, i32 0, i32 1
  %46 = load i64, i64* %45, align 8
  %47 = getelementptr inbounds %struct.timeval, %struct.timeval* %6, i32 0, i32 1
  %48 = load i64, i64* %47, align 8
  %49 = sub nsw i64 %46, %48
  %50 = sitofp i64 %49 to double
  %51 = fdiv double %50, 1.000000e+06
  %52 = fadd double %44, %51
  store double %52, double* %10, align 8
  ret i32 0
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind
declare i32 @gettimeofday(%struct.timeval*, %struct.timezone*) #2

; Function Attrs: nounwind
declare i64 @clock() #2

; Function Attrs: noinline nounwind uwtable
define void @test_Matvec() #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca %struct.timeval, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.hypre_CSRMatrix*, align 8
  %6 = alloca %struct.hypre_Vector*, align 8
  %7 = alloca %struct.hypre_Vector*, align 8
  %8 = alloca %struct.hypre_Vector*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca double*, align 8
  %16 = alloca double, align 8
  %17 = alloca double, align 8
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  store i32 50, i32* %9, align 4
  store i32 50, i32* %10, align 4
  store i32 50, i32* %11, align 4
  %18 = call i8* @hypre_CAlloc(i32 4, i32 8)
  %19 = bitcast i8* %18 to double*
  store double* %19, double** %13, align 8
  %20 = load double*, double** %13, align 8
  %21 = getelementptr inbounds double, double* %20, i64 0
  store double 6.000000e+00, double* %21, align 8
  %22 = load double*, double** %13, align 8
  %23 = getelementptr inbounds double, double* %22, i64 1
  store double -1.000000e+00, double* %23, align 8
  %24 = load double*, double** %13, align 8
  %25 = getelementptr inbounds double, double* %24, i64 2
  store double -1.000000e+00, double* %25, align 8
  %26 = load double*, double** %13, align 8
  %27 = getelementptr inbounds double, double* %26, i64 3
  store double -1.000000e+00, double* %27, align 8
  %28 = load i32, i32* %9, align 4
  %29 = load i32, i32* %10, align 4
  %30 = load i32, i32* %11, align 4
  %31 = load double*, double** %13, align 8
  %32 = call %struct.hypre_CSRMatrix* @GenerateSeqLaplacian(i32 %28, i32 %29, i32 %30, double* %31, %struct.hypre_Vector** %7, %struct.hypre_Vector** %6, %struct.hypre_Vector** %8)
  store %struct.hypre_CSRMatrix* %32, %struct.hypre_CSRMatrix** %5, align 8
  %33 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %34 = call i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector* %33, double 1.000000e+00)
  %35 = load %struct.hypre_Vector*, %struct.hypre_Vector** %7, align 8
  %36 = call i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector* %35, double 0.000000e+00)
  %37 = call i32 @gettimeofday(%struct.timeval* %1, %struct.timezone* null) #4
  %38 = call i64 @clock() #4
  store i64 %38, i64* %3, align 8
  store i32 0, i32* %12, align 4
  br label %39

; <label>:39:                                     ; preds = %47, %0
  %40 = load i32, i32* %12, align 4
  %41 = icmp slt i32 %40, 2000
  br i1 %41, label %42, label %50

; <label>:42:                                     ; preds = %39
  %43 = load %struct.hypre_CSRMatrix*, %struct.hypre_CSRMatrix** %5, align 8
  %44 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %45 = load %struct.hypre_Vector*, %struct.hypre_Vector** %7, align 8
  %46 = call i32 @hypre_CSRMatrixMatvec(double 1.000000e+00, %struct.hypre_CSRMatrix* %43, %struct.hypre_Vector* %44, double 0.000000e+00, %struct.hypre_Vector* %45)
  br label %47

; <label>:47:                                     ; preds = %42
  %48 = load i32, i32* %12, align 4
  %49 = add nsw i32 %48, 1
  store i32 %49, i32* %12, align 4
  br label %39

; <label>:50:                                     ; preds = %39
  %51 = call i32 @gettimeofday(%struct.timeval* %2, %struct.timezone* null) #4
  %52 = call i64 @clock() #4
  store i64 %52, i64* %4, align 8
  %53 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 0
  %54 = load i64, i64* %53, align 8
  %55 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %56 = load i64, i64* %55, align 8
  %57 = sub nsw i64 %54, %56
  %58 = sitofp i64 %57 to double
  %59 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 1
  %60 = load i64, i64* %59, align 8
  %61 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 1
  %62 = load i64, i64* %61, align 8
  %63 = sub nsw i64 %60, %62
  %64 = sitofp i64 %63 to double
  %65 = fdiv double %64, 1.000000e+06
  %66 = fadd double %58, %65
  %67 = load double, double* @totalWallTime, align 8
  %68 = fadd double %67, %66
  store double %68, double* @totalWallTime, align 8
  %69 = load i64, i64* %4, align 8
  %70 = load i64, i64* %3, align 8
  %71 = sub nsw i64 %69, %70
  %72 = sitofp i64 %71 to double
  %73 = fdiv double %72, 1.000000e+06
  %74 = load double, double* @totalCPUTime, align 8
  %75 = fadd double %74, %73
  store double %75, double* @totalCPUTime, align 8
  %76 = load %struct.hypre_Vector*, %struct.hypre_Vector** %7, align 8
  %77 = getelementptr inbounds %struct.hypre_Vector, %struct.hypre_Vector* %76, i32 0, i32 0
  %78 = load double*, double** %77, align 8
  store double* %78, double** %14, align 8
  %79 = load %struct.hypre_Vector*, %struct.hypre_Vector** %8, align 8
  %80 = getelementptr inbounds %struct.hypre_Vector, %struct.hypre_Vector* %79, i32 0, i32 0
  %81 = load double*, double** %80, align 8
  store double* %81, double** %15, align 8
  store double 0.000000e+00, double* %16, align 8
  store i32 0, i32* %12, align 4
  br label %82

; <label>:82:                                     ; preds = %109, %50
  %83 = load i32, i32* %12, align 4
  %84 = load i32, i32* %9, align 4
  %85 = load i32, i32* %10, align 4
  %86 = mul nsw i32 %84, %85
  %87 = load i32, i32* %11, align 4
  %88 = mul nsw i32 %86, %87
  %89 = icmp slt i32 %83, %88
  br i1 %89, label %90, label %112

; <label>:90:                                     ; preds = %82
  %91 = load double*, double** %14, align 8
  %92 = load i32, i32* %12, align 4
  %93 = sext i32 %92 to i64
  %94 = getelementptr inbounds double, double* %91, i64 %93
  %95 = load double, double* %94, align 8
  %96 = load double*, double** %15, align 8
  %97 = load i32, i32* %12, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds double, double* %96, i64 %98
  %100 = load double, double* %99, align 8
  %101 = fsub double %95, %100
  %102 = call double @llvm.fabs.f64(double %101)
  store double %102, double* %17, align 8
  %103 = load double, double* %17, align 8
  %104 = load double, double* %16, align 8
  %105 = fcmp ogt double %103, %104
  br i1 %105, label %106, label %108

; <label>:106:                                    ; preds = %90
  %107 = load double, double* %17, align 8
  store double %107, double* %16, align 8
  br label %108

; <label>:108:                                    ; preds = %106, %90
  br label %109

; <label>:109:                                    ; preds = %108
  %110 = load i32, i32* %12, align 4
  %111 = add nsw i32 %110, 1
  store i32 %111, i32* %12, align 4
  br label %82

; <label>:112:                                    ; preds = %82
  %113 = load double, double* %16, align 8
  %114 = fcmp ogt double %113, 0.000000e+00
  br i1 %114, label %115, label %118

; <label>:115:                                    ; preds = %112
  %116 = load double, double* %16, align 8
  %117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.7, i32 0, i32 0), double %116)
  br label %118

; <label>:118:                                    ; preds = %115, %112
  %119 = load double*, double** %13, align 8
  %120 = bitcast double* %119 to i8*
  call void @hypre_Free(i8* %120)
  store double* null, double** %13, align 8
  %121 = load %struct.hypre_CSRMatrix*, %struct.hypre_CSRMatrix** %5, align 8
  %122 = call i32 @hypre_CSRMatrixDestroy(%struct.hypre_CSRMatrix* %121)
  %123 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %124 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %123)
  %125 = load %struct.hypre_Vector*, %struct.hypre_Vector** %7, align 8
  %126 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %125)
  %127 = load %struct.hypre_Vector*, %struct.hypre_Vector** %8, align 8
  %128 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %127)
  ret void
}

declare i8* @hypre_CAlloc(i32, i32) #1

declare %struct.hypre_CSRMatrix* @GenerateSeqLaplacian(i32, i32, i32, double*, %struct.hypre_Vector**, %struct.hypre_Vector**, %struct.hypre_Vector**) #1

declare i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector*, double) #1

declare i32 @hypre_CSRMatrixMatvec(double, %struct.hypre_CSRMatrix*, %struct.hypre_Vector*, double, %struct.hypre_Vector*) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #3

declare void @hypre_Free(i8*) #1

declare i32 @hypre_CSRMatrixDestroy(%struct.hypre_CSRMatrix*) #1

declare i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector*) #1

; Function Attrs: noinline nounwind uwtable
define void @test_Relax() #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca %struct.timeval, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.hypre_CSRMatrix*, align 8
  %6 = alloca %struct.hypre_Vector*, align 8
  %7 = alloca %struct.hypre_Vector*, align 8
  %8 = alloca %struct.hypre_Vector*, align 8
  %9 = alloca i32, align 4
  %10 = alloca i32, align 4
  %11 = alloca i32, align 4
  %12 = alloca i32, align 4
  %13 = alloca double*, align 8
  %14 = alloca double*, align 8
  %15 = alloca double, align 8
  %16 = alloca double, align 8
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  store i32 50, i32* %9, align 4
  store i32 50, i32* %10, align 4
  store i32 50, i32* %11, align 4
  %17 = call i8* @hypre_CAlloc(i32 4, i32 8)
  %18 = bitcast i8* %17 to double*
  store double* %18, double** %13, align 8
  %19 = load double*, double** %13, align 8
  %20 = getelementptr inbounds double, double* %19, i64 0
  store double 6.000000e+00, double* %20, align 8
  %21 = load double*, double** %13, align 8
  %22 = getelementptr inbounds double, double* %21, i64 1
  store double -1.000000e+00, double* %22, align 8
  %23 = load double*, double** %13, align 8
  %24 = getelementptr inbounds double, double* %23, i64 2
  store double -1.000000e+00, double* %24, align 8
  %25 = load double*, double** %13, align 8
  %26 = getelementptr inbounds double, double* %25, i64 3
  store double -1.000000e+00, double* %26, align 8
  %27 = load i32, i32* %9, align 4
  %28 = load i32, i32* %10, align 4
  %29 = load i32, i32* %11, align 4
  %30 = load double*, double** %13, align 8
  %31 = call %struct.hypre_CSRMatrix* @GenerateSeqLaplacian(i32 %27, i32 %28, i32 %29, double* %30, %struct.hypre_Vector** %7, %struct.hypre_Vector** %6, %struct.hypre_Vector** %8)
  store %struct.hypre_CSRMatrix* %31, %struct.hypre_CSRMatrix** %5, align 8
  %32 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %33 = call i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector* %32, double 1.000000e+00)
  %34 = call i32 @gettimeofday(%struct.timeval* %1, %struct.timezone* null) #4
  %35 = call i64 @clock() #4
  store i64 %35, i64* %3, align 8
  store i32 0, i32* %12, align 4
  br label %36

; <label>:36:                                     ; preds = %44, %0
  %37 = load i32, i32* %12, align 4
  %38 = icmp slt i32 %37, 2000
  br i1 %38, label %39, label %47

; <label>:39:                                     ; preds = %36
  %40 = load %struct.hypre_CSRMatrix*, %struct.hypre_CSRMatrix** %5, align 8
  %41 = load %struct.hypre_Vector*, %struct.hypre_Vector** %8, align 8
  %42 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %43 = call i32 @hypre_BoomerAMGSeqRelax(%struct.hypre_CSRMatrix* %40, %struct.hypre_Vector* %41, %struct.hypre_Vector* %42)
  br label %44

; <label>:44:                                     ; preds = %39
  %45 = load i32, i32* %12, align 4
  %46 = add nsw i32 %45, 1
  store i32 %46, i32* %12, align 4
  br label %36

; <label>:47:                                     ; preds = %36
  %48 = call i32 @gettimeofday(%struct.timeval* %2, %struct.timezone* null) #4
  %49 = call i64 @clock() #4
  store i64 %49, i64* %4, align 8
  %50 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 0
  %51 = load i64, i64* %50, align 8
  %52 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %53 = load i64, i64* %52, align 8
  %54 = sub nsw i64 %51, %53
  %55 = sitofp i64 %54 to double
  %56 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 1
  %57 = load i64, i64* %56, align 8
  %58 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 1
  %59 = load i64, i64* %58, align 8
  %60 = sub nsw i64 %57, %59
  %61 = sitofp i64 %60 to double
  %62 = fdiv double %61, 1.000000e+06
  %63 = fadd double %55, %62
  %64 = load double, double* @totalWallTime, align 8
  %65 = fadd double %64, %63
  store double %65, double* @totalWallTime, align 8
  %66 = load i64, i64* %4, align 8
  %67 = load i64, i64* %3, align 8
  %68 = sub nsw i64 %66, %67
  %69 = sitofp i64 %68 to double
  %70 = fdiv double %69, 1.000000e+06
  %71 = load double, double* @totalCPUTime, align 8
  %72 = fadd double %71, %70
  store double %72, double* @totalCPUTime, align 8
  %73 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %74 = getelementptr inbounds %struct.hypre_Vector, %struct.hypre_Vector* %73, i32 0, i32 0
  %75 = load double*, double** %74, align 8
  store double* %75, double** %14, align 8
  store double 0.000000e+00, double* %16, align 8
  store i32 0, i32* %12, align 4
  br label %76

; <label>:76:                                     ; preds = %98, %47
  %77 = load i32, i32* %12, align 4
  %78 = load i32, i32* %9, align 4
  %79 = load i32, i32* %10, align 4
  %80 = mul nsw i32 %78, %79
  %81 = load i32, i32* %11, align 4
  %82 = mul nsw i32 %80, %81
  %83 = icmp slt i32 %77, %82
  br i1 %83, label %84, label %101

; <label>:84:                                     ; preds = %76
  %85 = load double*, double** %14, align 8
  %86 = load i32, i32* %12, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds double, double* %85, i64 %87
  %89 = load double, double* %88, align 8
  %90 = fsub double %89, 1.000000e+00
  %91 = call double @llvm.fabs.f64(double %90)
  store double %91, double* %15, align 8
  %92 = load double, double* %15, align 8
  %93 = load double, double* %16, align 8
  %94 = fcmp ogt double %92, %93
  br i1 %94, label %95, label %97

; <label>:95:                                     ; preds = %84
  %96 = load double, double* %15, align 8
  store double %96, double* %16, align 8
  br label %97

; <label>:97:                                     ; preds = %95, %84
  br label %98

; <label>:98:                                     ; preds = %97
  %99 = load i32, i32* %12, align 4
  %100 = add nsw i32 %99, 1
  store i32 %100, i32* %12, align 4
  br label %76

; <label>:101:                                    ; preds = %76
  %102 = load double, double* %16, align 8
  %103 = fcmp ogt double %102, 0.000000e+00
  br i1 %103, label %104, label %107

; <label>:104:                                    ; preds = %101
  %105 = load double, double* %16, align 8
  %106 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.8, i32 0, i32 0), double %105)
  br label %107

; <label>:107:                                    ; preds = %104, %101
  %108 = load double*, double** %13, align 8
  %109 = bitcast double* %108 to i8*
  call void @hypre_Free(i8* %109)
  store double* null, double** %13, align 8
  %110 = load %struct.hypre_CSRMatrix*, %struct.hypre_CSRMatrix** %5, align 8
  %111 = call i32 @hypre_CSRMatrixDestroy(%struct.hypre_CSRMatrix* %110)
  %112 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %113 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %112)
  %114 = load %struct.hypre_Vector*, %struct.hypre_Vector** %7, align 8
  %115 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %114)
  %116 = load %struct.hypre_Vector*, %struct.hypre_Vector** %8, align 8
  %117 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %116)
  ret void
}

declare i32 @hypre_BoomerAMGSeqRelax(%struct.hypre_CSRMatrix*, %struct.hypre_Vector*, %struct.hypre_Vector*) #1

; Function Attrs: noinline nounwind uwtable
define void @test_Axpy() #0 {
  %1 = alloca %struct.timeval, align 8
  %2 = alloca %struct.timeval, align 8
  %3 = alloca i64, align 8
  %4 = alloca i64, align 8
  %5 = alloca %struct.hypre_Vector*, align 8
  %6 = alloca %struct.hypre_Vector*, align 8
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  %12 = alloca double*, align 8
  store i64 0, i64* %3, align 8
  store i64 0, i64* %4, align 8
  store double 5.000000e-01, double* %9, align 8
  store i32 125000, i32* %7, align 4
  %13 = load i32, i32* %7, align 4
  %14 = call %struct.hypre_Vector* @hypre_SeqVectorCreate(i32 %13)
  store %struct.hypre_Vector* %14, %struct.hypre_Vector** %5, align 8
  %15 = load i32, i32* %7, align 4
  %16 = call %struct.hypre_Vector* @hypre_SeqVectorCreate(i32 %15)
  store %struct.hypre_Vector* %16, %struct.hypre_Vector** %6, align 8
  %17 = load %struct.hypre_Vector*, %struct.hypre_Vector** %5, align 8
  %18 = call i32 @hypre_SeqVectorInitialize(%struct.hypre_Vector* %17)
  %19 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %20 = call i32 @hypre_SeqVectorInitialize(%struct.hypre_Vector* %19)
  %21 = load %struct.hypre_Vector*, %struct.hypre_Vector** %5, align 8
  %22 = call i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector* %21, double 1.000000e+00)
  %23 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %24 = call i32 @hypre_SeqVectorSetConstantValues(%struct.hypre_Vector* %23, double 1.000000e+00)
  %25 = call i32 @gettimeofday(%struct.timeval* %1, %struct.timezone* null) #4
  %26 = call i64 @clock() #4
  store i64 %26, i64* %3, align 8
  store i32 0, i32* %8, align 4
  br label %27

; <label>:27:                                     ; preds = %35, %0
  %28 = load i32, i32* %8, align 4
  %29 = icmp slt i32 %28, 2000
  br i1 %29, label %30, label %38

; <label>:30:                                     ; preds = %27
  %31 = load double, double* %9, align 8
  %32 = load %struct.hypre_Vector*, %struct.hypre_Vector** %5, align 8
  %33 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %34 = call i32 @hypre_SeqVectorAxpy(double %31, %struct.hypre_Vector* %32, %struct.hypre_Vector* %33)
  br label %35

; <label>:35:                                     ; preds = %30
  %36 = load i32, i32* %8, align 4
  %37 = add nsw i32 %36, 1
  store i32 %37, i32* %8, align 4
  br label %27

; <label>:38:                                     ; preds = %27
  %39 = call i32 @gettimeofday(%struct.timeval* %2, %struct.timezone* null) #4
  %40 = call i64 @clock() #4
  store i64 %40, i64* %4, align 8
  %41 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %42 = getelementptr inbounds %struct.hypre_Vector, %struct.hypre_Vector* %41, i32 0, i32 0
  %43 = load double*, double** %42, align 8
  store double* %43, double** %12, align 8
  store double 0.000000e+00, double* %11, align 8
  store i32 0, i32* %8, align 4
  br label %44

; <label>:44:                                     ; preds = %63, %38
  %45 = load i32, i32* %8, align 4
  %46 = load i32, i32* %7, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %66

; <label>:48:                                     ; preds = %44
  %49 = load double*, double** %12, align 8
  %50 = load i32, i32* %8, align 4
  %51 = sext i32 %50 to i64
  %52 = getelementptr inbounds double, double* %49, i64 %51
  %53 = load double, double* %52, align 8
  %54 = fsub double %53, 1.000000e+00
  %55 = fsub double %54, 1.000000e+03
  %56 = call double @llvm.fabs.f64(double %55)
  store double %56, double* %10, align 8
  %57 = load double, double* %10, align 8
  %58 = load double, double* %11, align 8
  %59 = fcmp ogt double %57, %58
  br i1 %59, label %60, label %62

; <label>:60:                                     ; preds = %48
  %61 = load double, double* %10, align 8
  store double %61, double* %11, align 8
  br label %62

; <label>:62:                                     ; preds = %60, %48
  br label %63

; <label>:63:                                     ; preds = %62
  %64 = load i32, i32* %8, align 4
  %65 = add nsw i32 %64, 1
  store i32 %65, i32* %8, align 4
  br label %44

; <label>:66:                                     ; preds = %44
  %67 = load double, double* %11, align 8
  %68 = fcmp ogt double %67, 0.000000e+00
  br i1 %68, label %69, label %72

; <label>:69:                                     ; preds = %66
  %70 = load double, double* %11, align 8
  %71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.9, i32 0, i32 0), double %70)
  br label %72

; <label>:72:                                     ; preds = %69, %66
  %73 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 0
  %74 = load i64, i64* %73, align 8
  %75 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 0
  %76 = load i64, i64* %75, align 8
  %77 = sub nsw i64 %74, %76
  %78 = sitofp i64 %77 to double
  %79 = getelementptr inbounds %struct.timeval, %struct.timeval* %2, i32 0, i32 1
  %80 = load i64, i64* %79, align 8
  %81 = getelementptr inbounds %struct.timeval, %struct.timeval* %1, i32 0, i32 1
  %82 = load i64, i64* %81, align 8
  %83 = sub nsw i64 %80, %82
  %84 = sitofp i64 %83 to double
  %85 = fdiv double %84, 1.000000e+06
  %86 = fadd double %78, %85
  %87 = load double, double* @totalWallTime, align 8
  %88 = fadd double %87, %86
  store double %88, double* @totalWallTime, align 8
  %89 = load i64, i64* %4, align 8
  %90 = load i64, i64* %3, align 8
  %91 = sub nsw i64 %89, %90
  %92 = sitofp i64 %91 to double
  %93 = fdiv double %92, 1.000000e+06
  %94 = load double, double* @totalCPUTime, align 8
  %95 = fadd double %94, %93
  store double %95, double* @totalCPUTime, align 8
  %96 = load %struct.hypre_Vector*, %struct.hypre_Vector** %5, align 8
  %97 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %96)
  %98 = load %struct.hypre_Vector*, %struct.hypre_Vector** %6, align 8
  %99 = call i32 @hypre_SeqVectorDestroy(%struct.hypre_Vector* %98)
  ret void
}

declare %struct.hypre_Vector* @hypre_SeqVectorCreate(i32) #1

declare i32 @hypre_SeqVectorInitialize(%struct.hypre_Vector*) #1

declare i32 @hypre_SeqVectorAxpy(double, %struct.hypre_Vector*, %struct.hypre_Vector*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind readnone speculatable }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
