; ModuleID = 'build.bc'
source_filename = "build.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.root = type { %struct.demand, double, double, %struct.demand, double, double, [11 x %struct.lateral*] }
%struct.demand = type { double, double }
%struct.lateral = type { %struct.demand, double, double, double, double, %struct.lateral*, %struct.branch* }
%struct.branch = type { %struct.demand, double, double, double, double, %struct.branch*, [12 x %struct.leaf*] }
%struct.leaf = type { %struct.demand, double, double }

; Function Attrs: noinline nounwind uwtable
define %struct.root* @build_tree() #0 {
  %1 = alloca i32, align 4
  %2 = alloca %struct.root*, align 8
  %3 = alloca %struct.lateral*, align 8
  %4 = call i8* @malloc(i32 152)
  %5 = bitcast i8* %4 to %struct.root*
  store %struct.root* %5, %struct.root** %2, align 8
  store i32 0, i32* %1, align 4
  br label %6

; <label>:6:                                      ; preds = %19, %0
  %7 = load i32, i32* %1, align 4
  %8 = icmp slt i32 %7, 11
  br i1 %8, label %9, label %22

; <label>:9:                                      ; preds = %6
  %10 = load i32, i32* %1, align 4
  %11 = mul nsw i32 %10, 21
  %12 = call %struct.lateral* @build_lateral(i32 %11, i32 21)
  store %struct.lateral* %12, %struct.lateral** %3, align 8
  %13 = load %struct.lateral*, %struct.lateral** %3, align 8
  %14 = load %struct.root*, %struct.root** %2, align 8
  %15 = getelementptr inbounds %struct.root, %struct.root* %14, i32 0, i32 6
  %16 = load i32, i32* %1, align 4
  %17 = sext i32 %16 to i64
  %18 = getelementptr inbounds [11 x %struct.lateral*], [11 x %struct.lateral*]* %15, i64 0, i64 %17
  store %struct.lateral* %13, %struct.lateral** %18, align 8
  br label %19

; <label>:19:                                     ; preds = %9
  %20 = load i32, i32* %1, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %1, align 4
  br label %6

; <label>:22:                                     ; preds = %6
  %23 = load %struct.root*, %struct.root** %2, align 8
  %24 = getelementptr inbounds %struct.root, %struct.root* %23, i32 0, i32 1
  store double 8.000000e-01, double* %24, align 8
  %25 = load %struct.root*, %struct.root** %2, align 8
  %26 = getelementptr inbounds %struct.root, %struct.root* %25, i32 0, i32 2
  store double 1.600000e-01, double* %26, align 8
  %27 = load %struct.root*, %struct.root** %2, align 8
  ret %struct.root* %27
}

declare i8* @malloc(i32) #1

; Function Attrs: noinline nounwind uwtable
define %struct.lateral* @build_lateral(i32, i32) #0 {
  %3 = alloca %struct.lateral*, align 8
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca %struct.lateral*, align 8
  %7 = alloca %struct.branch*, align 8
  %8 = alloca %struct.lateral*, align 8
  store i32 %0, i32* %4, align 4
  store i32 %1, i32* %5, align 4
  %9 = load i32, i32* %5, align 4
  %10 = icmp eq i32 %9, 0
  br i1 %10, label %11, label %12

; <label>:11:                                     ; preds = %2
  store %struct.lateral* null, %struct.lateral** %3, align 8
  br label %40

; <label>:12:                                     ; preds = %2
  %13 = call i8* @malloc(i32 64)
  %14 = bitcast i8* %13 to %struct.lateral*
  store %struct.lateral* %14, %struct.lateral** %6, align 8
  %15 = load i32, i32* %4, align 4
  %16 = load i32, i32* %5, align 4
  %17 = sub nsw i32 %16, 1
  %18 = call %struct.lateral* @build_lateral(i32 %15, i32 %17)
  store %struct.lateral* %18, %struct.lateral** %8, align 8
  %19 = load i32, i32* %4, align 4
  %20 = mul nsw i32 %19, 6
  %21 = load i32, i32* %5, align 4
  %22 = sub nsw i32 %21, 1
  %23 = mul nsw i32 %22, 6
  %24 = call %struct.branch* @build_branch(i32 %20, i32 %23, i32 6)
  store %struct.branch* %24, %struct.branch** %7, align 8
  %25 = load %struct.lateral*, %struct.lateral** %8, align 8
  %26 = load %struct.lateral*, %struct.lateral** %6, align 8
  %27 = getelementptr inbounds %struct.lateral, %struct.lateral* %26, i32 0, i32 5
  store %struct.lateral* %25, %struct.lateral** %27, align 8
  %28 = load %struct.branch*, %struct.branch** %7, align 8
  %29 = load %struct.lateral*, %struct.lateral** %6, align 8
  %30 = getelementptr inbounds %struct.lateral, %struct.lateral* %29, i32 0, i32 6
  store %struct.branch* %28, %struct.branch** %30, align 8
  %31 = load %struct.lateral*, %struct.lateral** %6, align 8
  %32 = getelementptr inbounds %struct.lateral, %struct.lateral* %31, i32 0, i32 3
  store double 0x3ECBF647612F3696, double* %32, align 8
  %33 = load %struct.lateral*, %struct.lateral** %6, align 8
  %34 = getelementptr inbounds %struct.lateral, %struct.lateral* %33, i32 0, i32 4
  store double 0x3EB0C6F7A0B5ED8D, double* %34, align 8
  %35 = load %struct.lateral*, %struct.lateral** %6, align 8
  %36 = getelementptr inbounds %struct.lateral, %struct.lateral* %35, i32 0, i32 1
  store double 0.000000e+00, double* %36, align 8
  %37 = load %struct.lateral*, %struct.lateral** %6, align 8
  %38 = getelementptr inbounds %struct.lateral, %struct.lateral* %37, i32 0, i32 2
  store double 0.000000e+00, double* %38, align 8
  %39 = load %struct.lateral*, %struct.lateral** %6, align 8
  store %struct.lateral* %39, %struct.lateral** %3, align 8
  br label %40

; <label>:40:                                     ; preds = %12, %11
  %41 = load %struct.lateral*, %struct.lateral** %3, align 8
  ret %struct.lateral* %41
}

; Function Attrs: noinline nounwind uwtable
define %struct.branch* @build_branch(i32, i32, i32) #0 {
  %4 = alloca %struct.branch*, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca %struct.leaf*, align 8
  %9 = alloca %struct.branch*, align 8
  store i32 %0, i32* %5, align 4
  store i32 %1, i32* %6, align 4
  store i32 %2, i32* %7, align 4
  %10 = load i32, i32* %7, align 4
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %3
  store %struct.branch* null, %struct.branch** %4, align 8
  br label %47

; <label>:13:                                     ; preds = %3
  %14 = call i8* @malloc(i32 152)
  %15 = bitcast i8* %14 to %struct.branch*
  store %struct.branch* %15, %struct.branch** %9, align 8
  %16 = load i32, i32* %5, align 4
  %17 = load i32, i32* %6, align 4
  %18 = load i32, i32* %7, align 4
  %19 = sub nsw i32 %18, 1
  %20 = call %struct.branch* @build_branch(i32 %16, i32 %17, i32 %19)
  %21 = load %struct.branch*, %struct.branch** %9, align 8
  %22 = getelementptr inbounds %struct.branch, %struct.branch* %21, i32 0, i32 5
  store %struct.branch* %20, %struct.branch** %22, align 8
  store i32 0, i32* %5, align 4
  br label %23

; <label>:23:                                     ; preds = %34, %13
  %24 = load i32, i32* %5, align 4
  %25 = icmp slt i32 %24, 12
  br i1 %25, label %26, label %37

; <label>:26:                                     ; preds = %23
  %27 = call %struct.leaf* @build_leaf()
  store %struct.leaf* %27, %struct.leaf** %8, align 8
  %28 = load %struct.leaf*, %struct.leaf** %8, align 8
  %29 = load %struct.branch*, %struct.branch** %9, align 8
  %30 = getelementptr inbounds %struct.branch, %struct.branch* %29, i32 0, i32 6
  %31 = load i32, i32* %5, align 4
  %32 = sext i32 %31 to i64
  %33 = getelementptr inbounds [12 x %struct.leaf*], [12 x %struct.leaf*]* %30, i64 0, i64 %32
  store %struct.leaf* %28, %struct.leaf** %33, align 8
  br label %34

; <label>:34:                                     ; preds = %26
  %35 = load i32, i32* %5, align 4
  %36 = add nsw i32 %35, 1
  store i32 %36, i32* %5, align 4
  br label %23

; <label>:37:                                     ; preds = %23
  %38 = load %struct.branch*, %struct.branch** %9, align 8
  %39 = getelementptr inbounds %struct.branch, %struct.branch* %38, i32 0, i32 3
  store double 1.000000e-04, double* %39, align 8
  %40 = load %struct.branch*, %struct.branch** %9, align 8
  %41 = getelementptr inbounds %struct.branch, %struct.branch* %40, i32 0, i32 4
  store double 2.000000e-05, double* %41, align 8
  %42 = load %struct.branch*, %struct.branch** %9, align 8
  %43 = getelementptr inbounds %struct.branch, %struct.branch* %42, i32 0, i32 1
  store double 0.000000e+00, double* %43, align 8
  %44 = load %struct.branch*, %struct.branch** %9, align 8
  %45 = getelementptr inbounds %struct.branch, %struct.branch* %44, i32 0, i32 2
  store double 0.000000e+00, double* %45, align 8
  %46 = load %struct.branch*, %struct.branch** %9, align 8
  store %struct.branch* %46, %struct.branch** %4, align 8
  br label %47

; <label>:47:                                     ; preds = %37, %12
  %48 = load %struct.branch*, %struct.branch** %4, align 8
  ret %struct.branch* %48
}

; Function Attrs: noinline nounwind uwtable
define %struct.leaf* @build_leaf() #0 {
  %1 = alloca %struct.leaf*, align 8
  %2 = call i8* @malloc(i32 32)
  %3 = bitcast i8* %2 to %struct.leaf*
  store %struct.leaf* %3, %struct.leaf** %1, align 8
  %4 = load %struct.leaf*, %struct.leaf** %1, align 8
  %5 = getelementptr inbounds %struct.leaf, %struct.leaf* %4, i32 0, i32 0
  %6 = getelementptr inbounds %struct.demand, %struct.demand* %5, i32 0, i32 0
  store double 1.000000e+00, double* %6, align 8
  %7 = load %struct.leaf*, %struct.leaf** %1, align 8
  %8 = getelementptr inbounds %struct.leaf, %struct.leaf* %7, i32 0, i32 0
  %9 = getelementptr inbounds %struct.demand, %struct.demand* %8, i32 0, i32 1
  store double 1.000000e+00, double* %9, align 8
  %10 = load %struct.leaf*, %struct.leaf** %1, align 8
  ret %struct.leaf* %10
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
