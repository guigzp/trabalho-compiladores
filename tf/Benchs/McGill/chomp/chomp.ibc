; ModuleID = 'chomp.rbc'
source_filename = "llvm-link"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct._play = type { i32, i32*, %struct._list*, %struct._play* }
%struct._list = type { i32*, %struct._list* }

@ncol = common local_unnamed_addr global i32 0, align 4
@nrow = common local_unnamed_addr global i32 0, align 4
@game_tree = common local_unnamed_addr global %struct._play* null, align 8
@wanted = common local_unnamed_addr global %struct._list* null, align 8
@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.3 = private unnamed_addr constant [14 x i8] c"  value = %d\0A\00", align 1
@.str.8 = private unnamed_addr constant [14 x i8] c" Selection : \00", align 1
@.str.13 = private unnamed_addr constant [27 x i8] c"Enter number of Columns : \00", align 1
@.str.14 = private unnamed_addr constant [27 x i8] c"Enter number of Rows    : \00", align 1
@.str.15 = private unnamed_addr constant [28 x i8] c"player %d plays at (%d,%d)\0A\00", align 1
@.str.16 = private unnamed_addr constant [17 x i8] c"player %d loses\0A\00", align 1
@str = private unnamed_addr constant [2 x i8] c")\00"
@str.1 = private unnamed_addr constant [12 x i8] c"For state :\00"
@str.2 = private unnamed_addr constant [19 x i8] c"We get, in order :\00"
@str.3 = private unnamed_addr constant [33 x i8] c"Mode : 1 -> multiple first moves\00"
@str.4 = private unnamed_addr constant [24 x i8] c"       2 -> report game\00"
@str.5 = private unnamed_addr constant [27 x i8] c"       3 -> good positions\00"

; Function Attrs: noinline nounwind uwtable
define noalias i32* @copy_data(i32* nocapture readonly) local_unnamed_addr #0 {
  %2 = load i32, i32* @ncol, align 4
  %3 = sext i32 %2 to i64
  %4 = shl nsw i64 %3, 2
  %5 = tail call noalias i8* @malloc(i64 %4) #4
  %6 = bitcast i8* %5 to i32*
  %7 = add nsw i32 %2, -1
  %8 = icmp eq i32 %2, 0
  br i1 %8, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  %9 = sext i32 %7 to i64
  %10 = zext i32 %7 to i64
  %11 = sub nsw i64 %9, %10
  %12 = shl nsw i64 %11, 2
  %scevgep = getelementptr i8, i8* %5, i64 %12
  %13 = sub nsw i64 %9, %10
  %scevgep1 = getelementptr i32, i32* %0, i64 %13
  %scevgep12 = bitcast i32* %scevgep1 to i8*
  %14 = zext i32 %2 to i64
  %15 = shl nuw nsw i64 %14, 2
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* %scevgep, i8* %scevgep12, i64 %15, i32 4, i1 false)
  br label %._crit_edge

._crit_edge:                                      ; preds = %.lr.ph, %1
  ret i32* %6
}

; Function Attrs: nounwind
declare noalias i8* @malloc(i64) local_unnamed_addr #1

; Function Attrs: noinline norecurse nounwind uwtable
define i32 @next_data(i32* nocapture) local_unnamed_addr #2 {
  %2 = load i32, i32* @ncol, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %11, %.lr.ph
  %.013 = phi i32 [ 0, %.lr.ph ], [ %12, %11 ]
  %5 = zext i32 %.013 to i64
  %6 = getelementptr inbounds i32, i32* %0, i64 %5
  %7 = load i32, i32* %6, align 4
  %8 = load i32, i32* @nrow, align 4
  %9 = icmp eq i32 %7, %8
  br i1 %9, label %11, label %.thread

.thread:                                          ; preds = %4
  %10 = add nsw i32 %7, 1
  store i32 %10, i32* %6, align 4
  br label %._crit_edge

; <label>:11:                                     ; preds = %4
  store i32 0, i32* %6, align 4
  %12 = add nuw nsw i32 %.013, 1
  %13 = load i32, i32* @ncol, align 4
  %14 = icmp eq i32 %12, %13
  br i1 %14, label %._crit_edge, label %4

._crit_edge:                                      ; preds = %11, %.thread, %1
  %.0.lcssa = phi i32 [ 0, %1 ], [ 1, %.thread ], [ 0, %11 ]
  ret i32 %.0.lcssa
}

; Function Attrs: noinline norecurse nounwind uwtable
define void @melt_data(i32* nocapture, i32* nocapture readonly) local_unnamed_addr #2 {
  %3 = load i32, i32* @ncol, align 4
  %4 = add nsw i32 %3, -1
  %5 = icmp eq i32 %3, 0
  br i1 %5, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %2
  %6 = sext i32 %4 to i64
  %xtraiter = and i32 %3, 1
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.prol.loopexit, label %.prol.preheader

.prol.preheader:                                  ; preds = %.lr.ph
  %7 = getelementptr inbounds i32, i32* %0, i64 %6
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %1, i64 %6
  %10 = load i32, i32* %9, align 4
  %11 = icmp sgt i32 %8, %10
  br i1 %11, label %12, label %13

; <label>:12:                                     ; preds = %.prol.preheader
  store i32 %10, i32* %7, align 4
  br label %13

; <label>:13:                                     ; preds = %12, %.prol.preheader
  %indvars.iv.next.prol = add nsw i64 %6, -1
  br label %.prol.loopexit

.prol.loopexit:                                   ; preds = %.lr.ph, %13
  %indvars.iv.unr = phi i64 [ %6, %.lr.ph ], [ %indvars.iv.next.prol, %13 ]
  %14 = icmp eq i32 %4, 0
  br i1 %14, label %._crit_edge, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.prol.loopexit
  br label %15

; <label>:15:                                     ; preds = %29, %.lr.ph.new
  %indvars.iv = phi i64 [ %indvars.iv.unr, %.lr.ph.new ], [ %indvars.iv.next.1, %29 ]
  %16 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  %17 = load i32, i32* %16, align 4
  %18 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %19 = load i32, i32* %18, align 4
  %20 = icmp sgt i32 %17, %19
  br i1 %20, label %21, label %22

; <label>:21:                                     ; preds = %15
  store i32 %19, i32* %16, align 4
  br label %22

; <label>:22:                                     ; preds = %21, %15
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %23 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv.next
  %24 = load i32, i32* %23, align 4
  %25 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv.next
  %26 = load i32, i32* %25, align 4
  %27 = icmp sgt i32 %24, %26
  br i1 %27, label %28, label %29

._crit_edge:                                      ; preds = %29, %.prol.loopexit, %2
  ret void

; <label>:28:                                     ; preds = %22
  store i32 %26, i32* %23, align 4
  br label %29

; <label>:29:                                     ; preds = %28, %22
  %indvars.iv.next.1 = add nsw i64 %indvars.iv, -2
  %30 = trunc i64 %indvars.iv.next to i32
  %31 = icmp eq i32 %30, 0
  br i1 %31, label %._crit_edge, label %15
}

; Function Attrs: noinline norecurse nounwind readonly uwtable
define i32 @equal_data(i32* nocapture readonly, i32* nocapture readonly) local_unnamed_addr #3 {
  %3 = load i32, i32* @ncol, align 4
  %4 = icmp eq i32 %3, 0
  br i1 %4, label %.critedge, label %.lr.ph

.lr.ph:                                           ; preds = %2
  br label %7

; <label>:5:                                      ; preds = %7
  %6 = icmp eq i32 %8, 0
  br i1 %6, label %.critedge, label %7

; <label>:7:                                      ; preds = %.lr.ph, %5
  %.in = phi i32 [ %3, %.lr.ph ], [ %8, %5 ]
  %8 = add nsw i32 %.in, -1
  %9 = sext i32 %8 to i64
  %10 = getelementptr inbounds i32, i32* %0, i64 %9
  %11 = load i32, i32* %10, align 4
  %12 = getelementptr inbounds i32, i32* %1, i64 %9
  %13 = load i32, i32* %12, align 4
  %14 = icmp eq i32 %11, %13
  br i1 %14, label %5, label %.critedge

.critedge:                                        ; preds = %7, %5, %2
  %.0.lcssa = phi i32 [ 0, %2 ], [ 0, %5 ], [ %.in, %7 ]
  %15 = icmp slt i32 %.0.lcssa, 1
  %16 = zext i1 %15 to i32
  ret i32 %16
}

; Function Attrs: noinline norecurse nounwind readonly uwtable
define i32 @valid_data(i32* nocapture readonly) local_unnamed_addr #3 {
  %2 = load i32, i32* @ncol, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  %.01.pre = load i32, i32* @nrow, align 4
  br label %6

; <label>:4:                                      ; preds = %6
  %5 = icmp eq i32 %11, %2
  br i1 %5, label %._crit_edge, label %6

; <label>:6:                                      ; preds = %.lr.ph, %4
  %.01 = phi i32 [ %.01.pre, %.lr.ph ], [ %9, %4 ]
  %.03 = phi i32 [ 0, %.lr.ph ], [ %11, %4 ]
  %7 = zext i32 %.03 to i64
  %8 = getelementptr inbounds i32, i32* %0, i64 %7
  %9 = load i32, i32* %8, align 4
  %10 = icmp sgt i32 %9, %.01
  %11 = add nuw nsw i32 %.03, 1
  br i1 %10, label %._crit_edge, label %4

._crit_edge:                                      ; preds = %4, %6, %1
  %.lcssa = phi i32 [ 1, %1 ], [ 0, %6 ], [ 1, %4 ]
  ret i32 %.lcssa
}

; Function Attrs: noinline nounwind uwtable
define void @dump_list(%struct._list*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._list* %0, null
  br i1 %2, label %9, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct._list, %struct._list* %0, i64 0, i32 1
  %5 = load %struct._list*, %struct._list** %4, align 8
  tail call void @dump_list(%struct._list* %5)
  %6 = bitcast %struct._list* %0 to i8**
  %7 = load i8*, i8** %6, align 8
  tail call void @free(i8* %7) #4
  %8 = bitcast %struct._list* %0 to i8*
  tail call void @free(i8* %8) #4
  ret void

; <label>:9:                                      ; preds = %1
  ret void
}

; Function Attrs: nounwind
declare void @free(i8* nocapture) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define void @dump_play(%struct._play*) local_unnamed_addr #0 {
  %2 = icmp eq %struct._play* %0, null
  br i1 %2, label %12, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct._play, %struct._play* %0, i64 0, i32 3
  %5 = load %struct._play*, %struct._play** %4, align 8
  tail call void @dump_play(%struct._play* %5)
  %6 = getelementptr inbounds %struct._play, %struct._play* %0, i64 0, i32 2
  %7 = load %struct._list*, %struct._list** %6, align 8
  tail call void @dump_list(%struct._list* %7)
  %8 = getelementptr inbounds %struct._play, %struct._play* %0, i64 0, i32 1
  %9 = bitcast i32** %8 to i8**
  %10 = load i8*, i8** %9, align 8
  tail call void @free(i8* %10) #4
  %11 = bitcast %struct._play* %0 to i8*
  tail call void @free(i8* %11) #4
  ret void

; <label>:12:                                     ; preds = %1
  ret void
}

; Function Attrs: noinline norecurse nounwind readonly uwtable
define i32 @get_value(i32* nocapture readonly) local_unnamed_addr #3 {
  br label %2

; <label>:2:                                      ; preds = %2, %1
  %.0.in = phi %struct._play** [ @game_tree, %1 ], [ %7, %2 ]
  %.0 = load %struct._play*, %struct._play** %.0.in, align 8
  %3 = getelementptr inbounds %struct._play, %struct._play* %.0, i64 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = tail call i32 @equal_data(i32* %4, i32* %0)
  %6 = icmp eq i32 %5, 0
  %7 = getelementptr inbounds %struct._play, %struct._play* %.0, i64 0, i32 3
  br i1 %6, label %2, label %8

; <label>:8:                                      ; preds = %2
  %9 = getelementptr inbounds %struct._play, %struct._play* %.0, i64 0, i32 0
  %10 = load i32, i32* %9, align 8
  ret i32 %10
}

; Function Attrs: noinline nounwind uwtable
define void @show_data(i32* nocapture readonly) local_unnamed_addr #0 {
  %2 = load i32, i32* @ncol, align 4
  %3 = icmp eq i32 %2, 0
  br i1 %3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %4

; <label>:4:                                      ; preds = %.lr.ph, %13
  %indvars.iv = phi i64 [ 0, %.lr.ph ], [ %indvars.iv.next, %13 ]
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  %5 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  %6 = load i32, i32* %5, align 4
  %7 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str, i64 0, i64 0), i32 %6)
  %8 = load i32, i32* @ncol, align 4
  %9 = zext i32 %8 to i64
  %10 = icmp eq i64 %indvars.iv.next, %9
  br i1 %10, label %13, label %11

; <label>:11:                                     ; preds = %4
  %12 = tail call i32 @putchar(i32 44)
  %.pre = load i32, i32* @ncol, align 4
  %.pre2 = zext i32 %.pre to i64
  br label %13

; <label>:13:                                     ; preds = %4, %11
  %.pre-phi = phi i64 [ %9, %4 ], [ %.pre2, %11 ]
  %14 = icmp eq i64 %indvars.iv.next, %.pre-phi
  br i1 %14, label %._crit_edge, label %4

._crit_edge:                                      ; preds = %13, %1
  ret void
}

; Function Attrs: nounwind
declare i32 @printf(i8* nocapture readonly, ...) local_unnamed_addr #1

; Function Attrs: nounwind
declare i32 @putchar(i32) local_unnamed_addr #1

; Function Attrs: noinline nounwind uwtable
define void @show_move(i32* nocapture readonly) local_unnamed_addr #0 {
  %2 = tail call i32 @putchar(i32 40)
  tail call void @show_data(i32* %0)
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @str, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @show_list(%struct._list* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct._list* %0, null
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %.lr.ph, %3
  %.01 = phi %struct._list* [ %0, %.lr.ph ], [ %7, %3 ]
  %4 = getelementptr inbounds %struct._list, %struct._list* %.01, i64 0, i32 0
  %5 = load i32*, i32** %4, align 8
  tail call void @show_move(i32* %5)
  %6 = getelementptr inbounds %struct._list, %struct._list* %.01, i64 0, i32 1
  %7 = load %struct._list*, %struct._list** %6, align 8
  %8 = icmp eq %struct._list* %7, null
  br i1 %8, label %._crit_edge, label %3

._crit_edge:                                      ; preds = %3, %1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define void @show_play(%struct._play* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct._play* %0, null
  br i1 %2, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %3

; <label>:3:                                      ; preds = %.lr.ph, %3
  %.02 = phi %struct._play* [ %0, %.lr.ph ], [ %12, %3 ]
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @str.1, i64 0, i64 0))
  %4 = getelementptr inbounds %struct._play, %struct._play* %.02, i64 0, i32 1
  %5 = load i32*, i32** %4, align 8
  tail call void @show_data(i32* %5)
  %6 = getelementptr inbounds %struct._play, %struct._play* %.02, i64 0, i32 0
  %7 = load i32, i32* %6, align 8
  %8 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.3, i64 0, i64 0), i32 %7)
  %puts1 = tail call i32 @puts(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @str.2, i64 0, i64 0))
  %9 = getelementptr inbounds %struct._play, %struct._play* %.02, i64 0, i32 2
  %10 = load %struct._list*, %struct._list** %9, align 8
  tail call void @show_list(%struct._list* %10)
  %11 = getelementptr inbounds %struct._play, %struct._play* %.02, i64 0, i32 3
  %12 = load %struct._play*, %struct._play** %11, align 8
  %13 = icmp eq %struct._play* %12, null
  br i1 %13, label %._crit_edge, label %3

._crit_edge:                                      ; preds = %3, %1
  ret void
}

; Function Attrs: noinline norecurse nounwind readonly uwtable
define i32 @in_wanted(i32* nocapture readonly) local_unnamed_addr #3 {
  %.012 = load %struct._list*, %struct._list** @wanted, align 8
  %cond3 = icmp eq %struct._list* %.012, null
  br i1 %cond3, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  br label %4

; <label>:2:                                      ; preds = %4
  %3 = getelementptr inbounds %struct._list, %struct._list* %.014, i64 0, i32 1
  %.01 = load %struct._list*, %struct._list** %3, align 8
  %cond = icmp eq %struct._list* %.01, null
  br i1 %cond, label %._crit_edge, label %4

; <label>:4:                                      ; preds = %.lr.ph, %2
  %.014 = phi %struct._list* [ %.012, %.lr.ph ], [ %.01, %2 ]
  %5 = getelementptr inbounds %struct._list, %struct._list* %.014, i64 0, i32 0
  %6 = load i32*, i32** %5, align 8
  %7 = tail call i32 @equal_data(i32* %6, i32* %0)
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %2, label %._crit_edge

._crit_edge:                                      ; preds = %4, %2, %1
  %merge = phi i32 [ 0, %1 ], [ 0, %2 ], [ 1, %4 ]
  ret i32 %merge
}

; Function Attrs: noinline nounwind uwtable
define noalias i32* @make_data(i32, i32) local_unnamed_addr #0 {
  %3 = load i32, i32* @ncol, align 4
  %4 = sext i32 %3 to i64
  %5 = shl nsw i64 %4, 2
  %6 = tail call noalias i8* @malloc(i64 %5) #4
  %7 = bitcast i8* %6 to i32*
  %8 = icmp eq i32 %1, 0
  br i1 %8, label %._crit_edge5, label %.lr.ph4

.lr.ph4:                                          ; preds = %2
  %9 = load i32, i32* @nrow, align 4
  %10 = add i32 %1, -1
  %xtraiter8 = and i32 %1, 7
  %11 = icmp ult i32 %10, 7
  br i1 %11, label %._crit_edge5.loopexit.unr-lcssa, label %.lr.ph4.new

.lr.ph4.new:                                      ; preds = %.lr.ph4
  %unroll_iter = sub i32 %1, %xtraiter8
  %12 = insertelement <4 x i32> undef, i32 %9, i32 0
  %13 = shufflevector <4 x i32> %12, <4 x i32> undef, <4 x i32> zeroinitializer
  %14 = insertelement <4 x i32> undef, i32 %9, i32 0
  %15 = shufflevector <4 x i32> %14, <4 x i32> undef, <4 x i32> zeroinitializer
  br label %16

; <label>:16:                                     ; preds = %16, %.lr.ph4.new
  %indvars.iv6 = phi i64 [ 0, %.lr.ph4.new ], [ %indvars.iv.next7.7, %16 ]
  %niter = phi i32 [ %unroll_iter, %.lr.ph4.new ], [ %niter.nsub.7, %16 ]
  %17 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv6
  %18 = bitcast i32* %17 to <4 x i32>*
  store <4 x i32> %13, <4 x i32>* %18, align 4
  %indvars.iv.next7.3 = or i64 %indvars.iv6, 4
  %19 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next7.3
  %20 = bitcast i32* %19 to <4 x i32>*
  store <4 x i32> %15, <4 x i32>* %20, align 4
  %indvars.iv.next7.7 = add nuw nsw i64 %indvars.iv6, 8
  %niter.nsub.7 = add i32 %niter, -8
  %niter.ncmp.7 = icmp eq i32 %niter.nsub.7, 0
  br i1 %niter.ncmp.7, label %._crit_edge5.loopexit.unr-lcssa, label %16

._crit_edge5.loopexit.unr-lcssa:                  ; preds = %16, %.lr.ph4
  %indvars.iv6.unr = phi i64 [ 0, %.lr.ph4 ], [ %indvars.iv.next7.7, %16 ]
  %lcmp.mod9 = icmp eq i32 %xtraiter8, 0
  br i1 %lcmp.mod9, label %._crit_edge5, label %.epil.preheader

.epil.preheader:                                  ; preds = %._crit_edge5.loopexit.unr-lcssa
  br label %21

; <label>:21:                                     ; preds = %21, %.epil.preheader
  %indvars.iv6.epil = phi i64 [ %indvars.iv6.unr, %.epil.preheader ], [ %indvars.iv.next7.epil, %21 ]
  %epil.iter = phi i32 [ %xtraiter8, %.epil.preheader ], [ %epil.iter.sub, %21 ]
  %22 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv6.epil
  store i32 %9, i32* %22, align 4
  %indvars.iv.next7.epil = add nuw nsw i64 %indvars.iv6.epil, 1
  %epil.iter.sub = add i32 %epil.iter, -1
  %epil.iter.cmp = icmp eq i32 %epil.iter.sub, 0
  br i1 %epil.iter.cmp, label %._crit_edge5, label %21, !llvm.loop !2

._crit_edge5:                                     ; preds = %21, %._crit_edge5.loopexit.unr-lcssa, %2
  %.0.lcssa = phi i32 [ 0, %2 ], [ %1, %._crit_edge5.loopexit.unr-lcssa ], [ %1, %21 ]
  %23 = icmp eq i32 %3, %.0.lcssa
  br i1 %23, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %._crit_edge5
  %24 = zext i32 %.0.lcssa to i64
  %25 = zext i32 %3 to i64
  %26 = sub i32 %3, %.0.lcssa
  %27 = add i32 %3, -1
  %28 = sub i32 %27, %.0.lcssa
  %xtraiter = and i32 %26, 7
  %lcmp.mod = icmp eq i32 %xtraiter, 0
  br i1 %lcmp.mod, label %.prol.loopexit, label %.prol.preheader

.prol.preheader:                                  ; preds = %.lr.ph
  br label %29

; <label>:29:                                     ; preds = %29, %.prol.preheader
  %indvars.iv.prol = phi i64 [ %24, %.prol.preheader ], [ %indvars.iv.next.prol, %29 ]
  %prol.iter = phi i32 [ %xtraiter, %.prol.preheader ], [ %prol.iter.sub, %29 ]
  %30 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.prol
  store i32 %0, i32* %30, align 4
  %indvars.iv.next.prol = add nuw nsw i64 %indvars.iv.prol, 1
  %prol.iter.sub = add i32 %prol.iter, -1
  %prol.iter.cmp = icmp eq i32 %prol.iter.sub, 0
  br i1 %prol.iter.cmp, label %.prol.loopexit, label %29, !llvm.loop !4

.prol.loopexit:                                   ; preds = %29, %.lr.ph
  %indvars.iv.unr = phi i64 [ %24, %.lr.ph ], [ %indvars.iv.next.prol, %29 ]
  %31 = icmp ult i32 %28, 7
  br i1 %31, label %._crit_edge, label %.lr.ph.new

.lr.ph.new:                                       ; preds = %.prol.loopexit
  %32 = insertelement <4 x i32> undef, i32 %0, i32 0
  %33 = shufflevector <4 x i32> %32, <4 x i32> undef, <4 x i32> zeroinitializer
  %34 = insertelement <4 x i32> undef, i32 %0, i32 0
  %35 = shufflevector <4 x i32> %34, <4 x i32> undef, <4 x i32> zeroinitializer
  %36 = add nsw i64 %25, -8
  %37 = sub i64 %36, %indvars.iv.unr
  %38 = lshr i64 %37, 3
  %39 = add nuw nsw i64 %38, 1
  %xtraiter12 = and i64 %39, 3
  %lcmp.mod13 = icmp eq i64 %xtraiter12, 0
  br i1 %lcmp.mod13, label %.prol.loopexit11, label %.prol.preheader10

.prol.preheader10:                                ; preds = %.lr.ph.new
  br label %40

; <label>:40:                                     ; preds = %40, %.prol.preheader10
  %indvars.iv.prol14 = phi i64 [ %indvars.iv.unr, %.prol.preheader10 ], [ %indvars.iv.next.7.prol, %40 ]
  %prol.iter15 = phi i64 [ %xtraiter12, %.prol.preheader10 ], [ %prol.iter15.sub, %40 ]
  %41 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.prol14
  %42 = bitcast i32* %41 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %42, align 4
  %indvars.iv.next.3.prol = add nsw i64 %indvars.iv.prol14, 4
  %43 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.3.prol
  %44 = bitcast i32* %43 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %44, align 4
  %indvars.iv.next.7.prol = add nsw i64 %indvars.iv.prol14, 8
  %prol.iter15.sub = add i64 %prol.iter15, -1
  %prol.iter15.cmp = icmp eq i64 %prol.iter15.sub, 0
  br i1 %prol.iter15.cmp, label %.prol.loopexit11, label %40, !llvm.loop !5

.prol.loopexit11:                                 ; preds = %40, %.lr.ph.new
  %indvars.iv.unr16 = phi i64 [ %indvars.iv.unr, %.lr.ph.new ], [ %indvars.iv.next.7.prol, %40 ]
  %45 = icmp ult i64 %37, 24
  br i1 %45, label %._crit_edge, label %.lr.ph.new.new

.lr.ph.new.new:                                   ; preds = %.prol.loopexit11
  br label %46

; <label>:46:                                     ; preds = %46, %.lr.ph.new.new
  %indvars.iv = phi i64 [ %indvars.iv.unr16, %.lr.ph.new.new ], [ %indvars.iv.next.7.3, %46 ]
  %47 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv
  %48 = bitcast i32* %47 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %48, align 4
  %indvars.iv.next.3 = add nsw i64 %indvars.iv, 4
  %49 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.3
  %50 = bitcast i32* %49 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %50, align 4
  %indvars.iv.next.7 = add nsw i64 %indvars.iv, 8
  %51 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.7
  %52 = bitcast i32* %51 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %52, align 4
  %indvars.iv.next.3.1 = add nsw i64 %indvars.iv, 12
  %53 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.3.1
  %54 = bitcast i32* %53 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %54, align 4
  %indvars.iv.next.7.1 = add nsw i64 %indvars.iv, 16
  %55 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.7.1
  %56 = bitcast i32* %55 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %56, align 4
  %indvars.iv.next.3.2 = add nsw i64 %indvars.iv, 20
  %57 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.3.2
  %58 = bitcast i32* %57 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %58, align 4
  %indvars.iv.next.7.2 = add nsw i64 %indvars.iv, 24
  %59 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.7.2
  %60 = bitcast i32* %59 to <4 x i32>*
  store <4 x i32> %33, <4 x i32>* %60, align 4
  %indvars.iv.next.3.3 = add nsw i64 %indvars.iv, 28
  %61 = getelementptr inbounds i32, i32* %7, i64 %indvars.iv.next.3.3
  %62 = bitcast i32* %61 to <4 x i32>*
  store <4 x i32> %35, <4 x i32>* %62, align 4
  %indvars.iv.next.7.3 = add nsw i64 %indvars.iv, 32
  %63 = icmp eq i64 %indvars.iv.next.7.3, %25
  br i1 %63, label %._crit_edge, label %46

._crit_edge:                                      ; preds = %.prol.loopexit11, %46, %.prol.loopexit, %._crit_edge5
  ret i32* %7
}

; Function Attrs: noinline nounwind uwtable
define %struct._list* @make_list(i32* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #0 {
  store i32 1, i32* %1, align 4
  %4 = tail call noalias i8* @malloc(i64 16) #4
  %5 = getelementptr inbounds i8, i8* %4, i64 8
  %6 = bitcast i8* %5 to %struct._list**
  store %struct._list* null, %struct._list** %6, align 8
  %7 = load i32, i32* @nrow, align 4
  %8 = icmp eq i32 %7, 0
  br i1 %8, label %._crit_edge15.thread, label %.lr.ph14

._crit_edge15.thread:                             ; preds = %3
  tail call void @free(i8* %4) #4
  br label %64

.lr.ph14:                                         ; preds = %3
  %9 = bitcast i8* %4 to %struct._list*
  %.pre = load i32, i32* @ncol, align 4
  br label %10

; <label>:10:                                     ; preds = %.lr.ph14, %._crit_edge
  %11 = phi i32 [ %7, %.lr.ph14 ], [ %56, %._crit_edge ]
  %12 = phi i32 [ %.pre, %.lr.ph14 ], [ %57, %._crit_edge ]
  %.012 = phi %struct._list* [ %9, %.lr.ph14 ], [ %.1.lcssa, %._crit_edge ]
  %.0411 = phi i32 [ 0, %.lr.ph14 ], [ %58, %._crit_edge ]
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %10
  br label %14

; <label>:14:                                     ; preds = %.lr.ph, %51
  %.19 = phi %struct._list* [ %.012, %.lr.ph ], [ %.2, %51 ]
  %.018 = phi i32 [ 0, %.lr.ph ], [ %53, %51 ]
  %.157 = phi i32 [ %.0411, %.lr.ph ], [ %.4, %51 ]
  %15 = tail call i32* @make_data(i32 %.157, i32 %.018)
  tail call void @melt_data(i32* %15, i32* %0)
  %16 = tail call i32 @equal_data(i32* %15, i32* %0)
  %17 = icmp eq i32 %16, 0
  br i1 %17, label %18, label %45

; <label>:18:                                     ; preds = %14
  %19 = tail call noalias i8* @malloc(i64 16) #4
  %20 = getelementptr inbounds %struct._list, %struct._list* %.19, i64 0, i32 1
  %21 = bitcast %struct._list** %20 to i8**
  store i8* %19, i8** %21, align 8
  %22 = tail call i32* @copy_data(i32* %15)
  %23 = load %struct._list*, %struct._list** %20, align 8
  %24 = getelementptr inbounds %struct._list, %struct._list* %23, i64 0, i32 0
  store i32* %22, i32** %24, align 8
  %25 = load %struct._list*, %struct._list** %20, align 8
  %26 = getelementptr inbounds %struct._list, %struct._list* %25, i64 0, i32 1
  store %struct._list* null, %struct._list** %26, align 8
  %27 = load %struct._list*, %struct._list** %20, align 8
  %28 = load i32, i32* %1, align 4
  %29 = icmp eq i32 %28, 1
  br i1 %29, label %30, label %32

; <label>:30:                                     ; preds = %18
  %31 = tail call i32 @get_value(i32* %15)
  store i32 %31, i32* %1, align 4
  br label %32

; <label>:32:                                     ; preds = %30, %18
  %33 = phi i32 [ %31, %30 ], [ %28, %18 ]
  %34 = load i32, i32* %2, align 4
  %35 = or i32 %34, %33
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %37, label %51

; <label>:37:                                     ; preds = %32
  %38 = load i32, i32* @ncol, align 4
  %39 = add nsw i32 %38, -1
  %40 = load i32, i32* @nrow, align 4
  %41 = add nsw i32 %40, -1
  %42 = tail call i32 @in_wanted(i32* %15)
  %43 = icmp eq i32 %42, 0
  br i1 %43, label %51, label %44

; <label>:44:                                     ; preds = %37
  store i32 2, i32* %2, align 4
  br label %51

; <label>:45:                                     ; preds = %14
  %46 = icmp eq i32 %.018, 0
  %47 = load i32, i32* @nrow, align 4
  %48 = add nsw i32 %47, -1
  %.3 = select i1 %46, i32 %48, i32 %.157
  %49 = load i32, i32* @ncol, align 4
  %50 = add nsw i32 %49, -1
  br label %51

; <label>:51:                                     ; preds = %32, %37, %44, %45
  %.4 = phi i32 [ %.3, %45 ], [ %.157, %32 ], [ %41, %37 ], [ %41, %44 ]
  %.23 = phi i32 [ %50, %45 ], [ %.018, %32 ], [ %39, %37 ], [ %39, %44 ]
  %.2 = phi %struct._list* [ %.19, %45 ], [ %27, %32 ], [ %27, %37 ], [ %27, %44 ]
  %52 = bitcast i32* %15 to i8*
  tail call void @free(i8* %52) #4
  %53 = add nsw i32 %.23, 1
  %54 = load i32, i32* @ncol, align 4
  %55 = icmp eq i32 %53, %54
  br i1 %55, label %._crit_edge.loopexit, label %14

._crit_edge.loopexit:                             ; preds = %51
  %.pre16 = load i32, i32* @nrow, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %10
  %56 = phi i32 [ %11, %10 ], [ %.pre16, %._crit_edge.loopexit ]
  %57 = phi i32 [ 0, %10 ], [ %53, %._crit_edge.loopexit ]
  %.15.lcssa = phi i32 [ %.0411, %10 ], [ %.4, %._crit_edge.loopexit ]
  %.1.lcssa = phi %struct._list* [ %.012, %10 ], [ %.2, %._crit_edge.loopexit ]
  %58 = add nsw i32 %.15.lcssa, 1
  %59 = icmp eq i32 %58, %56
  br i1 %59, label %._crit_edge15, label %10

._crit_edge15:                                    ; preds = %._crit_edge
  %.pre17 = load %struct._list*, %struct._list** %6, align 8
  tail call void @free(i8* %4) #4
  %60 = icmp eq %struct._list* %.pre17, null
  br i1 %60, label %64, label %61

; <label>:61:                                     ; preds = %._crit_edge15
  %62 = load i32, i32* %1, align 4
  %63 = sub nsw i32 1, %62
  store i32 %63, i32* %1, align 4
  br label %64

; <label>:64:                                     ; preds = %._crit_edge15.thread, %._crit_edge15, %61
  %65 = phi %struct._list* [ null, %._crit_edge15.thread ], [ null, %._crit_edge15 ], [ %.pre17, %61 ]
  ret %struct._list* %65
}

; Function Attrs: noinline nounwind uwtable
define %struct._play* @make_play(i32) local_unnamed_addr #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  %4 = tail call noalias i8* @malloc(i64 32) #4
  store %struct._play* null, %struct._play** @game_tree, align 8
  %5 = tail call i32* @make_data(i32 0, i32 0)
  %6 = load i32, i32* %5, align 4
  %7 = add nsw i32 %6, -1
  store i32 %7, i32* %5, align 4
  %8 = tail call i32 @next_data(i32* %5)
  %9 = icmp eq i32 %8, 0
  br i1 %9, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %1
  %10 = bitcast i8* %4 to %struct._play*
  br label %11

; <label>:11:                                     ; preds = %.lr.ph, %42
  %.04 = phi i32* [ %5, %.lr.ph ], [ %.2, %42 ]
  %.013 = phi %struct._play* [ %10, %.lr.ph ], [ %.12, %42 ]
  %12 = tail call i32 @valid_data(i32* %.04)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %42, label %14

; <label>:14:                                     ; preds = %11
  %15 = tail call noalias i8* @malloc(i64 32) #4
  %16 = getelementptr inbounds %struct._play, %struct._play* %.013, i64 0, i32 3
  %17 = bitcast %struct._play** %16 to i8**
  store i8* %15, i8** %17, align 8
  %18 = load %struct._play*, %struct._play** @game_tree, align 8
  %19 = icmp eq %struct._play* %18, null
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %14
  %21 = ptrtoint i8* %15 to i64
  store i64 %21, i64* bitcast (%struct._play** @game_tree to i64*), align 8
  br label %22

; <label>:22:                                     ; preds = %20, %14
  %23 = tail call i32* @copy_data(i32* %.04)
  %24 = load %struct._play*, %struct._play** %16, align 8
  %25 = getelementptr inbounds %struct._play, %struct._play* %24, i64 0, i32 1
  store i32* %23, i32** %25, align 8
  %26 = call %struct._list* @make_list(i32* %.04, i32* nonnull %3, i32* nonnull %2)
  %27 = load %struct._play*, %struct._play** %16, align 8
  %28 = getelementptr inbounds %struct._play, %struct._play* %27, i64 0, i32 2
  store %struct._list* %26, %struct._list** %28, align 8
  %29 = load i32, i32* %3, align 4
  %30 = load %struct._play*, %struct._play** %16, align 8
  %31 = getelementptr inbounds %struct._play, %struct._play* %30, i64 0, i32 0
  store i32 %29, i32* %31, align 8
  %32 = load %struct._play*, %struct._play** %16, align 8
  %33 = getelementptr inbounds %struct._play, %struct._play* %32, i64 0, i32 3
  store %struct._play* null, %struct._play** %33, align 8
  %34 = load %struct._play*, %struct._play** %16, align 8
  %35 = load i32, i32* %2, align 4
  %36 = icmp eq i32 %35, 2
  br i1 %36, label %37, label %42

; <label>:37:                                     ; preds = %22
  %38 = bitcast i32* %.04 to i8*
  tail call void @free(i8* %38) #4
  %39 = load i32, i32* @nrow, align 4
  %40 = load i32, i32* @ncol, align 4
  %41 = tail call i32* @make_data(i32 %39, i32 %40)
  br label %42

; <label>:42:                                     ; preds = %22, %37, %11
  %.12 = phi %struct._play* [ %.013, %11 ], [ %34, %37 ], [ %34, %22 ]
  %.2 = phi i32* [ %.04, %11 ], [ %41, %37 ], [ %.04, %22 ]
  %43 = tail call i32 @next_data(i32* %.2)
  %44 = icmp eq i32 %43, 0
  br i1 %44, label %._crit_edge.loopexit, label %11

._crit_edge.loopexit:                             ; preds = %42
  %.phi.trans.insert = getelementptr inbounds i8, i8* %4, i64 24
  %.phi.trans.insert5 = bitcast i8* %.phi.trans.insert to %struct._play**
  %.pre = load %struct._play*, %struct._play** %.phi.trans.insert5, align 8
  br label %._crit_edge

._crit_edge:                                      ; preds = %1, %._crit_edge.loopexit
  %45 = phi %struct._play* [ %.pre, %._crit_edge.loopexit ], [ undef, %1 ]
  tail call void @free(i8* %4) #4
  ret %struct._play* %45
}

; Function Attrs: noinline nounwind uwtable
define void @make_wanted(i32* nocapture readonly) local_unnamed_addr #0 {
  %2 = tail call noalias i8* @malloc(i64 16) #4
  %3 = getelementptr inbounds i8, i8* %2, i64 8
  %4 = bitcast i8* %3 to %struct._list**
  store %struct._list* null, %struct._list** %4, align 8
  %5 = load i32, i32* @nrow, align 4
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %._crit_edge14, label %.lr.ph13

.lr.ph13:                                         ; preds = %1
  %7 = bitcast i8* %2 to %struct._list*
  %.pre = load i32, i32* @ncol, align 4
  br label %8

; <label>:8:                                      ; preds = %.lr.ph13, %._crit_edge
  %9 = phi i32 [ %5, %.lr.ph13 ], [ %37, %._crit_edge ]
  %10 = phi i32 [ %.pre, %.lr.ph13 ], [ %38, %._crit_edge ]
  %.011 = phi %struct._list* [ %7, %.lr.ph13 ], [ %.1.lcssa, %._crit_edge ]
  %.0110 = phi i32 [ 0, %.lr.ph13 ], [ %39, %._crit_edge ]
  %11 = icmp eq i32 %10, 0
  br i1 %11, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %8
  br label %12

; <label>:12:                                     ; preds = %.lr.ph, %32
  %.18 = phi %struct._list* [ %.011, %.lr.ph ], [ %.2, %32 ]
  %.127 = phi i32 [ %.0110, %.lr.ph ], [ %.3, %32 ]
  %.046 = phi i32 [ 0, %.lr.ph ], [ %34, %32 ]
  %13 = tail call i32* @make_data(i32 %.127, i32 %.046)
  tail call void @melt_data(i32* %13, i32* %0)
  %14 = tail call i32 @equal_data(i32* %13, i32* %0)
  %15 = icmp eq i32 %14, 0
  br i1 %15, label %16, label %26

; <label>:16:                                     ; preds = %12
  %17 = tail call noalias i8* @malloc(i64 16) #4
  %18 = getelementptr inbounds %struct._list, %struct._list* %.18, i64 0, i32 1
  %19 = bitcast %struct._list** %18 to i8**
  store i8* %17, i8** %19, align 8
  %20 = tail call i32* @copy_data(i32* %13)
  %21 = load %struct._list*, %struct._list** %18, align 8
  %22 = getelementptr inbounds %struct._list, %struct._list* %21, i64 0, i32 0
  store i32* %20, i32** %22, align 8
  %23 = load %struct._list*, %struct._list** %18, align 8
  %24 = getelementptr inbounds %struct._list, %struct._list* %23, i64 0, i32 1
  store %struct._list* null, %struct._list** %24, align 8
  %25 = load %struct._list*, %struct._list** %18, align 8
  br label %32

; <label>:26:                                     ; preds = %12
  %27 = icmp eq i32 %.046, 0
  %28 = load i32, i32* @nrow, align 4
  %29 = add nsw i32 %28, -1
  %.23 = select i1 %27, i32 %29, i32 %.127
  %30 = load i32, i32* @ncol, align 4
  %31 = add nsw i32 %30, -1
  br label %32

; <label>:32:                                     ; preds = %26, %16
  %.15 = phi i32 [ %31, %26 ], [ %.046, %16 ]
  %.3 = phi i32 [ %.23, %26 ], [ %.127, %16 ]
  %.2 = phi %struct._list* [ %.18, %26 ], [ %25, %16 ]
  %33 = bitcast i32* %13 to i8*
  tail call void @free(i8* %33) #4
  %34 = add nsw i32 %.15, 1
  %35 = load i32, i32* @ncol, align 4
  %36 = icmp eq i32 %34, %35
  br i1 %36, label %._crit_edge.loopexit, label %12

._crit_edge.loopexit:                             ; preds = %32
  %.pre15 = load i32, i32* @nrow, align 4
  br label %._crit_edge

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %8
  %37 = phi i32 [ %9, %8 ], [ %.pre15, %._crit_edge.loopexit ]
  %38 = phi i32 [ 0, %8 ], [ %34, %._crit_edge.loopexit ]
  %.12.lcssa = phi i32 [ %.0110, %8 ], [ %.3, %._crit_edge.loopexit ]
  %.1.lcssa = phi %struct._list* [ %.011, %8 ], [ %.2, %._crit_edge.loopexit ]
  %39 = add nsw i32 %.12.lcssa, 1
  %40 = icmp eq i32 %39, %37
  br i1 %40, label %._crit_edge14.loopexit, label %8

._crit_edge14.loopexit:                           ; preds = %._crit_edge
  %.phi.trans.insert = bitcast i8* %3 to i64*
  %.pre16 = load i64, i64* %.phi.trans.insert, align 8
  br label %._crit_edge14

._crit_edge14:                                    ; preds = %1, %._crit_edge14.loopexit
  %41 = phi i64 [ %.pre16, %._crit_edge14.loopexit ], [ 0, %1 ]
  tail call void @free(i8* %2) #4
  store i64 %41, i64* bitcast (%struct._list** @wanted to i64*), align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define noalias i32* @get_good_move(%struct._list* readonly) local_unnamed_addr #0 {
  %2 = icmp eq %struct._list* %0, null
  br i1 %2, label %20, label %3

; <label>:3:                                      ; preds = %1
  %4 = getelementptr inbounds %struct._list, %struct._list* %0, i64 0, i32 1
  %5 = load %struct._list*, %struct._list** %4, align 8
  %6 = icmp eq %struct._list* %5, null
  br i1 %6, label %.critedge, label %.lr.ph

.lr.ph:                                           ; preds = %3
  br label %11

; <label>:7:                                      ; preds = %11
  %8 = getelementptr inbounds %struct._list, %struct._list* %12, i64 0, i32 1
  %9 = load %struct._list*, %struct._list** %8, align 8
  %10 = icmp eq %struct._list* %9, null
  br i1 %10, label %.critedge, label %11

; <label>:11:                                     ; preds = %.lr.ph, %7
  %12 = phi %struct._list* [ %5, %.lr.ph ], [ %9, %7 ]
  %.012 = phi %struct._list* [ %0, %.lr.ph ], [ %12, %7 ]
  %13 = getelementptr inbounds %struct._list, %struct._list* %.012, i64 0, i32 0
  %14 = load i32*, i32** %13, align 8
  %15 = tail call i32 @get_value(i32* %14)
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %.critedge, label %7

.critedge:                                        ; preds = %7, %11, %3
  %.01.lcssa = phi %struct._list* [ %0, %3 ], [ %.012, %11 ], [ %12, %7 ]
  %17 = getelementptr inbounds %struct._list, %struct._list* %.01.lcssa, i64 0, i32 0
  %18 = load i32*, i32** %17, align 8
  %19 = tail call i32* @copy_data(i32* %18)
  br label %20

; <label>:20:                                     ; preds = %1, %.critedge
  %.0 = phi i32* [ %19, %.critedge ], [ null, %1 ]
  ret i32* %.0
}

; Function Attrs: noinline nounwind uwtable
define noalias i32* @get_winning_move(%struct._play* nocapture readonly) local_unnamed_addr #0 {
  br label %2

; <label>:2:                                      ; preds = %2, %1
  %.0 = phi %struct._play* [ %0, %1 ], [ %4, %2 ]
  %3 = getelementptr inbounds %struct._play, %struct._play* %.0, i64 0, i32 3
  %4 = load %struct._play*, %struct._play** %3, align 8
  %5 = icmp eq %struct._play* %4, null
  br i1 %5, label %6, label %2

; <label>:6:                                      ; preds = %2
  %7 = getelementptr inbounds %struct._play, %struct._play* %.0, i64 0, i32 2
  %8 = load %struct._list*, %struct._list** %7, align 8
  %9 = tail call i32* @get_good_move(%struct._list* %8)
  ret i32* %9
}

; Function Attrs: noinline norecurse nounwind readonly uwtable
define %struct._list* @where(i32* nocapture readonly, %struct._play* nocapture readonly) local_unnamed_addr #3 {
  %3 = getelementptr inbounds %struct._play, %struct._play* %1, i64 0, i32 1
  %4 = load i32*, i32** %3, align 8
  %5 = tail call i32 @equal_data(i32* %4, i32* %0)
  %6 = icmp eq i32 %5, 0
  br i1 %6, label %.lr.ph, label %._crit_edge

.lr.ph:                                           ; preds = %2
  br label %7

; <label>:7:                                      ; preds = %.lr.ph, %7
  %.01 = phi %struct._play* [ %1, %.lr.ph ], [ %9, %7 ]
  %8 = getelementptr inbounds %struct._play, %struct._play* %.01, i64 0, i32 3
  %9 = load %struct._play*, %struct._play** %8, align 8
  %10 = getelementptr inbounds %struct._play, %struct._play* %9, i64 0, i32 1
  %11 = load i32*, i32** %10, align 8
  %12 = tail call i32 @equal_data(i32* %11, i32* %0)
  %13 = icmp eq i32 %12, 0
  br i1 %13, label %7, label %._crit_edge

._crit_edge:                                      ; preds = %7, %2
  %.0.lcssa = phi %struct._play* [ %1, %2 ], [ %9, %7 ]
  %14 = getelementptr inbounds %struct._play, %struct._play* %.0.lcssa, i64 0, i32 2
  %15 = load %struct._list*, %struct._list** %14, align 8
  ret %struct._list* %15
}

; Function Attrs: noinline norecurse nounwind uwtable
define void @get_real_move(i32* nocapture readonly, i32* nocapture readonly, i32* nocapture, i32* nocapture) local_unnamed_addr #2 {
  br label %5

; <label>:5:                                      ; preds = %5, %4
  %indvars.iv = phi i64 [ %indvars.iv.next, %5 ], [ 0, %4 ]
  %6 = trunc i64 %indvars.iv to i32
  store i32 %6, i32* %3, align 4
  %7 = getelementptr inbounds i32, i32* %0, i64 %indvars.iv
  %8 = load i32, i32* %7, align 4
  %9 = getelementptr inbounds i32, i32* %1, i64 %indvars.iv
  %10 = load i32, i32* %9, align 4
  %11 = icmp eq i32 %8, %10
  %indvars.iv.next = add nuw i64 %indvars.iv, 1
  br i1 %11, label %5, label %12

; <label>:12:                                     ; preds = %5
  store i32 %8, i32* %2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %puts = tail call i32 @puts(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @str.3, i64 0, i64 0))
  %puts3 = tail call i32 @puts(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @str.4, i64 0, i64 0))
  %puts4 = tail call i32 @puts(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @str.5, i64 0, i64 0))
  %3 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.8, i64 0, i64 0))
  store i32 2, i32* %1, align 4
  %4 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13, i64 0, i64 0))
  store i32 7, i32* @ncol, align 4
  %5 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.14, i64 0, i64 0))
  store i32 8, i32* @nrow, align 4
  %6 = tail call %struct._play* @make_play(i32 1)
  %7 = load i32, i32* @nrow, align 4
  %8 = load i32, i32* @ncol, align 4
  %9 = tail call i32* @make_data(i32 %7, i32 %8)
  %10 = icmp eq i32* %9, null
  br i1 %10, label %._crit_edge, label %.lr.ph

.lr.ph:                                           ; preds = %0
  %11 = tail call %struct._list* @where(i32* nonnull %9, %struct._play* %6)
  %12 = tail call i32* @get_good_move(%struct._list* %11)
  %13 = icmp eq i32* %12, null
  br i1 %13, label %._crit_edge, label %.lr.ph11

.lr.ph11:                                         ; preds = %.lr.ph
  br label %14

; <label>:14:                                     ; preds = %.lr.ph11, %14
  %15 = phi i32* [ %12, %.lr.ph11 ], [ %22, %14 ]
  %.02610 = phi i32* [ %9, %.lr.ph11 ], [ %15, %14 ]
  %.0179 = phi i32 [ 0, %.lr.ph11 ], [ %19, %14 ]
  call void @get_real_move(i32* nonnull %15, i32* nonnull %.02610, i32* nonnull %1, i32* nonnull %2)
  %16 = load i32, i32* %1, align 4
  %17 = load i32, i32* %2, align 4
  %18 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.15, i64 0, i64 0), i32 %.0179, i32 %16, i32 %17)
  %19 = sub nsw i32 1, %.0179
  %20 = bitcast i32* %.02610 to i8*
  tail call void @free(i8* %20) #4
  %21 = tail call %struct._list* @where(i32* nonnull %15, %struct._play* %6)
  %22 = tail call i32* @get_good_move(%struct._list* %21)
  %23 = icmp eq i32* %22, null
  br i1 %23, label %._crit_edge, label %14

._crit_edge:                                      ; preds = %14, %.lr.ph, %0
  %.01.lcssa = phi i32 [ 1, %0 ], [ 1, %.lr.ph ], [ %.0179, %14 ]
  tail call void @dump_play(%struct._play* %6)
  %24 = tail call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.16, i64 0, i64 0), i32 %.01.lcssa)
  ret i32 0
}

; Function Attrs: nounwind
declare i32 @puts(i8* nocapture readonly) local_unnamed_addr #4

; Function Attrs: argmemonly nounwind
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i32, i1) #5

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { noinline norecurse nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noinline norecurse nounwind readonly uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }
attributes #5 = { argmemonly nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1}

!0 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = distinct !{!2, !3}
!3 = !{!"llvm.loop.unroll.disable"}
!4 = distinct !{!4, !3}
!5 = distinct !{!5, !3}
