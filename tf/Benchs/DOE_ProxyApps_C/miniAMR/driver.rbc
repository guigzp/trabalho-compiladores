; ModuleID = 'driver.bc'
source_filename = "driver.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.block = type { i32, i32, i32, i32, i32, i32, i32, [6 x i32], [6 x i32], [6 x [2 x [2 x i32]]], [3 x i32], double**** }
%struct.parent = type { i32, i32, i32, i32, i32, i32, [8 x i32], [8 x i32], [3 x i32] }
%struct.sorted_block = type { i32, i32 }
%struct.object = type { i32, i32, [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double] }

@counter_malloc = common global i32 0, align 4
@counter_malloc_init = common global i32 0, align 4
@size_malloc = common global double 0.000000e+00, align 8
@size_malloc_init = common global double 0.000000e+00, align 8
@num_refine = common global i32 0, align 4
@uniform_refine = common global i32 0, align 4
@timer_refine_all = common global double 0.000000e+00, align 8
@plot_freq = common global i32 0, align 4
@timer_plot = common global double 0.000000e+00, align 8
@global_active = common global i32 0, align 4
@nb_max = common global i32 0, align 4
@nb_min = common global i32 0, align 4
@num_tsteps = common global i32 0, align 4
@stages_per_ts = common global i32 0, align 4
@total_blocks = common global i64 0, align 8
@num_vars = common global i32 0, align 4
@comm_vars = common global i32 0, align 4
@timer_comm_all = common global double 0.000000e+00, align 8
@timer_calc_all = common global double 0.000000e+00, align 8
@checksum_freq = common global i32 0, align 4
@report_diffusion = common global i32 0, align 4
@my_pe = common global i32 0, align 4
@.str = private unnamed_addr constant [44 x i8] c"%d var %d sum %lf old %lf diff %lf tol %lf\0A\00", align 1
@grid_sum = common global double* null, align 8
@tol = common global double 0.000000e+00, align 8
@.str.1 = private unnamed_addr constant [65 x i8] c"Time step %d sum %lf (old %lf) variable %d difference too large\0A\00", align 1
@timer_cs_all = common global double 0.000000e+00, align 8
@refine_freq = common global i32 0, align 4
@timer_all = common global double 0.000000e+00, align 8
@blocks = common global %struct.block* null, align 8
@parents = common global %struct.parent* null, align 8
@sorted_list = common global %struct.sorted_block* null, align 8
@sorted_index = common global i32* null, align 8
@num_pes = common global i32 0, align 4
@max_num_blocks = common global i32 0, align 4
@target_active = common global i32 0, align 4
@target_max = common global i32 0, align 4
@target_min = common global i32 0, align 4
@x_block_size = common global i32 0, align 4
@y_block_size = common global i32 0, align 4
@z_block_size = common global i32 0, align 4
@init_block_x = common global i32 0, align 4
@init_block_y = common global i32 0, align 4
@init_block_z = common global i32 0, align 4
@reorder = common global i32 0, align 4
@npx = common global i32 0, align 4
@npy = common global i32 0, align 4
@npz = common global i32 0, align 4
@inbalance = common global i32 0, align 4
@error_tol = common global i32 0, align 4
@stencil = common global i32 0, align 4
@report_perf = common global i32 0, align 4
@lb_opt = common global i32 0, align 4
@block_change = common global i32 0, align 4
@code = common global i32 0, align 4
@permute = common global i32 0, align 4
@nonblocking = common global i32 0, align 4
@refine_ghost = common global i32 0, align 4
@max_num_parents = common global i32 0, align 4
@num_parents = common global i32 0, align 4
@max_active_parent = common global i32 0, align 4
@cur_max_level = common global i32 0, align 4
@num_blocks = common global i32* null, align 8
@block_start = common global i32* null, align 8
@num_active = common global i32 0, align 4
@max_active_block = common global i32 0, align 4
@x_block_half = common global i32 0, align 4
@y_block_half = common global i32 0, align 4
@z_block_half = common global i32 0, align 4
@p8 = common global i32* null, align 8
@p2 = common global i32* null, align 8
@mesh_size = common global [3 x i32] zeroinitializer, align 4
@max_mesh_size = common global i32 0, align 4
@from = common global i32* null, align 8
@to = common global i32* null, align 8
@msg_len = common global [3 x [4 x i32]] zeroinitializer, align 16
@local_max_b = common global i32 0, align 4
@global_max_b = common global i32 0, align 4
@num_objects = common global i32 0, align 4
@objects = common global %struct.object* null, align 8
@average = common global [128 x double] zeroinitializer, align 16
@stddev = common global [128 x double] zeroinitializer, align 16
@minimum = common global [128 x double] zeroinitializer, align 16
@maximum = common global [128 x double] zeroinitializer, align 16
@timer_comm_dir = common global [3 x double] zeroinitializer, align 16
@timer_comm_same = common global [3 x double] zeroinitializer, align 16
@timer_comm_diff = common global [3 x double] zeroinitializer, align 16
@timer_comm_bc = common global [3 x double] zeroinitializer, align 16
@timer_cs_calc = common global double 0.000000e+00, align 8
@timer_refine_co = common global double 0.000000e+00, align 8
@timer_refine_mr = common global double 0.000000e+00, align 8
@timer_refine_sb = common global double 0.000000e+00, align 8
@timer_refine_cc = common global double 0.000000e+00, align 8
@timer_cb_all = common global double 0.000000e+00, align 8
@timer_target_all = common global double 0.000000e+00, align 8
@timer_target_rb = common global double 0.000000e+00, align 8
@timer_target_dc = common global double 0.000000e+00, align 8
@timer_target_cb = common global double 0.000000e+00, align 8
@timer_target_ab = common global double 0.000000e+00, align 8
@timer_target_da = common global double 0.000000e+00, align 8
@timer_target_sb = common global double 0.000000e+00, align 8
@nrs = common global i32 0, align 4
@nps = common global i32 0, align 4
@num_refined = common global i32 0, align 4
@num_reformed = common global i32 0, align 4
@counter_bc = common global [3 x i32] zeroinitializer, align 4
@counter_same = common global [3 x i32] zeroinitializer, align 4
@counter_diff = common global [3 x i32] zeroinitializer, align 4
@total_red = common global i32 0, align 4

; Function Attrs: noinline nounwind uwtable
define void @driver() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca double, align 8
  %10 = alloca double, align 8
  %11 = alloca double, align 8
  call void @init()
  call void @init_profile()
  %12 = load i32, i32* @counter_malloc, align 4
  store i32 %12, i32* @counter_malloc_init, align 4
  %13 = load double, double* @size_malloc, align 8
  store double %13, double* @size_malloc_init, align 8
  %14 = call double @timer()
  store double %14, double* %7, align 8
  %15 = load i32, i32* @num_refine, align 4
  %16 = icmp ne i32 %15, 0
  br i1 %16, label %20, label %17

; <label>:17:                                     ; preds = %0
  %18 = load i32, i32* @uniform_refine, align 4
  %19 = icmp ne i32 %18, 0
  br i1 %19, label %20, label %21

; <label>:20:                                     ; preds = %17, %0
  call void @refine(i32 0)
  br label %21

; <label>:21:                                     ; preds = %20, %17
  %22 = call double @timer()
  store double %22, double* %8, align 8
  %23 = load double, double* %8, align 8
  %24 = load double, double* %7, align 8
  %25 = fsub double %23, %24
  %26 = load double, double* @timer_refine_all, align 8
  %27 = fadd double %26, %25
  store double %27, double* @timer_refine_all, align 8
  %28 = load i32, i32* @plot_freq, align 4
  %29 = icmp ne i32 %28, 0
  br i1 %29, label %30, label %31

; <label>:30:                                     ; preds = %21
  call void @plot(i32 0)
  br label %31

; <label>:31:                                     ; preds = %30, %21
  %32 = call double @timer()
  store double %32, double* %9, align 8
  %33 = load double, double* %9, align 8
  %34 = load double, double* %8, align 8
  %35 = fsub double %33, %34
  %36 = load double, double* @timer_plot, align 8
  %37 = fadd double %36, %35
  store double %37, double* @timer_plot, align 8
  %38 = load i32, i32* @global_active, align 4
  store i32 %38, i32* @nb_max, align 4
  store i32 %38, i32* @nb_min, align 4
  store i32 0, i32* %6, align 4
  store i32 1, i32* %1, align 4
  br label %39

; <label>:39:                                     ; preds = %242, %31
  %40 = load i32, i32* %1, align 4
  %41 = load i32, i32* @num_tsteps, align 4
  %42 = icmp sle i32 %40, %41
  br i1 %42, label %43, label %245

; <label>:43:                                     ; preds = %39
  store i32 0, i32* %5, align 4
  br label %44

; <label>:44:                                     ; preds = %200, %43
  %45 = load i32, i32* %5, align 4
  %46 = load i32, i32* @stages_per_ts, align 4
  %47 = icmp slt i32 %45, %46
  br i1 %47, label %48, label %205

; <label>:48:                                     ; preds = %44
  %49 = load i32, i32* @global_active, align 4
  %50 = sext i32 %49 to i64
  %51 = load i64, i64* @total_blocks, align 8
  %52 = add nsw i64 %51, %50
  store i64 %52, i64* @total_blocks, align 8
  %53 = load i32, i32* @global_active, align 4
  %54 = load i32, i32* @nb_min, align 4
  %55 = icmp slt i32 %53, %54
  br i1 %55, label %56, label %58

; <label>:56:                                     ; preds = %48
  %57 = load i32, i32* @global_active, align 4
  store i32 %57, i32* @nb_min, align 4
  br label %58

; <label>:58:                                     ; preds = %56, %48
  %59 = load i32, i32* @global_active, align 4
  %60 = load i32, i32* @nb_max, align 4
  %61 = icmp sgt i32 %59, %60
  br i1 %61, label %62, label %64

; <label>:62:                                     ; preds = %58
  %63 = load i32, i32* @global_active, align 4
  store i32 %63, i32* @nb_max, align 4
  br label %64

; <label>:64:                                     ; preds = %62, %58
  store i32 0, i32* %3, align 4
  br label %65

; <label>:65:                                     ; preds = %195, %64
  %66 = load i32, i32* %3, align 4
  %67 = load i32, i32* @num_vars, align 4
  %68 = icmp slt i32 %66, %67
  br i1 %68, label %69, label %199

; <label>:69:                                     ; preds = %65
  %70 = load i32, i32* %3, align 4
  %71 = load i32, i32* @comm_vars, align 4
  %72 = add nsw i32 %70, %71
  %73 = load i32, i32* @num_vars, align 4
  %74 = icmp sgt i32 %72, %73
  br i1 %74, label %75, label %79

; <label>:75:                                     ; preds = %69
  %76 = load i32, i32* @num_vars, align 4
  %77 = load i32, i32* %3, align 4
  %78 = sub nsw i32 %76, %77
  store i32 %78, i32* %4, align 4
  br label %81

; <label>:79:                                     ; preds = %69
  %80 = load i32, i32* @comm_vars, align 4
  store i32 %80, i32* %4, align 4
  br label %81

; <label>:81:                                     ; preds = %79, %75
  %82 = call double @timer()
  store double %82, double* %9, align 8
  %83 = load i32, i32* %3, align 4
  %84 = load i32, i32* %4, align 4
  %85 = load i32, i32* %6, align 4
  call void @comm(i32 %83, i32 %84, i32 %85)
  %86 = call double @timer()
  store double %86, double* %10, align 8
  %87 = load double, double* %10, align 8
  %88 = load double, double* %9, align 8
  %89 = fsub double %87, %88
  %90 = load double, double* @timer_comm_all, align 8
  %91 = fadd double %90, %89
  store double %91, double* @timer_comm_all, align 8
  %92 = load i32, i32* %3, align 4
  store i32 %92, i32* %2, align 4
  br label %93

; <label>:93:                                     ; preds = %191, %81
  %94 = load i32, i32* %2, align 4
  %95 = load i32, i32* %3, align 4
  %96 = load i32, i32* %4, align 4
  %97 = add nsw i32 %95, %96
  %98 = icmp slt i32 %94, %97
  br i1 %98, label %99, label %194

; <label>:99:                                     ; preds = %93
  %100 = load i32, i32* %2, align 4
  call void @stencil_calc(i32 %100)
  %101 = call double @timer()
  store double %101, double* %9, align 8
  %102 = load double, double* %9, align 8
  %103 = load double, double* %10, align 8
  %104 = fsub double %102, %103
  %105 = load double, double* @timer_calc_all, align 8
  %106 = fadd double %105, %104
  store double %106, double* @timer_calc_all, align 8
  %107 = load i32, i32* @checksum_freq, align 4
  %108 = icmp ne i32 %107, 0
  br i1 %108, label %109, label %184

; <label>:109:                                    ; preds = %99
  %110 = load i32, i32* %5, align 4
  %111 = load i32, i32* @checksum_freq, align 4
  %112 = srem i32 %110, %111
  %113 = icmp ne i32 %112, 0
  br i1 %113, label %184, label %114

; <label>:114:                                    ; preds = %109
  %115 = load i32, i32* %2, align 4
  %116 = call double @check_sum(i32 %115)
  store double %116, double* %11, align 8
  %117 = load i32, i32* @report_diffusion, align 4
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %119, label %147

; <label>:119:                                    ; preds = %114
  %120 = load i32, i32* @my_pe, align 4
  %121 = icmp ne i32 %120, 0
  br i1 %121, label %147, label %122

; <label>:122:                                    ; preds = %119
  %123 = load i32, i32* %1, align 4
  %124 = load i32, i32* %2, align 4
  %125 = load double, double* %11, align 8
  %126 = load double*, double** @grid_sum, align 8
  %127 = load i32, i32* %2, align 4
  %128 = sext i32 %127 to i64
  %129 = getelementptr inbounds double, double* %126, i64 %128
  %130 = load double, double* %129, align 8
  %131 = load double, double* %11, align 8
  %132 = load double*, double** @grid_sum, align 8
  %133 = load i32, i32* %2, align 4
  %134 = sext i32 %133 to i64
  %135 = getelementptr inbounds double, double* %132, i64 %134
  %136 = load double, double* %135, align 8
  %137 = fsub double %131, %136
  %138 = call double @llvm.fabs.f64(double %137)
  %139 = load double*, double** @grid_sum, align 8
  %140 = load i32, i32* %2, align 4
  %141 = sext i32 %140 to i64
  %142 = getelementptr inbounds double, double* %139, i64 %141
  %143 = load double, double* %142, align 8
  %144 = fdiv double %138, %143
  %145 = load double, double* @tol, align 8
  %146 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str, i32 0, i32 0), i32 %123, i32 %124, double %125, double %130, double %144, double %145)
  br label %147

; <label>:147:                                    ; preds = %122, %119, %114
  %148 = load double, double* %11, align 8
  %149 = load double*, double** @grid_sum, align 8
  %150 = load i32, i32* %2, align 4
  %151 = sext i32 %150 to i64
  %152 = getelementptr inbounds double, double* %149, i64 %151
  %153 = load double, double* %152, align 8
  %154 = fsub double %148, %153
  %155 = call double @llvm.fabs.f64(double %154)
  %156 = load double*, double** @grid_sum, align 8
  %157 = load i32, i32* %2, align 4
  %158 = sext i32 %157 to i64
  %159 = getelementptr inbounds double, double* %156, i64 %158
  %160 = load double, double* %159, align 8
  %161 = fdiv double %155, %160
  %162 = load double, double* @tol, align 8
  %163 = fcmp ogt double %161, %162
  br i1 %163, label %164, label %178

; <label>:164:                                    ; preds = %147
  %165 = load i32, i32* @my_pe, align 4
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %177, label %167

; <label>:167:                                    ; preds = %164
  %168 = load i32, i32* %1, align 4
  %169 = load double, double* %11, align 8
  %170 = load double*, double** @grid_sum, align 8
  %171 = load i32, i32* %2, align 4
  %172 = sext i32 %171 to i64
  %173 = getelementptr inbounds double, double* %170, i64 %172
  %174 = load double, double* %173, align 8
  %175 = load i32, i32* %2, align 4
  %176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.1, i32 0, i32 0), i32 %168, double %169, double %174, i32 %175)
  br label %177

; <label>:177:                                    ; preds = %167, %164
  br label %249

; <label>:178:                                    ; preds = %147
  %179 = load double, double* %11, align 8
  %180 = load double*, double** @grid_sum, align 8
  %181 = load i32, i32* %2, align 4
  %182 = sext i32 %181 to i64
  %183 = getelementptr inbounds double, double* %180, i64 %182
  store double %179, double* %183, align 8
  br label %184

; <label>:184:                                    ; preds = %178, %109, %99
  %185 = call double @timer()
  store double %185, double* %10, align 8
  %186 = load double, double* %10, align 8
  %187 = load double, double* %9, align 8
  %188 = fsub double %186, %187
  %189 = load double, double* @timer_cs_all, align 8
  %190 = fadd double %189, %188
  store double %190, double* @timer_cs_all, align 8
  br label %191

; <label>:191:                                    ; preds = %184
  %192 = load i32, i32* %2, align 4
  %193 = add nsw i32 %192, 1
  store i32 %193, i32* %2, align 4
  br label %93

; <label>:194:                                    ; preds = %93
  br label %195

; <label>:195:                                    ; preds = %194
  %196 = load i32, i32* @comm_vars, align 4
  %197 = load i32, i32* %3, align 4
  %198 = add nsw i32 %197, %196
  store i32 %198, i32* %3, align 4
  br label %65

; <label>:199:                                    ; preds = %65
  br label %200

; <label>:200:                                    ; preds = %199
  %201 = load i32, i32* %5, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %5, align 4
  %203 = load i32, i32* %6, align 4
  %204 = add nsw i32 %203, 1
  store i32 %204, i32* %6, align 4
  br label %44

; <label>:205:                                    ; preds = %44
  %206 = load i32, i32* @num_refine, align 4
  %207 = icmp ne i32 %206, 0
  br i1 %207, label %208, label %219

; <label>:208:                                    ; preds = %205
  %209 = load i32, i32* @uniform_refine, align 4
  %210 = icmp ne i32 %209, 0
  br i1 %210, label %219, label %211

; <label>:211:                                    ; preds = %208
  call void @move()
  %212 = load i32, i32* %1, align 4
  %213 = load i32, i32* @refine_freq, align 4
  %214 = srem i32 %212, %213
  %215 = icmp ne i32 %214, 0
  br i1 %215, label %218, label %216

; <label>:216:                                    ; preds = %211
  %217 = load i32, i32* %1, align 4
  call void @refine(i32 %217)
  br label %218

; <label>:218:                                    ; preds = %216, %211
  br label %219

; <label>:219:                                    ; preds = %218, %208, %205
  %220 = call double @timer()
  store double %220, double* %8, align 8
  %221 = load double, double* %8, align 8
  %222 = load double, double* %10, align 8
  %223 = fsub double %221, %222
  %224 = load double, double* @timer_refine_all, align 8
  %225 = fadd double %224, %223
  store double %225, double* @timer_refine_all, align 8
  %226 = call double @timer()
  store double %226, double* %9, align 8
  %227 = load i32, i32* @plot_freq, align 4
  %228 = icmp ne i32 %227, 0
  br i1 %228, label %229, label %236

; <label>:229:                                    ; preds = %219
  %230 = load i32, i32* %1, align 4
  %231 = load i32, i32* @plot_freq, align 4
  %232 = srem i32 %230, %231
  %233 = icmp ne i32 %232, 0
  br i1 %233, label %236, label %234

; <label>:234:                                    ; preds = %229
  %235 = load i32, i32* %1, align 4
  call void @plot(i32 %235)
  br label %236

; <label>:236:                                    ; preds = %234, %229, %219
  %237 = call double @timer()
  %238 = load double, double* %9, align 8
  %239 = fsub double %237, %238
  %240 = load double, double* @timer_plot, align 8
  %241 = fadd double %240, %239
  store double %241, double* @timer_plot, align 8
  br label %242

; <label>:242:                                    ; preds = %236
  %243 = load i32, i32* %1, align 4
  %244 = add nsw i32 %243, 1
  store i32 %244, i32* %1, align 4
  br label %39

; <label>:245:                                    ; preds = %39
  %246 = call double @timer()
  %247 = load double, double* %7, align 8
  %248 = fsub double %246, %247
  store double %248, double* @timer_all, align 8
  br label %249

; <label>:249:                                    ; preds = %245, %177
  ret void
}

declare void @init() #1

declare void @init_profile() #1

declare double @timer() #1

declare void @refine(i32) #1

declare void @plot(i32) #1

declare void @comm(i32, i32, i32) #1

declare void @stencil_calc(i32) #1

declare double @check_sum(i32) #1

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.fabs.f64(double) #2

declare void @move() #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
