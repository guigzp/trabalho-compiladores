; ModuleID = 'plot.c'
source_filename = "plot.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.block = type { i32, i32, i32, i32, i32, i32, i32, [6 x i32], [6 x i32], [6 x [2 x [2 x i32]]], [3 x i32], double**** }
%struct.parent = type { i32, i32, i32, i32, i32, i32, [8 x i32], [8 x i32], [3 x i32] }
%struct.sorted_block = type { i32, i32 }
%struct.object = type { i32, i32, [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double] }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, i8*, i8*, i8*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type { %struct._IO_marker*, %struct._IO_FILE*, i32 }

@num_tsteps = common global i32 0, align 4
@.str = private unnamed_addr constant [2 x i8] c"w\00", align 1
@num_refine = common global i32 0, align 4
@num_blocks = common global i32* null, align 8
@.str.1 = private unnamed_addr constant [16 x i8] c"%d %d %d %d %d\0A\00", align 1
@npx = common global i32 0, align 4
@init_block_x = common global i32 0, align 4
@npy = common global i32 0, align 4
@init_block_y = common global i32 0, align 4
@npz = common global i32 0, align 4
@init_block_z = common global i32 0, align 4
@.str.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@num_active = common global i32 0, align 4
@max_active_block = common global i32 0, align 4
@blocks = common global %struct.block* null, align 8
@.str.3 = private unnamed_addr constant [13 x i8] c"%d %d %d %d\0A\00", align 1
@parents = common global %struct.parent* null, align 8
@sorted_list = common global %struct.sorted_block* null, align 8
@sorted_index = common global i32* null, align 8
@my_pe = common global i32 0, align 4
@num_pes = common global i32 0, align 4
@max_num_blocks = common global i32 0, align 4
@target_active = common global i32 0, align 4
@target_max = common global i32 0, align 4
@target_min = common global i32 0, align 4
@uniform_refine = common global i32 0, align 4
@x_block_size = common global i32 0, align 4
@y_block_size = common global i32 0, align 4
@z_block_size = common global i32 0, align 4
@num_vars = common global i32 0, align 4
@comm_vars = common global i32 0, align 4
@reorder = common global i32 0, align 4
@inbalance = common global i32 0, align 4
@refine_freq = common global i32 0, align 4
@report_diffusion = common global i32 0, align 4
@checksum_freq = common global i32 0, align 4
@stages_per_ts = common global i32 0, align 4
@error_tol = common global i32 0, align 4
@stencil = common global i32 0, align 4
@report_perf = common global i32 0, align 4
@plot_freq = common global i32 0, align 4
@lb_opt = common global i32 0, align 4
@block_change = common global i32 0, align 4
@code = common global i32 0, align 4
@permute = common global i32 0, align 4
@nonblocking = common global i32 0, align 4
@refine_ghost = common global i32 0, align 4
@max_num_parents = common global i32 0, align 4
@num_parents = common global i32 0, align 4
@max_active_parent = common global i32 0, align 4
@cur_max_level = common global i32 0, align 4
@block_start = common global i32* null, align 8
@global_active = common global i32 0, align 4
@x_block_half = common global i32 0, align 4
@y_block_half = common global i32 0, align 4
@z_block_half = common global i32 0, align 4
@tol = common global double 0.000000e+00, align 8
@grid_sum = common global double* null, align 8
@p8 = common global i32* null, align 8
@p2 = common global i32* null, align 8
@mesh_size = common global [3 x i32] zeroinitializer, align 4
@max_mesh_size = common global i32 0, align 4
@from = common global i32* null, align 8
@to = common global i32* null, align 8
@msg_len = common global [3 x [4 x i32]] zeroinitializer, align 16
@local_max_b = common global i32 0, align 4
@global_max_b = common global i32 0, align 4
@num_objects = common global i32 0, align 4
@objects = common global %struct.object* null, align 8

; Function Attrs: noinline nounwind uwtable
define void @plot(i32) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32*, align 8
  %8 = alloca i32, align 4
  %9 = alloca i32, align 4
  %10 = alloca [20 x i8], align 16
  %11 = alloca %struct.block*, align 8
  %12 = alloca %struct._IO_FILE*, align 8
  store i32 %0, i32* %2, align 4
  %13 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 0
  store i8 112, i8* %13, align 16
  %14 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 1
  store i8 108, i8* %14, align 1
  %15 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 2
  store i8 111, i8* %15, align 2
  %16 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 3
  store i8 116, i8* %16, align 1
  %17 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 4
  store i8 46, i8* %17, align 4
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %18

; <label>:18:                                     ; preds = %23, %1
  %19 = load i32, i32* %5, align 4
  %20 = load i32, i32* @num_tsteps, align 4
  %21 = icmp slt i32 %19, %20
  br i1 %21, label %22, label %28

; <label>:22:                                     ; preds = %18
  br label %23

; <label>:23:                                     ; preds = %22
  %24 = load i32, i32* %4, align 4
  %25 = add nsw i32 %24, 1
  store i32 %25, i32* %4, align 4
  %26 = load i32, i32* %5, align 4
  %27 = mul nsw i32 %26, 10
  store i32 %27, i32* %5, align 4
  br label %18

; <label>:28:                                     ; preds = %18
  store i32 1, i32* %5, align 4
  store i32 0, i32* %3, align 4
  br label %29

; <label>:29:                                     ; preds = %46, %28
  %30 = load i32, i32* %3, align 4
  %31 = load i32, i32* %4, align 4
  %32 = icmp sle i32 %30, %31
  br i1 %32, label %33, label %51

; <label>:33:                                     ; preds = %29
  %34 = load i32, i32* %2, align 4
  %35 = load i32, i32* %5, align 4
  %36 = sdiv i32 %34, %35
  %37 = srem i32 %36, 10
  %38 = add nsw i32 48, %37
  %39 = trunc i32 %38 to i8
  %40 = load i32, i32* %4, align 4
  %41 = add nsw i32 5, %40
  %42 = load i32, i32* %3, align 4
  %43 = sub nsw i32 %41, %42
  %44 = sext i32 %43 to i64
  %45 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 %44
  store i8 %39, i8* %45, align 1
  br label %46

; <label>:46:                                     ; preds = %33
  %47 = load i32, i32* %3, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %3, align 4
  %49 = load i32, i32* %5, align 4
  %50 = mul nsw i32 %49, 10
  store i32 %50, i32* %5, align 4
  br label %29

; <label>:51:                                     ; preds = %29
  %52 = load i32, i32* %4, align 4
  %53 = add nsw i32 6, %52
  %54 = sext i32 %53 to i64
  %55 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i64 0, i64 %54
  store i8 0, i8* %55, align 1
  %56 = getelementptr inbounds [20 x i8], [20 x i8]* %10, i32 0, i32 0
  %57 = call %struct._IO_FILE* @fopen(i8* %56, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i32 0, i32 0))
  store %struct._IO_FILE* %57, %struct._IO_FILE** %12, align 8
  store i32 0, i32* %6, align 4
  store i32 0, i32* %3, align 4
  br label %58

; <label>:58:                                     ; preds = %70, %51
  %59 = load i32, i32* %3, align 4
  %60 = load i32, i32* @num_refine, align 4
  %61 = icmp sle i32 %59, %60
  br i1 %61, label %62, label %73

; <label>:62:                                     ; preds = %58
  %63 = load i32*, i32** @num_blocks, align 8
  %64 = load i32, i32* %3, align 4
  %65 = sext i32 %64 to i64
  %66 = getelementptr inbounds i32, i32* %63, i64 %65
  %67 = load i32, i32* %66, align 4
  %68 = load i32, i32* %6, align 4
  %69 = add nsw i32 %68, %67
  store i32 %69, i32* %6, align 4
  br label %70

; <label>:70:                                     ; preds = %62
  %71 = load i32, i32* %3, align 4
  %72 = add nsw i32 %71, 1
  store i32 %72, i32* %3, align 4
  br label %58

; <label>:73:                                     ; preds = %58
  %74 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %75 = load i32, i32* %6, align 4
  %76 = load i32, i32* @num_refine, align 4
  %77 = load i32, i32* @npx, align 4
  %78 = load i32, i32* @init_block_x, align 4
  %79 = mul nsw i32 %77, %78
  %80 = load i32, i32* @npy, align 4
  %81 = load i32, i32* @init_block_y, align 4
  %82 = mul nsw i32 %80, %81
  %83 = load i32, i32* @npz, align 4
  %84 = load i32, i32* @init_block_z, align 4
  %85 = mul nsw i32 %83, %84
  %86 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %74, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0), i32 %75, i32 %76, i32 %79, i32 %82, i32 %85)
  store i32 0, i32* %8, align 4
  %87 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %88 = load i32, i32* @num_active, align 4
  %89 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %87, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.2, i32 0, i32 0), i32 %88)
  store i32 0, i32* %5, align 4
  br label %90

; <label>:90:                                     ; preds = %121, %73
  %91 = load i32, i32* %5, align 4
  %92 = load i32, i32* @max_active_block, align 4
  %93 = icmp slt i32 %91, %92
  br i1 %93, label %94, label %124

; <label>:94:                                     ; preds = %90
  %95 = load %struct.block*, %struct.block** @blocks, align 8
  %96 = load i32, i32* %5, align 4
  %97 = sext i32 %96 to i64
  %98 = getelementptr inbounds %struct.block, %struct.block* %95, i64 %97
  store %struct.block* %98, %struct.block** %11, align 8
  %99 = getelementptr inbounds %struct.block, %struct.block* %98, i32 0, i32 0
  %100 = load i32, i32* %99, align 8
  %101 = icmp sge i32 %100, 0
  br i1 %101, label %102, label %120

; <label>:102:                                    ; preds = %94
  %103 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %104 = load %struct.block*, %struct.block** %11, align 8
  %105 = getelementptr inbounds %struct.block, %struct.block* %104, i32 0, i32 1
  %106 = load i32, i32* %105, align 4
  %107 = load %struct.block*, %struct.block** %11, align 8
  %108 = getelementptr inbounds %struct.block, %struct.block* %107, i32 0, i32 10
  %109 = getelementptr inbounds [3 x i32], [3 x i32]* %108, i64 0, i64 0
  %110 = load i32, i32* %109, align 4
  %111 = load %struct.block*, %struct.block** %11, align 8
  %112 = getelementptr inbounds %struct.block, %struct.block* %111, i32 0, i32 10
  %113 = getelementptr inbounds [3 x i32], [3 x i32]* %112, i64 0, i64 1
  %114 = load i32, i32* %113, align 4
  %115 = load %struct.block*, %struct.block** %11, align 8
  %116 = getelementptr inbounds %struct.block, %struct.block* %115, i32 0, i32 10
  %117 = getelementptr inbounds [3 x i32], [3 x i32]* %116, i64 0, i64 2
  %118 = load i32, i32* %117, align 4
  %119 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %103, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0), i32 %106, i32 %110, i32 %114, i32 %118)
  br label %120

; <label>:120:                                    ; preds = %102, %94
  br label %121

; <label>:121:                                    ; preds = %120
  %122 = load i32, i32* %5, align 4
  %123 = add nsw i32 %122, 1
  store i32 %123, i32* %5, align 4
  br label %90

; <label>:124:                                    ; preds = %90
  %125 = load %struct._IO_FILE*, %struct._IO_FILE** %12, align 8
  %126 = call i32 @fclose(%struct._IO_FILE* %125)
  ret void
}

declare %struct._IO_FILE* @fopen(i8*, i8*) #1

declare i32 @fprintf(%struct._IO_FILE*, i8*, ...) #1

declare i32 @fclose(%struct._IO_FILE*) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
