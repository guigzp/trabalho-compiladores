; ModuleID = 'main.bc'
source_filename = "main.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.object = type { i32, i32, [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double], [3 x double] }
%struct.block = type { i32, i32, i32, i32, i32, i32, i32, [6 x i32], [6 x i32], [6 x [2 x [2 x i32]]], [3 x i32], double**** }
%struct.sorted_block = type { i32, i32 }
%struct.parent = type { i32, i32, i32, i32, i32, i32, [8 x i32], [8 x i32], [3 x i32] }

@max_num_blocks = common global i32 0, align 4
@target_active = common global i32 0, align 4
@target_max = common global i32 0, align 4
@target_min = common global i32 0, align 4
@num_refine = common global i32 0, align 4
@uniform_refine = common global i32 0, align 4
@x_block_size = common global i32 0, align 4
@y_block_size = common global i32 0, align 4
@z_block_size = common global i32 0, align 4
@num_vars = common global i32 0, align 4
@comm_vars = common global i32 0, align 4
@init_block_x = common global i32 0, align 4
@init_block_y = common global i32 0, align 4
@init_block_z = common global i32 0, align 4
@reorder = common global i32 0, align 4
@npx = common global i32 0, align 4
@npy = common global i32 0, align 4
@npz = common global i32 0, align 4
@inbalance = common global i32 0, align 4
@refine_freq = common global i32 0, align 4
@report_diffusion = common global i32 0, align 4
@error_tol = common global i32 0, align 4
@num_tsteps = common global i32 0, align 4
@stages_per_ts = common global i32 0, align 4
@checksum_freq = common global i32 0, align 4
@stencil = common global i32 0, align 4
@report_perf = common global i32 0, align 4
@plot_freq = common global i32 0, align 4
@num_objects = common global i32 0, align 4
@lb_opt = common global i32 0, align 4
@block_change = common global i32 0, align 4
@code = common global i32 0, align 4
@permute = common global i32 0, align 4
@nonblocking = common global i32 0, align 4
@refine_ghost = common global i32 0, align 4
@my_pe = common global i32 0, align 4
@num_pes = common global i32 0, align 4
@counter_malloc = common global i32 0, align 4
@size_malloc = common global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [13 x i8] c"--max_blocks\00", align 1
@.str.1 = private unnamed_addr constant [16 x i8] c"--target_active\00", align 1
@.str.2 = private unnamed_addr constant [13 x i8] c"--target_max\00", align 1
@.str.3 = private unnamed_addr constant [13 x i8] c"--target_min\00", align 1
@.str.4 = private unnamed_addr constant [13 x i8] c"--num_refine\00", align 1
@.str.5 = private unnamed_addr constant [15 x i8] c"--block_change\00", align 1
@.str.6 = private unnamed_addr constant [17 x i8] c"--uniform_refine\00", align 1
@.str.7 = private unnamed_addr constant [5 x i8] c"--nx\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"--ny\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"--nz\00", align 1
@.str.10 = private unnamed_addr constant [11 x i8] c"--num_vars\00", align 1
@.str.11 = private unnamed_addr constant [12 x i8] c"--comm_vars\00", align 1
@.str.12 = private unnamed_addr constant [9 x i8] c"--init_x\00", align 1
@.str.13 = private unnamed_addr constant [9 x i8] c"--init_y\00", align 1
@.str.14 = private unnamed_addr constant [9 x i8] c"--init_z\00", align 1
@.str.15 = private unnamed_addr constant [14 x i8] c"--refine_freq\00", align 1
@.str.16 = private unnamed_addr constant [19 x i8] c"--report_diffusion\00", align 1
@.str.17 = private unnamed_addr constant [12 x i8] c"--error_tol\00", align 1
@.str.18 = private unnamed_addr constant [13 x i8] c"--num_tsteps\00", align 1
@.str.19 = private unnamed_addr constant [16 x i8] c"--stages_per_ts\00", align 1
@.str.20 = private unnamed_addr constant [16 x i8] c"--checksum_freq\00", align 1
@.str.21 = private unnamed_addr constant [10 x i8] c"--stencil\00", align 1
@.str.22 = private unnamed_addr constant [10 x i8] c"--permute\00", align 1
@.str.23 = private unnamed_addr constant [14 x i8] c"--report_perf\00", align 1
@.str.24 = private unnamed_addr constant [12 x i8] c"--plot_freq\00", align 1
@.str.25 = private unnamed_addr constant [7 x i8] c"--code\00", align 1
@.str.26 = private unnamed_addr constant [15 x i8] c"--refine_ghost\00", align 1
@.str.27 = private unnamed_addr constant [14 x i8] c"--num_objects\00", align 1
@.str.28 = private unnamed_addr constant [7 x i8] c"main.c\00", align 1
@objects = common global %struct.object* null, align 8
@.str.29 = private unnamed_addr constant [9 x i8] c"--object\00", align 1
@.str.30 = private unnamed_addr constant [40 x i8] c"object number greater than num_objects\0A\00", align 1
@.str.31 = private unnamed_addr constant [7 x i8] c"--help\00", align 1
@.str.32 = private unnamed_addr constant [40 x i8] c"** Error ** Unknown input parameter %s\0A\00", align 1
@.str.33 = private unnamed_addr constant [49 x i8] c"(Optional) command line input is of the form: \0A\0A\00", align 1
@.str.34 = private unnamed_addr constant [35 x i8] c"--nx - block size x (even && > 0)\0A\00", align 1
@.str.35 = private unnamed_addr constant [35 x i8] c"--ny - block size y (even && > 0)\0A\00", align 1
@.str.36 = private unnamed_addr constant [35 x i8] c"--nz - block size z (even && > 0)\0A\00", align 1
@.str.37 = private unnamed_addr constant [38 x i8] c"--init_x - initial blocks in x (> 0)\0A\00", align 1
@.str.38 = private unnamed_addr constant [38 x i8] c"--init_y - initial blocks in y (> 0)\0A\00", align 1
@.str.39 = private unnamed_addr constant [38 x i8] c"--init_z - initial blocks in z (> 0)\0A\00", align 1
@.str.40 = private unnamed_addr constant [54 x i8] c"--reorder - ordering of blocks if initial number > 1\0A\00", align 1
@.str.41 = private unnamed_addr constant [50 x i8] c"--max_blocks - maximun number of blocks per core\0A\00", align 1
@.str.42 = private unnamed_addr constant [54 x i8] c"--num_refine - (>= 0) number of levels of refinement\0A\00", align 1
@.str.43 = private unnamed_addr constant [75 x i8] c"--block_change - (>= 0) number of levels a block can change in a timestep\0A\00", align 1
@.str.44 = private unnamed_addr constant [57 x i8] c"--uniform_refine - if 1, then grid is uniformly refined\0A\00", align 1
@.str.45 = private unnamed_addr constant [69 x i8] c"--refine_freq - frequency (in timesteps) of checking for refinement\0A\00", align 1
@.str.46 = private unnamed_addr constant [70 x i8] c"--target_active - (>= 0) target number of blocks per core, none if 0\0A\00", align 1
@.str.47 = private unnamed_addr constant [64 x i8] c"--target_max - (>= 0) max number of blocks per core, none if 0\0A\00", align 1
@.str.48 = private unnamed_addr constant [64 x i8] c"--target_min - (>= 0) min number of blocks per core, none if 0\0A\00", align 1
@.str.49 = private unnamed_addr constant [40 x i8] c"--num_vars - number of variables (> 0)\0A\00", align 1
@.str.50 = private unnamed_addr constant [54 x i8] c"--comm_vars - number of vars to communicate together\0A\00", align 1
@.str.51 = private unnamed_addr constant [42 x i8] c"--num_tsteps - number of timesteps (> 0)\0A\00", align 1
@.str.52 = private unnamed_addr constant [59 x i8] c"--stages_per_ts - number of comm/calc stages per timestep\0A\00", align 1
@.str.53 = private unnamed_addr constant [54 x i8] c"--checksum_freq - number of stages between checksums\0A\00", align 1
@.str.54 = private unnamed_addr constant [79 x i8] c"--stencil - 7 or 27 point (27 will not work with refinement (except uniform))\0A\00", align 1
@.str.55 = private unnamed_addr constant [40 x i8] c"--error_tol - (e^{-error_tol} ; >= 0) \0A\00", align 1
@.str.56 = private unnamed_addr constant [39 x i8] c"--report_diffusion - (>= 0) none if 0\0A\00", align 1
@.str.57 = private unnamed_addr constant [25 x i8] c"--report_perf - 0, 1, 2\0A\00", align 1
@.str.58 = private unnamed_addr constant [64 x i8] c"--refine_freq - frequency (timesteps) of plotting (0 for none)\0A\00", align 1
@.str.59 = private unnamed_addr constant [57 x i8] c"--code - closely minic communication of different codes\0A\00", align 1
@.str.60 = private unnamed_addr constant [76 x i8] c"         0 minimal sends, 1 send ghosts, 2 send ghosts and process on send\0A\00", align 1
@.str.61 = private unnamed_addr constant [51 x i8] c"--permute - altenates directions in communication\0A\00", align 1
@.str.62 = private unnamed_addr constant [95 x i8] c"--refine_ghost - use full extent of block (including ghosts) to determine if block is refined\0A\00", align 1
@.str.63 = private unnamed_addr constant [62 x i8] c"--num_objects - (>= 0) number of objects to cause refinement\0A\00", align 1
@.str.64 = private unnamed_addr constant [64 x i8] c"--object - type, position, movement, size, size rate of change\0A\00", align 1
@.str.65 = private unnamed_addr constant [57 x i8] c"All associated settings are integers except for objects\0A\00", align 1
@num_blocks = common global i32* null, align 8
@blocks = common global %struct.block* null, align 8
@sorted_list = common global %struct.sorted_block* null, align 8
@sorted_index = common global i32* null, align 8
@max_num_parents = common global i32 0, align 4
@parents = common global %struct.parent* null, align 8
@grid_sum = common global double* null, align 8
@p8 = common global i32* null, align 8
@p2 = common global i32* null, align 8
@block_start = common global i32* null, align 8
@.str.66 = private unnamed_addr constant [46 x i8] c"initial blocks on processor must be positive\0A\00", align 1
@.str.67 = private unnamed_addr constant [33 x i8] c"max_num_blocks not large enough\0A\00", align 1
@.str.68 = private unnamed_addr constant [29 x i8] c"block size must be positive\0A\00", align 1
@.str.69 = private unnamed_addr constant [40 x i8] c"block size in x direction must be even\0A\00", align 1
@.str.70 = private unnamed_addr constant [40 x i8] c"block size in y direction must be even\0A\00", align 1
@.str.71 = private unnamed_addr constant [40 x i8] c"block size in z direction must be even\0A\00", align 1
@.str.72 = private unnamed_addr constant [54 x i8] c"Only one of target_active and target_max can be used\0A\00", align 1
@.str.73 = private unnamed_addr constant [54 x i8] c"Only one of target_active and target_min can be used\0A\00", align 1
@.str.74 = private unnamed_addr constant [33 x i8] c"illegal value for target_active\0A\00", align 1
@.str.75 = private unnamed_addr constant [30 x i8] c"illegal value for target_max\0A\00", align 1
@.str.76 = private unnamed_addr constant [30 x i8] c"illegal value for target_min\0A\00", align 1
@.str.77 = private unnamed_addr constant [50 x i8] c"number of refinement levels must be non-negative\0A\00", align 1
@.str.78 = private unnamed_addr constant [38 x i8] c"number of variables must be positive\0A\00", align 1
@.str.79 = private unnamed_addr constant [59 x i8] c"number of processors used does not match number allocated\0A\00", align 1
@.str.80 = private unnamed_addr constant [27 x i8] c"illegal value for stencil\0A\00", align 1
@.str.81 = private unnamed_addr constant [76 x i8] c"WARNING: 27 point stencil with non-uniform refinement: answers may diverge\0A\00", align 1
@.str.82 = private unnamed_addr constant [25 x i8] c"code must be 0, 1, or 2\0A\00", align 1
@num_parents = common global i32 0, align 4
@max_active_parent = common global i32 0, align 4
@cur_max_level = common global i32 0, align 4
@num_active = common global i32 0, align 4
@max_active_block = common global i32 0, align 4
@global_active = common global i32 0, align 4
@x_block_half = common global i32 0, align 4
@y_block_half = common global i32 0, align 4
@z_block_half = common global i32 0, align 4
@tol = common global double 0.000000e+00, align 8
@mesh_size = common global [3 x i32] zeroinitializer, align 4
@max_mesh_size = common global i32 0, align 4
@from = common global i32* null, align 8
@to = common global i32* null, align 8
@msg_len = common global [3 x [4 x i32]] zeroinitializer, align 16
@local_max_b = common global i32 0, align 4
@global_max_b = common global i32 0, align 4
@average = common global [128 x double] zeroinitializer, align 16
@stddev = common global [128 x double] zeroinitializer, align 16
@minimum = common global [128 x double] zeroinitializer, align 16
@maximum = common global [128 x double] zeroinitializer, align 16
@timer_all = common global double 0.000000e+00, align 8
@timer_comm_all = common global double 0.000000e+00, align 8
@timer_comm_dir = common global [3 x double] zeroinitializer, align 16
@timer_comm_same = common global [3 x double] zeroinitializer, align 16
@timer_comm_diff = common global [3 x double] zeroinitializer, align 16
@timer_comm_bc = common global [3 x double] zeroinitializer, align 16
@timer_calc_all = common global double 0.000000e+00, align 8
@timer_cs_all = common global double 0.000000e+00, align 8
@timer_cs_calc = common global double 0.000000e+00, align 8
@timer_refine_all = common global double 0.000000e+00, align 8
@timer_refine_co = common global double 0.000000e+00, align 8
@timer_refine_mr = common global double 0.000000e+00, align 8
@timer_refine_sb = common global double 0.000000e+00, align 8
@timer_refine_cc = common global double 0.000000e+00, align 8
@timer_cb_all = common global double 0.000000e+00, align 8
@timer_target_all = common global double 0.000000e+00, align 8
@timer_target_rb = common global double 0.000000e+00, align 8
@timer_target_dc = common global double 0.000000e+00, align 8
@timer_target_cb = common global double 0.000000e+00, align 8
@timer_target_ab = common global double 0.000000e+00, align 8
@timer_target_da = common global double 0.000000e+00, align 8
@timer_target_sb = common global double 0.000000e+00, align 8
@timer_plot = common global double 0.000000e+00, align 8
@total_blocks = common global i64 0, align 8
@nb_min = common global i32 0, align 4
@nb_max = common global i32 0, align 4
@nrs = common global i32 0, align 4
@nps = common global i32 0, align 4
@num_refined = common global i32 0, align 4
@num_reformed = common global i32 0, align 4
@counter_bc = common global [3 x i32] zeroinitializer, align 4
@counter_same = common global [3 x i32] zeroinitializer, align 4
@counter_diff = common global [3 x i32] zeroinitializer, align 4
@counter_malloc_init = common global i32 0, align 4
@size_malloc_init = common global double 0.000000e+00, align 8
@total_red = common global i32 0, align 4

; Function Attrs: noinline nounwind uwtable
define i32 @main(i32, i8**) #0 {
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i8**, align 8
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  %8 = alloca i32, align 4
  %9 = alloca [35 x i32], align 16
  %10 = alloca double*, align 8
  store i32 0, i32* %3, align 4
  store i32 %0, i32* %4, align 4
  store i8** %1, i8*** %5, align 8
  store i32 500, i32* @max_num_blocks, align 4
  store i32 0, i32* @target_active, align 4
  store i32 0, i32* @target_max, align 4
  store i32 0, i32* @target_min, align 4
  store i32 5, i32* @num_refine, align 4
  store i32 0, i32* @uniform_refine, align 4
  store i32 10, i32* @x_block_size, align 4
  store i32 10, i32* @y_block_size, align 4
  store i32 10, i32* @z_block_size, align 4
  store i32 40, i32* @num_vars, align 4
  store i32 0, i32* @comm_vars, align 4
  store i32 1, i32* @init_block_x, align 4
  store i32 1, i32* @init_block_y, align 4
  store i32 1, i32* @init_block_z, align 4
  store i32 1, i32* @reorder, align 4
  store i32 1, i32* @npx, align 4
  store i32 1, i32* @npy, align 4
  store i32 1, i32* @npz, align 4
  store i32 0, i32* @inbalance, align 4
  store i32 5, i32* @refine_freq, align 4
  store i32 0, i32* @report_diffusion, align 4
  store i32 8, i32* @error_tol, align 4
  store i32 20, i32* @num_tsteps, align 4
  store i32 20, i32* @stages_per_ts, align 4
  store i32 5, i32* @checksum_freq, align 4
  store i32 7, i32* @stencil, align 4
  store i32 12, i32* @report_perf, align 4
  store i32 0, i32* @plot_freq, align 4
  store i32 0, i32* @num_objects, align 4
  store i32 1, i32* @lb_opt, align 4
  store i32 0, i32* @block_change, align 4
  store i32 0, i32* @code, align 4
  store i32 0, i32* @permute, align 4
  store i32 1, i32* @nonblocking, align 4
  store i32 0, i32* @refine_ghost, align 4
  store i32 0, i32* @my_pe, align 4
  store i32 1, i32* @num_pes, align 4
  store i32 0, i32* @counter_malloc, align 4
  store double 0.000000e+00, double* @size_malloc, align 8
  store i32 1, i32* %6, align 4
  br label %11

; <label>:11:                                     ; preds = %696, %2
  %12 = load i32, i32* %6, align 4
  %13 = load i32, i32* %4, align 4
  %14 = icmp slt i32 %12, %13
  br i1 %14, label %15, label %699

; <label>:15:                                     ; preds = %11
  %16 = load i8**, i8*** %5, align 8
  %17 = load i32, i32* %6, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds i8*, i8** %16, i64 %18
  %20 = load i8*, i8** %19, align 8
  %21 = call i32 @strcmp(i8* %20, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i32 0, i32 0)) #5
  %22 = icmp ne i32 %21, 0
  br i1 %22, label %31, label %23

; <label>:23:                                     ; preds = %15
  %24 = load i8**, i8*** %5, align 8
  %25 = load i32, i32* %6, align 4
  %26 = add nsw i32 %25, 1
  store i32 %26, i32* %6, align 4
  %27 = sext i32 %26 to i64
  %28 = getelementptr inbounds i8*, i8** %24, i64 %27
  %29 = load i8*, i8** %28, align 8
  %30 = call i32 @atoi(i8* %29) #5
  store i32 %30, i32* @max_num_blocks, align 4
  br label %695

; <label>:31:                                     ; preds = %15
  %32 = load i8**, i8*** %5, align 8
  %33 = load i32, i32* %6, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds i8*, i8** %32, i64 %34
  %36 = load i8*, i8** %35, align 8
  %37 = call i32 @strcmp(i8* %36, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1, i32 0, i32 0)) #5
  %38 = icmp ne i32 %37, 0
  br i1 %38, label %47, label %39

; <label>:39:                                     ; preds = %31
  %40 = load i8**, i8*** %5, align 8
  %41 = load i32, i32* %6, align 4
  %42 = add nsw i32 %41, 1
  store i32 %42, i32* %6, align 4
  %43 = sext i32 %42 to i64
  %44 = getelementptr inbounds i8*, i8** %40, i64 %43
  %45 = load i8*, i8** %44, align 8
  %46 = call i32 @atoi(i8* %45) #5
  store i32 %46, i32* @target_active, align 4
  br label %694

; <label>:47:                                     ; preds = %31
  %48 = load i8**, i8*** %5, align 8
  %49 = load i32, i32* %6, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds i8*, i8** %48, i64 %50
  %52 = load i8*, i8** %51, align 8
  %53 = call i32 @strcmp(i8* %52, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.2, i32 0, i32 0)) #5
  %54 = icmp ne i32 %53, 0
  br i1 %54, label %63, label %55

; <label>:55:                                     ; preds = %47
  %56 = load i8**, i8*** %5, align 8
  %57 = load i32, i32* %6, align 4
  %58 = add nsw i32 %57, 1
  store i32 %58, i32* %6, align 4
  %59 = sext i32 %58 to i64
  %60 = getelementptr inbounds i8*, i8** %56, i64 %59
  %61 = load i8*, i8** %60, align 8
  %62 = call i32 @atoi(i8* %61) #5
  store i32 %62, i32* @target_max, align 4
  br label %693

; <label>:63:                                     ; preds = %47
  %64 = load i8**, i8*** %5, align 8
  %65 = load i32, i32* %6, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds i8*, i8** %64, i64 %66
  %68 = load i8*, i8** %67, align 8
  %69 = call i32 @strcmp(i8* %68, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.3, i32 0, i32 0)) #5
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %79, label %71

; <label>:71:                                     ; preds = %63
  %72 = load i8**, i8*** %5, align 8
  %73 = load i32, i32* %6, align 4
  %74 = add nsw i32 %73, 1
  store i32 %74, i32* %6, align 4
  %75 = sext i32 %74 to i64
  %76 = getelementptr inbounds i8*, i8** %72, i64 %75
  %77 = load i8*, i8** %76, align 8
  %78 = call i32 @atoi(i8* %77) #5
  store i32 %78, i32* @target_min, align 4
  br label %692

; <label>:79:                                     ; preds = %63
  %80 = load i8**, i8*** %5, align 8
  %81 = load i32, i32* %6, align 4
  %82 = sext i32 %81 to i64
  %83 = getelementptr inbounds i8*, i8** %80, i64 %82
  %84 = load i8*, i8** %83, align 8
  %85 = call i32 @strcmp(i8* %84, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.4, i32 0, i32 0)) #5
  %86 = icmp ne i32 %85, 0
  br i1 %86, label %95, label %87

; <label>:87:                                     ; preds = %79
  %88 = load i8**, i8*** %5, align 8
  %89 = load i32, i32* %6, align 4
  %90 = add nsw i32 %89, 1
  store i32 %90, i32* %6, align 4
  %91 = sext i32 %90 to i64
  %92 = getelementptr inbounds i8*, i8** %88, i64 %91
  %93 = load i8*, i8** %92, align 8
  %94 = call i32 @atoi(i8* %93) #5
  store i32 %94, i32* @num_refine, align 4
  br label %691

; <label>:95:                                     ; preds = %79
  %96 = load i8**, i8*** %5, align 8
  %97 = load i32, i32* %6, align 4
  %98 = sext i32 %97 to i64
  %99 = getelementptr inbounds i8*, i8** %96, i64 %98
  %100 = load i8*, i8** %99, align 8
  %101 = call i32 @strcmp(i8* %100, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.5, i32 0, i32 0)) #5
  %102 = icmp ne i32 %101, 0
  br i1 %102, label %111, label %103

; <label>:103:                                    ; preds = %95
  %104 = load i8**, i8*** %5, align 8
  %105 = load i32, i32* %6, align 4
  %106 = add nsw i32 %105, 1
  store i32 %106, i32* %6, align 4
  %107 = sext i32 %106 to i64
  %108 = getelementptr inbounds i8*, i8** %104, i64 %107
  %109 = load i8*, i8** %108, align 8
  %110 = call i32 @atoi(i8* %109) #5
  store i32 %110, i32* @block_change, align 4
  br label %690

; <label>:111:                                    ; preds = %95
  %112 = load i8**, i8*** %5, align 8
  %113 = load i32, i32* %6, align 4
  %114 = sext i32 %113 to i64
  %115 = getelementptr inbounds i8*, i8** %112, i64 %114
  %116 = load i8*, i8** %115, align 8
  %117 = call i32 @strcmp(i8* %116, i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.6, i32 0, i32 0)) #5
  %118 = icmp ne i32 %117, 0
  br i1 %118, label %127, label %119

; <label>:119:                                    ; preds = %111
  %120 = load i8**, i8*** %5, align 8
  %121 = load i32, i32* %6, align 4
  %122 = add nsw i32 %121, 1
  store i32 %122, i32* %6, align 4
  %123 = sext i32 %122 to i64
  %124 = getelementptr inbounds i8*, i8** %120, i64 %123
  %125 = load i8*, i8** %124, align 8
  %126 = call i32 @atoi(i8* %125) #5
  store i32 %126, i32* @uniform_refine, align 4
  br label %689

; <label>:127:                                    ; preds = %111
  %128 = load i8**, i8*** %5, align 8
  %129 = load i32, i32* %6, align 4
  %130 = sext i32 %129 to i64
  %131 = getelementptr inbounds i8*, i8** %128, i64 %130
  %132 = load i8*, i8** %131, align 8
  %133 = call i32 @strcmp(i8* %132, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.7, i32 0, i32 0)) #5
  %134 = icmp ne i32 %133, 0
  br i1 %134, label %143, label %135

; <label>:135:                                    ; preds = %127
  %136 = load i8**, i8*** %5, align 8
  %137 = load i32, i32* %6, align 4
  %138 = add nsw i32 %137, 1
  store i32 %138, i32* %6, align 4
  %139 = sext i32 %138 to i64
  %140 = getelementptr inbounds i8*, i8** %136, i64 %139
  %141 = load i8*, i8** %140, align 8
  %142 = call i32 @atoi(i8* %141) #5
  store i32 %142, i32* @x_block_size, align 4
  br label %688

; <label>:143:                                    ; preds = %127
  %144 = load i8**, i8*** %5, align 8
  %145 = load i32, i32* %6, align 4
  %146 = sext i32 %145 to i64
  %147 = getelementptr inbounds i8*, i8** %144, i64 %146
  %148 = load i8*, i8** %147, align 8
  %149 = call i32 @strcmp(i8* %148, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0)) #5
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %159, label %151

; <label>:151:                                    ; preds = %143
  %152 = load i8**, i8*** %5, align 8
  %153 = load i32, i32* %6, align 4
  %154 = add nsw i32 %153, 1
  store i32 %154, i32* %6, align 4
  %155 = sext i32 %154 to i64
  %156 = getelementptr inbounds i8*, i8** %152, i64 %155
  %157 = load i8*, i8** %156, align 8
  %158 = call i32 @atoi(i8* %157) #5
  store i32 %158, i32* @y_block_size, align 4
  br label %687

; <label>:159:                                    ; preds = %143
  %160 = load i8**, i8*** %5, align 8
  %161 = load i32, i32* %6, align 4
  %162 = sext i32 %161 to i64
  %163 = getelementptr inbounds i8*, i8** %160, i64 %162
  %164 = load i8*, i8** %163, align 8
  %165 = call i32 @strcmp(i8* %164, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0)) #5
  %166 = icmp ne i32 %165, 0
  br i1 %166, label %175, label %167

; <label>:167:                                    ; preds = %159
  %168 = load i8**, i8*** %5, align 8
  %169 = load i32, i32* %6, align 4
  %170 = add nsw i32 %169, 1
  store i32 %170, i32* %6, align 4
  %171 = sext i32 %170 to i64
  %172 = getelementptr inbounds i8*, i8** %168, i64 %171
  %173 = load i8*, i8** %172, align 8
  %174 = call i32 @atoi(i8* %173) #5
  store i32 %174, i32* @z_block_size, align 4
  br label %686

; <label>:175:                                    ; preds = %159
  %176 = load i8**, i8*** %5, align 8
  %177 = load i32, i32* %6, align 4
  %178 = sext i32 %177 to i64
  %179 = getelementptr inbounds i8*, i8** %176, i64 %178
  %180 = load i8*, i8** %179, align 8
  %181 = call i32 @strcmp(i8* %180, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.10, i32 0, i32 0)) #5
  %182 = icmp ne i32 %181, 0
  br i1 %182, label %191, label %183

; <label>:183:                                    ; preds = %175
  %184 = load i8**, i8*** %5, align 8
  %185 = load i32, i32* %6, align 4
  %186 = add nsw i32 %185, 1
  store i32 %186, i32* %6, align 4
  %187 = sext i32 %186 to i64
  %188 = getelementptr inbounds i8*, i8** %184, i64 %187
  %189 = load i8*, i8** %188, align 8
  %190 = call i32 @atoi(i8* %189) #5
  store i32 %190, i32* @num_vars, align 4
  br label %685

; <label>:191:                                    ; preds = %175
  %192 = load i8**, i8*** %5, align 8
  %193 = load i32, i32* %6, align 4
  %194 = sext i32 %193 to i64
  %195 = getelementptr inbounds i8*, i8** %192, i64 %194
  %196 = load i8*, i8** %195, align 8
  %197 = call i32 @strcmp(i8* %196, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.11, i32 0, i32 0)) #5
  %198 = icmp ne i32 %197, 0
  br i1 %198, label %207, label %199

; <label>:199:                                    ; preds = %191
  %200 = load i8**, i8*** %5, align 8
  %201 = load i32, i32* %6, align 4
  %202 = add nsw i32 %201, 1
  store i32 %202, i32* %6, align 4
  %203 = sext i32 %202 to i64
  %204 = getelementptr inbounds i8*, i8** %200, i64 %203
  %205 = load i8*, i8** %204, align 8
  %206 = call i32 @atoi(i8* %205) #5
  store i32 %206, i32* @comm_vars, align 4
  br label %684

; <label>:207:                                    ; preds = %191
  %208 = load i8**, i8*** %5, align 8
  %209 = load i32, i32* %6, align 4
  %210 = sext i32 %209 to i64
  %211 = getelementptr inbounds i8*, i8** %208, i64 %210
  %212 = load i8*, i8** %211, align 8
  %213 = call i32 @strcmp(i8* %212, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.12, i32 0, i32 0)) #5
  %214 = icmp ne i32 %213, 0
  br i1 %214, label %223, label %215

; <label>:215:                                    ; preds = %207
  %216 = load i8**, i8*** %5, align 8
  %217 = load i32, i32* %6, align 4
  %218 = add nsw i32 %217, 1
  store i32 %218, i32* %6, align 4
  %219 = sext i32 %218 to i64
  %220 = getelementptr inbounds i8*, i8** %216, i64 %219
  %221 = load i8*, i8** %220, align 8
  %222 = call i32 @atoi(i8* %221) #5
  store i32 %222, i32* @init_block_x, align 4
  br label %683

; <label>:223:                                    ; preds = %207
  %224 = load i8**, i8*** %5, align 8
  %225 = load i32, i32* %6, align 4
  %226 = sext i32 %225 to i64
  %227 = getelementptr inbounds i8*, i8** %224, i64 %226
  %228 = load i8*, i8** %227, align 8
  %229 = call i32 @strcmp(i8* %228, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.13, i32 0, i32 0)) #5
  %230 = icmp ne i32 %229, 0
  br i1 %230, label %239, label %231

; <label>:231:                                    ; preds = %223
  %232 = load i8**, i8*** %5, align 8
  %233 = load i32, i32* %6, align 4
  %234 = add nsw i32 %233, 1
  store i32 %234, i32* %6, align 4
  %235 = sext i32 %234 to i64
  %236 = getelementptr inbounds i8*, i8** %232, i64 %235
  %237 = load i8*, i8** %236, align 8
  %238 = call i32 @atoi(i8* %237) #5
  store i32 %238, i32* @init_block_y, align 4
  br label %682

; <label>:239:                                    ; preds = %223
  %240 = load i8**, i8*** %5, align 8
  %241 = load i32, i32* %6, align 4
  %242 = sext i32 %241 to i64
  %243 = getelementptr inbounds i8*, i8** %240, i64 %242
  %244 = load i8*, i8** %243, align 8
  %245 = call i32 @strcmp(i8* %244, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.14, i32 0, i32 0)) #5
  %246 = icmp ne i32 %245, 0
  br i1 %246, label %255, label %247

; <label>:247:                                    ; preds = %239
  %248 = load i8**, i8*** %5, align 8
  %249 = load i32, i32* %6, align 4
  %250 = add nsw i32 %249, 1
  store i32 %250, i32* %6, align 4
  %251 = sext i32 %250 to i64
  %252 = getelementptr inbounds i8*, i8** %248, i64 %251
  %253 = load i8*, i8** %252, align 8
  %254 = call i32 @atoi(i8* %253) #5
  store i32 %254, i32* @init_block_z, align 4
  br label %681

; <label>:255:                                    ; preds = %239
  %256 = load i8**, i8*** %5, align 8
  %257 = load i32, i32* %6, align 4
  %258 = sext i32 %257 to i64
  %259 = getelementptr inbounds i8*, i8** %256, i64 %258
  %260 = load i8*, i8** %259, align 8
  %261 = call i32 @strcmp(i8* %260, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.15, i32 0, i32 0)) #5
  %262 = icmp ne i32 %261, 0
  br i1 %262, label %271, label %263

; <label>:263:                                    ; preds = %255
  %264 = load i8**, i8*** %5, align 8
  %265 = load i32, i32* %6, align 4
  %266 = add nsw i32 %265, 1
  store i32 %266, i32* %6, align 4
  %267 = sext i32 %266 to i64
  %268 = getelementptr inbounds i8*, i8** %264, i64 %267
  %269 = load i8*, i8** %268, align 8
  %270 = call i32 @atoi(i8* %269) #5
  store i32 %270, i32* @refine_freq, align 4
  br label %680

; <label>:271:                                    ; preds = %255
  %272 = load i8**, i8*** %5, align 8
  %273 = load i32, i32* %6, align 4
  %274 = sext i32 %273 to i64
  %275 = getelementptr inbounds i8*, i8** %272, i64 %274
  %276 = load i8*, i8** %275, align 8
  %277 = call i32 @strcmp(i8* %276, i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.16, i32 0, i32 0)) #5
  %278 = icmp ne i32 %277, 0
  br i1 %278, label %287, label %279

; <label>:279:                                    ; preds = %271
  %280 = load i8**, i8*** %5, align 8
  %281 = load i32, i32* %6, align 4
  %282 = add nsw i32 %281, 1
  store i32 %282, i32* %6, align 4
  %283 = sext i32 %282 to i64
  %284 = getelementptr inbounds i8*, i8** %280, i64 %283
  %285 = load i8*, i8** %284, align 8
  %286 = call i32 @atoi(i8* %285) #5
  store i32 %286, i32* @report_diffusion, align 4
  br label %679

; <label>:287:                                    ; preds = %271
  %288 = load i8**, i8*** %5, align 8
  %289 = load i32, i32* %6, align 4
  %290 = sext i32 %289 to i64
  %291 = getelementptr inbounds i8*, i8** %288, i64 %290
  %292 = load i8*, i8** %291, align 8
  %293 = call i32 @strcmp(i8* %292, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.17, i32 0, i32 0)) #5
  %294 = icmp ne i32 %293, 0
  br i1 %294, label %303, label %295

; <label>:295:                                    ; preds = %287
  %296 = load i8**, i8*** %5, align 8
  %297 = load i32, i32* %6, align 4
  %298 = add nsw i32 %297, 1
  store i32 %298, i32* %6, align 4
  %299 = sext i32 %298 to i64
  %300 = getelementptr inbounds i8*, i8** %296, i64 %299
  %301 = load i8*, i8** %300, align 8
  %302 = call i32 @atoi(i8* %301) #5
  store i32 %302, i32* @error_tol, align 4
  br label %678

; <label>:303:                                    ; preds = %287
  %304 = load i8**, i8*** %5, align 8
  %305 = load i32, i32* %6, align 4
  %306 = sext i32 %305 to i64
  %307 = getelementptr inbounds i8*, i8** %304, i64 %306
  %308 = load i8*, i8** %307, align 8
  %309 = call i32 @strcmp(i8* %308, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.18, i32 0, i32 0)) #5
  %310 = icmp ne i32 %309, 0
  br i1 %310, label %319, label %311

; <label>:311:                                    ; preds = %303
  %312 = load i8**, i8*** %5, align 8
  %313 = load i32, i32* %6, align 4
  %314 = add nsw i32 %313, 1
  store i32 %314, i32* %6, align 4
  %315 = sext i32 %314 to i64
  %316 = getelementptr inbounds i8*, i8** %312, i64 %315
  %317 = load i8*, i8** %316, align 8
  %318 = call i32 @atoi(i8* %317) #5
  store i32 %318, i32* @num_tsteps, align 4
  br label %677

; <label>:319:                                    ; preds = %303
  %320 = load i8**, i8*** %5, align 8
  %321 = load i32, i32* %6, align 4
  %322 = sext i32 %321 to i64
  %323 = getelementptr inbounds i8*, i8** %320, i64 %322
  %324 = load i8*, i8** %323, align 8
  %325 = call i32 @strcmp(i8* %324, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.19, i32 0, i32 0)) #5
  %326 = icmp ne i32 %325, 0
  br i1 %326, label %335, label %327

; <label>:327:                                    ; preds = %319
  %328 = load i8**, i8*** %5, align 8
  %329 = load i32, i32* %6, align 4
  %330 = add nsw i32 %329, 1
  store i32 %330, i32* %6, align 4
  %331 = sext i32 %330 to i64
  %332 = getelementptr inbounds i8*, i8** %328, i64 %331
  %333 = load i8*, i8** %332, align 8
  %334 = call i32 @atoi(i8* %333) #5
  store i32 %334, i32* @stages_per_ts, align 4
  br label %676

; <label>:335:                                    ; preds = %319
  %336 = load i8**, i8*** %5, align 8
  %337 = load i32, i32* %6, align 4
  %338 = sext i32 %337 to i64
  %339 = getelementptr inbounds i8*, i8** %336, i64 %338
  %340 = load i8*, i8** %339, align 8
  %341 = call i32 @strcmp(i8* %340, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.20, i32 0, i32 0)) #5
  %342 = icmp ne i32 %341, 0
  br i1 %342, label %351, label %343

; <label>:343:                                    ; preds = %335
  %344 = load i8**, i8*** %5, align 8
  %345 = load i32, i32* %6, align 4
  %346 = add nsw i32 %345, 1
  store i32 %346, i32* %6, align 4
  %347 = sext i32 %346 to i64
  %348 = getelementptr inbounds i8*, i8** %344, i64 %347
  %349 = load i8*, i8** %348, align 8
  %350 = call i32 @atoi(i8* %349) #5
  store i32 %350, i32* @checksum_freq, align 4
  br label %675

; <label>:351:                                    ; preds = %335
  %352 = load i8**, i8*** %5, align 8
  %353 = load i32, i32* %6, align 4
  %354 = sext i32 %353 to i64
  %355 = getelementptr inbounds i8*, i8** %352, i64 %354
  %356 = load i8*, i8** %355, align 8
  %357 = call i32 @strcmp(i8* %356, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.21, i32 0, i32 0)) #5
  %358 = icmp ne i32 %357, 0
  br i1 %358, label %367, label %359

; <label>:359:                                    ; preds = %351
  %360 = load i8**, i8*** %5, align 8
  %361 = load i32, i32* %6, align 4
  %362 = add nsw i32 %361, 1
  store i32 %362, i32* %6, align 4
  %363 = sext i32 %362 to i64
  %364 = getelementptr inbounds i8*, i8** %360, i64 %363
  %365 = load i8*, i8** %364, align 8
  %366 = call i32 @atoi(i8* %365) #5
  store i32 %366, i32* @stencil, align 4
  br label %674

; <label>:367:                                    ; preds = %351
  %368 = load i8**, i8*** %5, align 8
  %369 = load i32, i32* %6, align 4
  %370 = sext i32 %369 to i64
  %371 = getelementptr inbounds i8*, i8** %368, i64 %370
  %372 = load i8*, i8** %371, align 8
  %373 = call i32 @strcmp(i8* %372, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.22, i32 0, i32 0)) #5
  %374 = icmp ne i32 %373, 0
  br i1 %374, label %376, label %375

; <label>:375:                                    ; preds = %367
  store i32 1, i32* @permute, align 4
  br label %673

; <label>:376:                                    ; preds = %367
  %377 = load i8**, i8*** %5, align 8
  %378 = load i32, i32* %6, align 4
  %379 = sext i32 %378 to i64
  %380 = getelementptr inbounds i8*, i8** %377, i64 %379
  %381 = load i8*, i8** %380, align 8
  %382 = call i32 @strcmp(i8* %381, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.23, i32 0, i32 0)) #5
  %383 = icmp ne i32 %382, 0
  br i1 %383, label %392, label %384

; <label>:384:                                    ; preds = %376
  %385 = load i8**, i8*** %5, align 8
  %386 = load i32, i32* %6, align 4
  %387 = add nsw i32 %386, 1
  store i32 %387, i32* %6, align 4
  %388 = sext i32 %387 to i64
  %389 = getelementptr inbounds i8*, i8** %385, i64 %388
  %390 = load i8*, i8** %389, align 8
  %391 = call i32 @atoi(i8* %390) #5
  store i32 %391, i32* @report_perf, align 4
  br label %672

; <label>:392:                                    ; preds = %376
  %393 = load i8**, i8*** %5, align 8
  %394 = load i32, i32* %6, align 4
  %395 = sext i32 %394 to i64
  %396 = getelementptr inbounds i8*, i8** %393, i64 %395
  %397 = load i8*, i8** %396, align 8
  %398 = call i32 @strcmp(i8* %397, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.24, i32 0, i32 0)) #5
  %399 = icmp ne i32 %398, 0
  br i1 %399, label %408, label %400

; <label>:400:                                    ; preds = %392
  %401 = load i8**, i8*** %5, align 8
  %402 = load i32, i32* %6, align 4
  %403 = add nsw i32 %402, 1
  store i32 %403, i32* %6, align 4
  %404 = sext i32 %403 to i64
  %405 = getelementptr inbounds i8*, i8** %401, i64 %404
  %406 = load i8*, i8** %405, align 8
  %407 = call i32 @atoi(i8* %406) #5
  store i32 %407, i32* @plot_freq, align 4
  br label %671

; <label>:408:                                    ; preds = %392
  %409 = load i8**, i8*** %5, align 8
  %410 = load i32, i32* %6, align 4
  %411 = sext i32 %410 to i64
  %412 = getelementptr inbounds i8*, i8** %409, i64 %411
  %413 = load i8*, i8** %412, align 8
  %414 = call i32 @strcmp(i8* %413, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.25, i32 0, i32 0)) #5
  %415 = icmp ne i32 %414, 0
  br i1 %415, label %424, label %416

; <label>:416:                                    ; preds = %408
  %417 = load i8**, i8*** %5, align 8
  %418 = load i32, i32* %6, align 4
  %419 = add nsw i32 %418, 1
  store i32 %419, i32* %6, align 4
  %420 = sext i32 %419 to i64
  %421 = getelementptr inbounds i8*, i8** %417, i64 %420
  %422 = load i8*, i8** %421, align 8
  %423 = call i32 @atoi(i8* %422) #5
  store i32 %423, i32* @code, align 4
  br label %670

; <label>:424:                                    ; preds = %408
  %425 = load i8**, i8*** %5, align 8
  %426 = load i32, i32* %6, align 4
  %427 = sext i32 %426 to i64
  %428 = getelementptr inbounds i8*, i8** %425, i64 %427
  %429 = load i8*, i8** %428, align 8
  %430 = call i32 @strcmp(i8* %429, i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.26, i32 0, i32 0)) #5
  %431 = icmp ne i32 %430, 0
  br i1 %431, label %433, label %432

; <label>:432:                                    ; preds = %424
  store i32 1, i32* @refine_ghost, align 4
  br label %669

; <label>:433:                                    ; preds = %424
  %434 = load i8**, i8*** %5, align 8
  %435 = load i32, i32* %6, align 4
  %436 = sext i32 %435 to i64
  %437 = getelementptr inbounds i8*, i8** %434, i64 %436
  %438 = load i8*, i8** %437, align 8
  %439 = call i32 @strcmp(i8* %438, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.27, i32 0, i32 0)) #5
  %440 = icmp ne i32 %439, 0
  br i1 %440, label %454, label %441

; <label>:441:                                    ; preds = %433
  %442 = load i8**, i8*** %5, align 8
  %443 = load i32, i32* %6, align 4
  %444 = add nsw i32 %443, 1
  store i32 %444, i32* %6, align 4
  %445 = sext i32 %444 to i64
  %446 = getelementptr inbounds i8*, i8** %442, i64 %445
  %447 = load i8*, i8** %446, align 8
  %448 = call i32 @atoi(i8* %447) #5
  store i32 %448, i32* @num_objects, align 4
  %449 = load i32, i32* @num_objects, align 4
  %450 = sext i32 %449 to i64
  %451 = mul i64 %450, 176
  %452 = call i8* @ma_malloc(i64 %451, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 107)
  %453 = bitcast i8* %452 to %struct.object*
  store %struct.object* %453, %struct.object** @objects, align 8
  store i32 0, i32* %8, align 4
  br label %668

; <label>:454:                                    ; preds = %433
  %455 = load i8**, i8*** %5, align 8
  %456 = load i32, i32* %6, align 4
  %457 = sext i32 %456 to i64
  %458 = getelementptr inbounds i8*, i8** %455, i64 %457
  %459 = load i8*, i8** %458, align 8
  %460 = call i32 @strcmp(i8* %459, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.29, i32 0, i32 0)) #5
  %461 = icmp ne i32 %460, 0
  br i1 %461, label %651, label %462

; <label>:462:                                    ; preds = %454
  %463 = load i32, i32* %8, align 4
  %464 = load i32, i32* @num_objects, align 4
  %465 = icmp sge i32 %463, %464
  br i1 %465, label %466, label %468

; <label>:466:                                    ; preds = %462
  %467 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.30, i32 0, i32 0))
  call void @exit(i32 -1) #6
  unreachable

; <label>:468:                                    ; preds = %462
  %469 = load i8**, i8*** %5, align 8
  %470 = load i32, i32* %6, align 4
  %471 = add nsw i32 %470, 1
  store i32 %471, i32* %6, align 4
  %472 = sext i32 %471 to i64
  %473 = getelementptr inbounds i8*, i8** %469, i64 %472
  %474 = load i8*, i8** %473, align 8
  %475 = call i32 @atoi(i8* %474) #5
  %476 = load %struct.object*, %struct.object** @objects, align 8
  %477 = load i32, i32* %8, align 4
  %478 = sext i32 %477 to i64
  %479 = getelementptr inbounds %struct.object, %struct.object* %476, i64 %478
  %480 = getelementptr inbounds %struct.object, %struct.object* %479, i32 0, i32 0
  store i32 %475, i32* %480, align 8
  %481 = load i8**, i8*** %5, align 8
  %482 = load i32, i32* %6, align 4
  %483 = add nsw i32 %482, 1
  store i32 %483, i32* %6, align 4
  %484 = sext i32 %483 to i64
  %485 = getelementptr inbounds i8*, i8** %481, i64 %484
  %486 = load i8*, i8** %485, align 8
  %487 = call i32 @atoi(i8* %486) #5
  %488 = load %struct.object*, %struct.object** @objects, align 8
  %489 = load i32, i32* %8, align 4
  %490 = sext i32 %489 to i64
  %491 = getelementptr inbounds %struct.object, %struct.object* %488, i64 %490
  %492 = getelementptr inbounds %struct.object, %struct.object* %491, i32 0, i32 1
  store i32 %487, i32* %492, align 4
  %493 = load i8**, i8*** %5, align 8
  %494 = load i32, i32* %6, align 4
  %495 = add nsw i32 %494, 1
  store i32 %495, i32* %6, align 4
  %496 = sext i32 %495 to i64
  %497 = getelementptr inbounds i8*, i8** %493, i64 %496
  %498 = load i8*, i8** %497, align 8
  %499 = call double @atof(i8* %498) #5
  %500 = load %struct.object*, %struct.object** @objects, align 8
  %501 = load i32, i32* %8, align 4
  %502 = sext i32 %501 to i64
  %503 = getelementptr inbounds %struct.object, %struct.object* %500, i64 %502
  %504 = getelementptr inbounds %struct.object, %struct.object* %503, i32 0, i32 2
  %505 = getelementptr inbounds [3 x double], [3 x double]* %504, i64 0, i64 0
  store double %499, double* %505, align 8
  %506 = load i8**, i8*** %5, align 8
  %507 = load i32, i32* %6, align 4
  %508 = add nsw i32 %507, 1
  store i32 %508, i32* %6, align 4
  %509 = sext i32 %508 to i64
  %510 = getelementptr inbounds i8*, i8** %506, i64 %509
  %511 = load i8*, i8** %510, align 8
  %512 = call double @atof(i8* %511) #5
  %513 = load %struct.object*, %struct.object** @objects, align 8
  %514 = load i32, i32* %8, align 4
  %515 = sext i32 %514 to i64
  %516 = getelementptr inbounds %struct.object, %struct.object* %513, i64 %515
  %517 = getelementptr inbounds %struct.object, %struct.object* %516, i32 0, i32 2
  %518 = getelementptr inbounds [3 x double], [3 x double]* %517, i64 0, i64 1
  store double %512, double* %518, align 8
  %519 = load i8**, i8*** %5, align 8
  %520 = load i32, i32* %6, align 4
  %521 = add nsw i32 %520, 1
  store i32 %521, i32* %6, align 4
  %522 = sext i32 %521 to i64
  %523 = getelementptr inbounds i8*, i8** %519, i64 %522
  %524 = load i8*, i8** %523, align 8
  %525 = call double @atof(i8* %524) #5
  %526 = load %struct.object*, %struct.object** @objects, align 8
  %527 = load i32, i32* %8, align 4
  %528 = sext i32 %527 to i64
  %529 = getelementptr inbounds %struct.object, %struct.object* %526, i64 %528
  %530 = getelementptr inbounds %struct.object, %struct.object* %529, i32 0, i32 2
  %531 = getelementptr inbounds [3 x double], [3 x double]* %530, i64 0, i64 2
  store double %525, double* %531, align 8
  %532 = load i8**, i8*** %5, align 8
  %533 = load i32, i32* %6, align 4
  %534 = add nsw i32 %533, 1
  store i32 %534, i32* %6, align 4
  %535 = sext i32 %534 to i64
  %536 = getelementptr inbounds i8*, i8** %532, i64 %535
  %537 = load i8*, i8** %536, align 8
  %538 = call double @atof(i8* %537) #5
  %539 = load %struct.object*, %struct.object** @objects, align 8
  %540 = load i32, i32* %8, align 4
  %541 = sext i32 %540 to i64
  %542 = getelementptr inbounds %struct.object, %struct.object* %539, i64 %541
  %543 = getelementptr inbounds %struct.object, %struct.object* %542, i32 0, i32 4
  %544 = getelementptr inbounds [3 x double], [3 x double]* %543, i64 0, i64 0
  store double %538, double* %544, align 8
  %545 = load i8**, i8*** %5, align 8
  %546 = load i32, i32* %6, align 4
  %547 = add nsw i32 %546, 1
  store i32 %547, i32* %6, align 4
  %548 = sext i32 %547 to i64
  %549 = getelementptr inbounds i8*, i8** %545, i64 %548
  %550 = load i8*, i8** %549, align 8
  %551 = call double @atof(i8* %550) #5
  %552 = load %struct.object*, %struct.object** @objects, align 8
  %553 = load i32, i32* %8, align 4
  %554 = sext i32 %553 to i64
  %555 = getelementptr inbounds %struct.object, %struct.object* %552, i64 %554
  %556 = getelementptr inbounds %struct.object, %struct.object* %555, i32 0, i32 4
  %557 = getelementptr inbounds [3 x double], [3 x double]* %556, i64 0, i64 1
  store double %551, double* %557, align 8
  %558 = load i8**, i8*** %5, align 8
  %559 = load i32, i32* %6, align 4
  %560 = add nsw i32 %559, 1
  store i32 %560, i32* %6, align 4
  %561 = sext i32 %560 to i64
  %562 = getelementptr inbounds i8*, i8** %558, i64 %561
  %563 = load i8*, i8** %562, align 8
  %564 = call double @atof(i8* %563) #5
  %565 = load %struct.object*, %struct.object** @objects, align 8
  %566 = load i32, i32* %8, align 4
  %567 = sext i32 %566 to i64
  %568 = getelementptr inbounds %struct.object, %struct.object* %565, i64 %567
  %569 = getelementptr inbounds %struct.object, %struct.object* %568, i32 0, i32 4
  %570 = getelementptr inbounds [3 x double], [3 x double]* %569, i64 0, i64 2
  store double %564, double* %570, align 8
  %571 = load i8**, i8*** %5, align 8
  %572 = load i32, i32* %6, align 4
  %573 = add nsw i32 %572, 1
  store i32 %573, i32* %6, align 4
  %574 = sext i32 %573 to i64
  %575 = getelementptr inbounds i8*, i8** %571, i64 %574
  %576 = load i8*, i8** %575, align 8
  %577 = call double @atof(i8* %576) #5
  %578 = load %struct.object*, %struct.object** @objects, align 8
  %579 = load i32, i32* %8, align 4
  %580 = sext i32 %579 to i64
  %581 = getelementptr inbounds %struct.object, %struct.object* %578, i64 %580
  %582 = getelementptr inbounds %struct.object, %struct.object* %581, i32 0, i32 6
  %583 = getelementptr inbounds [3 x double], [3 x double]* %582, i64 0, i64 0
  store double %577, double* %583, align 8
  %584 = load i8**, i8*** %5, align 8
  %585 = load i32, i32* %6, align 4
  %586 = add nsw i32 %585, 1
  store i32 %586, i32* %6, align 4
  %587 = sext i32 %586 to i64
  %588 = getelementptr inbounds i8*, i8** %584, i64 %587
  %589 = load i8*, i8** %588, align 8
  %590 = call double @atof(i8* %589) #5
  %591 = load %struct.object*, %struct.object** @objects, align 8
  %592 = load i32, i32* %8, align 4
  %593 = sext i32 %592 to i64
  %594 = getelementptr inbounds %struct.object, %struct.object* %591, i64 %593
  %595 = getelementptr inbounds %struct.object, %struct.object* %594, i32 0, i32 6
  %596 = getelementptr inbounds [3 x double], [3 x double]* %595, i64 0, i64 1
  store double %590, double* %596, align 8
  %597 = load i8**, i8*** %5, align 8
  %598 = load i32, i32* %6, align 4
  %599 = add nsw i32 %598, 1
  store i32 %599, i32* %6, align 4
  %600 = sext i32 %599 to i64
  %601 = getelementptr inbounds i8*, i8** %597, i64 %600
  %602 = load i8*, i8** %601, align 8
  %603 = call double @atof(i8* %602) #5
  %604 = load %struct.object*, %struct.object** @objects, align 8
  %605 = load i32, i32* %8, align 4
  %606 = sext i32 %605 to i64
  %607 = getelementptr inbounds %struct.object, %struct.object* %604, i64 %606
  %608 = getelementptr inbounds %struct.object, %struct.object* %607, i32 0, i32 6
  %609 = getelementptr inbounds [3 x double], [3 x double]* %608, i64 0, i64 2
  store double %603, double* %609, align 8
  %610 = load i8**, i8*** %5, align 8
  %611 = load i32, i32* %6, align 4
  %612 = add nsw i32 %611, 1
  store i32 %612, i32* %6, align 4
  %613 = sext i32 %612 to i64
  %614 = getelementptr inbounds i8*, i8** %610, i64 %613
  %615 = load i8*, i8** %614, align 8
  %616 = call double @atof(i8* %615) #5
  %617 = load %struct.object*, %struct.object** @objects, align 8
  %618 = load i32, i32* %8, align 4
  %619 = sext i32 %618 to i64
  %620 = getelementptr inbounds %struct.object, %struct.object* %617, i64 %619
  %621 = getelementptr inbounds %struct.object, %struct.object* %620, i32 0, i32 8
  %622 = getelementptr inbounds [3 x double], [3 x double]* %621, i64 0, i64 0
  store double %616, double* %622, align 8
  %623 = load i8**, i8*** %5, align 8
  %624 = load i32, i32* %6, align 4
  %625 = add nsw i32 %624, 1
  store i32 %625, i32* %6, align 4
  %626 = sext i32 %625 to i64
  %627 = getelementptr inbounds i8*, i8** %623, i64 %626
  %628 = load i8*, i8** %627, align 8
  %629 = call double @atof(i8* %628) #5
  %630 = load %struct.object*, %struct.object** @objects, align 8
  %631 = load i32, i32* %8, align 4
  %632 = sext i32 %631 to i64
  %633 = getelementptr inbounds %struct.object, %struct.object* %630, i64 %632
  %634 = getelementptr inbounds %struct.object, %struct.object* %633, i32 0, i32 8
  %635 = getelementptr inbounds [3 x double], [3 x double]* %634, i64 0, i64 1
  store double %629, double* %635, align 8
  %636 = load i8**, i8*** %5, align 8
  %637 = load i32, i32* %6, align 4
  %638 = add nsw i32 %637, 1
  store i32 %638, i32* %6, align 4
  %639 = sext i32 %638 to i64
  %640 = getelementptr inbounds i8*, i8** %636, i64 %639
  %641 = load i8*, i8** %640, align 8
  %642 = call double @atof(i8* %641) #5
  %643 = load %struct.object*, %struct.object** @objects, align 8
  %644 = load i32, i32* %8, align 4
  %645 = sext i32 %644 to i64
  %646 = getelementptr inbounds %struct.object, %struct.object* %643, i64 %645
  %647 = getelementptr inbounds %struct.object, %struct.object* %646, i32 0, i32 8
  %648 = getelementptr inbounds [3 x double], [3 x double]* %647, i64 0, i64 2
  store double %642, double* %648, align 8
  %649 = load i32, i32* %8, align 4
  %650 = add nsw i32 %649, 1
  store i32 %650, i32* %8, align 4
  br label %667

; <label>:651:                                    ; preds = %454
  %652 = load i8**, i8*** %5, align 8
  %653 = load i32, i32* %6, align 4
  %654 = sext i32 %653 to i64
  %655 = getelementptr inbounds i8*, i8** %652, i64 %654
  %656 = load i8*, i8** %655, align 8
  %657 = call i32 @strcmp(i8* %656, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.31, i32 0, i32 0)) #5
  %658 = icmp ne i32 %657, 0
  br i1 %658, label %660, label %659

; <label>:659:                                    ; preds = %651
  call void @print_help_message()
  call void @exit(i32 0) #6
  unreachable

; <label>:660:                                    ; preds = %651
  %661 = load i8**, i8*** %5, align 8
  %662 = load i32, i32* %6, align 4
  %663 = sext i32 %662 to i64
  %664 = getelementptr inbounds i8*, i8** %661, i64 %663
  %665 = load i8*, i8** %664, align 8
  %666 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.32, i32 0, i32 0), i8* %665)
  call void @print_help_message()
  call void @exit(i32 -1) #6
  unreachable

; <label>:667:                                    ; preds = %468
  br label %668

; <label>:668:                                    ; preds = %667, %441
  br label %669

; <label>:669:                                    ; preds = %668, %432
  br label %670

; <label>:670:                                    ; preds = %669, %416
  br label %671

; <label>:671:                                    ; preds = %670, %400
  br label %672

; <label>:672:                                    ; preds = %671, %384
  br label %673

; <label>:673:                                    ; preds = %672, %375
  br label %674

; <label>:674:                                    ; preds = %673, %359
  br label %675

; <label>:675:                                    ; preds = %674, %343
  br label %676

; <label>:676:                                    ; preds = %675, %327
  br label %677

; <label>:677:                                    ; preds = %676, %311
  br label %678

; <label>:678:                                    ; preds = %677, %295
  br label %679

; <label>:679:                                    ; preds = %678, %279
  br label %680

; <label>:680:                                    ; preds = %679, %263
  br label %681

; <label>:681:                                    ; preds = %680, %247
  br label %682

; <label>:682:                                    ; preds = %681, %231
  br label %683

; <label>:683:                                    ; preds = %682, %215
  br label %684

; <label>:684:                                    ; preds = %683, %199
  br label %685

; <label>:685:                                    ; preds = %684, %183
  br label %686

; <label>:686:                                    ; preds = %685, %167
  br label %687

; <label>:687:                                    ; preds = %686, %151
  br label %688

; <label>:688:                                    ; preds = %687, %135
  br label %689

; <label>:689:                                    ; preds = %688, %119
  br label %690

; <label>:690:                                    ; preds = %689, %103
  br label %691

; <label>:691:                                    ; preds = %690, %87
  br label %692

; <label>:692:                                    ; preds = %691, %71
  br label %693

; <label>:693:                                    ; preds = %692, %55
  br label %694

; <label>:694:                                    ; preds = %693, %39
  br label %695

; <label>:695:                                    ; preds = %694, %23
  br label %696

; <label>:696:                                    ; preds = %695
  %697 = load i32, i32* %6, align 4
  %698 = add nsw i32 %697, 1
  store i32 %698, i32* %6, align 4
  br label %11

; <label>:699:                                    ; preds = %11
  %700 = call i32 @check_input()
  %701 = icmp ne i32 %700, 0
  br i1 %701, label %702, label %703

; <label>:702:                                    ; preds = %699
  call void @exit(i32 -1) #6
  unreachable

; <label>:703:                                    ; preds = %699
  %704 = load i32, i32* @block_change, align 4
  %705 = icmp ne i32 %704, 0
  br i1 %705, label %708, label %706

; <label>:706:                                    ; preds = %703
  %707 = load i32, i32* @num_refine, align 4
  store i32 %707, i32* @block_change, align 4
  br label %708

; <label>:708:                                    ; preds = %706, %703
  store i32 0, i32* %8, align 4
  br label %709

; <label>:709:                                    ; preds = %773, %708
  %710 = load i32, i32* %8, align 4
  %711 = load i32, i32* @num_objects, align 4
  %712 = icmp slt i32 %710, %711
  br i1 %712, label %713, label %776

; <label>:713:                                    ; preds = %709
  store i32 0, i32* %6, align 4
  br label %714

; <label>:714:                                    ; preds = %769, %713
  %715 = load i32, i32* %6, align 4
  %716 = icmp slt i32 %715, 3
  br i1 %716, label %717, label %772

; <label>:717:                                    ; preds = %714
  %718 = load %struct.object*, %struct.object** @objects, align 8
  %719 = load i32, i32* %8, align 4
  %720 = sext i32 %719 to i64
  %721 = getelementptr inbounds %struct.object, %struct.object* %718, i64 %720
  %722 = getelementptr inbounds %struct.object, %struct.object* %721, i32 0, i32 2
  %723 = load i32, i32* %6, align 4
  %724 = sext i32 %723 to i64
  %725 = getelementptr inbounds [3 x double], [3 x double]* %722, i64 0, i64 %724
  %726 = load double, double* %725, align 8
  %727 = load %struct.object*, %struct.object** @objects, align 8
  %728 = load i32, i32* %8, align 4
  %729 = sext i32 %728 to i64
  %730 = getelementptr inbounds %struct.object, %struct.object* %727, i64 %729
  %731 = getelementptr inbounds %struct.object, %struct.object* %730, i32 0, i32 3
  %732 = load i32, i32* %6, align 4
  %733 = sext i32 %732 to i64
  %734 = getelementptr inbounds [3 x double], [3 x double]* %731, i64 0, i64 %733
  store double %726, double* %734, align 8
  %735 = load %struct.object*, %struct.object** @objects, align 8
  %736 = load i32, i32* %8, align 4
  %737 = sext i32 %736 to i64
  %738 = getelementptr inbounds %struct.object, %struct.object* %735, i64 %737
  %739 = getelementptr inbounds %struct.object, %struct.object* %738, i32 0, i32 4
  %740 = load i32, i32* %6, align 4
  %741 = sext i32 %740 to i64
  %742 = getelementptr inbounds [3 x double], [3 x double]* %739, i64 0, i64 %741
  %743 = load double, double* %742, align 8
  %744 = load %struct.object*, %struct.object** @objects, align 8
  %745 = load i32, i32* %8, align 4
  %746 = sext i32 %745 to i64
  %747 = getelementptr inbounds %struct.object, %struct.object* %744, i64 %746
  %748 = getelementptr inbounds %struct.object, %struct.object* %747, i32 0, i32 5
  %749 = load i32, i32* %6, align 4
  %750 = sext i32 %749 to i64
  %751 = getelementptr inbounds [3 x double], [3 x double]* %748, i64 0, i64 %750
  store double %743, double* %751, align 8
  %752 = load %struct.object*, %struct.object** @objects, align 8
  %753 = load i32, i32* %8, align 4
  %754 = sext i32 %753 to i64
  %755 = getelementptr inbounds %struct.object, %struct.object* %752, i64 %754
  %756 = getelementptr inbounds %struct.object, %struct.object* %755, i32 0, i32 6
  %757 = load i32, i32* %6, align 4
  %758 = sext i32 %757 to i64
  %759 = getelementptr inbounds [3 x double], [3 x double]* %756, i64 0, i64 %758
  %760 = load double, double* %759, align 8
  %761 = load %struct.object*, %struct.object** @objects, align 8
  %762 = load i32, i32* %8, align 4
  %763 = sext i32 %762 to i64
  %764 = getelementptr inbounds %struct.object, %struct.object* %761, i64 %763
  %765 = getelementptr inbounds %struct.object, %struct.object* %764, i32 0, i32 7
  %766 = load i32, i32* %6, align 4
  %767 = sext i32 %766 to i64
  %768 = getelementptr inbounds [3 x double], [3 x double]* %765, i64 0, i64 %767
  store double %760, double* %768, align 8
  br label %769

; <label>:769:                                    ; preds = %717
  %770 = load i32, i32* %6, align 4
  %771 = add nsw i32 %770, 1
  store i32 %771, i32* %6, align 4
  br label %714

; <label>:772:                                    ; preds = %714
  br label %773

; <label>:773:                                    ; preds = %772
  %774 = load i32, i32* %8, align 4
  %775 = add nsw i32 %774, 1
  store i32 %775, i32* %8, align 4
  br label %709

; <label>:776:                                    ; preds = %709
  call void @allocate()
  call void @driver()
  call void @profile()
  call void @deallocate()
  call void @exit(i32 0) #6
  unreachable
                                                  ; No predecessors!
  %778 = load i32, i32* %3, align 4
  ret i32 %778
}

; Function Attrs: nounwind readonly
declare i32 @strcmp(i8*, i8*) #1

; Function Attrs: nounwind readonly
declare i32 @atoi(i8*) #1

declare i8* @ma_malloc(i64, i8*, i32) #2

declare i32 @printf(i8*, ...) #2

; Function Attrs: noreturn nounwind
declare void @exit(i32) #3

; Function Attrs: nounwind readonly
declare double @atof(i8*) #1

; Function Attrs: noinline nounwind uwtable
define void @print_help_message() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.33, i32 0, i32 0))
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.34, i32 0, i32 0))
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.35, i32 0, i32 0))
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.36, i32 0, i32 0))
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.37, i32 0, i32 0))
  %6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.38, i32 0, i32 0))
  %7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.39, i32 0, i32 0))
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.40, i32 0, i32 0))
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.41, i32 0, i32 0))
  %10 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.42, i32 0, i32 0))
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([75 x i8], [75 x i8]* @.str.43, i32 0, i32 0))
  %12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.44, i32 0, i32 0))
  %13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.45, i32 0, i32 0))
  %14 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([70 x i8], [70 x i8]* @.str.46, i32 0, i32 0))
  %15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.47, i32 0, i32 0))
  %16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.48, i32 0, i32 0))
  %17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.49, i32 0, i32 0))
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.50, i32 0, i32 0))
  %19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.51, i32 0, i32 0))
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.52, i32 0, i32 0))
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.53, i32 0, i32 0))
  %22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([79 x i8], [79 x i8]* @.str.54, i32 0, i32 0))
  %23 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.55, i32 0, i32 0))
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.56, i32 0, i32 0))
  %25 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.57, i32 0, i32 0))
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.58, i32 0, i32 0))
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.59, i32 0, i32 0))
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.60, i32 0, i32 0))
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.61, i32 0, i32 0))
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([95 x i8], [95 x i8]* @.str.62, i32 0, i32 0))
  %31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.63, i32 0, i32 0))
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([64 x i8], [64 x i8]* @.str.64, i32 0, i32 0))
  %33 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([57 x i8], [57 x i8]* @.str.65, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define i32 @check_input() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  %2 = load i32, i32* @init_block_x, align 4
  %3 = icmp slt i32 %2, 1
  br i1 %3, label %10, label %4

; <label>:4:                                      ; preds = %0
  %5 = load i32, i32* @init_block_y, align 4
  %6 = icmp slt i32 %5, 1
  br i1 %6, label %10, label %7

; <label>:7:                                      ; preds = %4
  %8 = load i32, i32* @init_block_z, align 4
  %9 = icmp slt i32 %8, 1
  br i1 %9, label %10, label %12

; <label>:10:                                     ; preds = %7, %4, %0
  %11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.66, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %12

; <label>:12:                                     ; preds = %10, %7
  %13 = load i32, i32* @max_num_blocks, align 4
  %14 = load i32, i32* @init_block_x, align 4
  %15 = load i32, i32* @init_block_y, align 4
  %16 = mul nsw i32 %14, %15
  %17 = load i32, i32* @init_block_z, align 4
  %18 = mul nsw i32 %16, %17
  %19 = icmp slt i32 %13, %18
  br i1 %19, label %20, label %22

; <label>:20:                                     ; preds = %12
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.67, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %22

; <label>:22:                                     ; preds = %20, %12
  %23 = load i32, i32* @x_block_size, align 4
  %24 = icmp slt i32 %23, 1
  br i1 %24, label %31, label %25

; <label>:25:                                     ; preds = %22
  %26 = load i32, i32* @y_block_size, align 4
  %27 = icmp slt i32 %26, 1
  br i1 %27, label %31, label %28

; <label>:28:                                     ; preds = %25
  %29 = load i32, i32* @z_block_size, align 4
  %30 = icmp slt i32 %29, 1
  br i1 %30, label %31, label %33

; <label>:31:                                     ; preds = %28, %25, %22
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.68, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %33

; <label>:33:                                     ; preds = %31, %28
  %34 = load i32, i32* @x_block_size, align 4
  %35 = sdiv i32 %34, 2
  %36 = mul nsw i32 %35, 2
  %37 = load i32, i32* @x_block_size, align 4
  %38 = icmp ne i32 %36, %37
  br i1 %38, label %39, label %41

; <label>:39:                                     ; preds = %33
  %40 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.69, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %41

; <label>:41:                                     ; preds = %39, %33
  %42 = load i32, i32* @y_block_size, align 4
  %43 = sdiv i32 %42, 2
  %44 = mul nsw i32 %43, 2
  %45 = load i32, i32* @y_block_size, align 4
  %46 = icmp ne i32 %44, %45
  br i1 %46, label %47, label %49

; <label>:47:                                     ; preds = %41
  %48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.70, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %49

; <label>:49:                                     ; preds = %47, %41
  %50 = load i32, i32* @z_block_size, align 4
  %51 = sdiv i32 %50, 2
  %52 = mul nsw i32 %51, 2
  %53 = load i32, i32* @z_block_size, align 4
  %54 = icmp ne i32 %52, %53
  br i1 %54, label %55, label %57

; <label>:55:                                     ; preds = %49
  %56 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.71, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %57

; <label>:57:                                     ; preds = %55, %49
  %58 = load i32, i32* @target_active, align 4
  %59 = icmp ne i32 %58, 0
  br i1 %59, label %60, label %65

; <label>:60:                                     ; preds = %57
  %61 = load i32, i32* @target_max, align 4
  %62 = icmp ne i32 %61, 0
  br i1 %62, label %63, label %65

; <label>:63:                                     ; preds = %60
  %64 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.72, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %65

; <label>:65:                                     ; preds = %63, %60, %57
  %66 = load i32, i32* @target_active, align 4
  %67 = icmp ne i32 %66, 0
  br i1 %67, label %68, label %73

; <label>:68:                                     ; preds = %65
  %69 = load i32, i32* @target_min, align 4
  %70 = icmp ne i32 %69, 0
  br i1 %70, label %71, label %73

; <label>:71:                                     ; preds = %68
  %72 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.73, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %73

; <label>:73:                                     ; preds = %71, %68, %65
  %74 = load i32, i32* @target_active, align 4
  %75 = icmp slt i32 %74, 0
  br i1 %75, label %80, label %76

; <label>:76:                                     ; preds = %73
  %77 = load i32, i32* @target_active, align 4
  %78 = load i32, i32* @max_num_blocks, align 4
  %79 = icmp sgt i32 %77, %78
  br i1 %79, label %80, label %82

; <label>:80:                                     ; preds = %76, %73
  %81 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.74, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %82

; <label>:82:                                     ; preds = %80, %76
  %83 = load i32, i32* @target_max, align 4
  %84 = icmp slt i32 %83, 0
  br i1 %84, label %93, label %85

; <label>:85:                                     ; preds = %82
  %86 = load i32, i32* @target_max, align 4
  %87 = load i32, i32* @max_num_blocks, align 4
  %88 = icmp sgt i32 %86, %87
  br i1 %88, label %93, label %89

; <label>:89:                                     ; preds = %85
  %90 = load i32, i32* @target_max, align 4
  %91 = load i32, i32* @target_active, align 4
  %92 = icmp slt i32 %90, %91
  br i1 %92, label %93, label %95

; <label>:93:                                     ; preds = %89, %85, %82
  %94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.75, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %95

; <label>:95:                                     ; preds = %93, %89
  %96 = load i32, i32* @target_min, align 4
  %97 = icmp slt i32 %96, 0
  br i1 %97, label %110, label %98

; <label>:98:                                     ; preds = %95
  %99 = load i32, i32* @target_min, align 4
  %100 = load i32, i32* @max_num_blocks, align 4
  %101 = icmp sgt i32 %99, %100
  br i1 %101, label %110, label %102

; <label>:102:                                    ; preds = %98
  %103 = load i32, i32* @target_min, align 4
  %104 = load i32, i32* @target_active, align 4
  %105 = icmp sgt i32 %103, %104
  br i1 %105, label %110, label %106

; <label>:106:                                    ; preds = %102
  %107 = load i32, i32* @target_min, align 4
  %108 = load i32, i32* @target_max, align 4
  %109 = icmp sgt i32 %107, %108
  br i1 %109, label %110, label %112

; <label>:110:                                    ; preds = %106, %102, %98, %95
  %111 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.76, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %112

; <label>:112:                                    ; preds = %110, %106
  %113 = load i32, i32* @num_refine, align 4
  %114 = icmp slt i32 %113, 0
  br i1 %114, label %115, label %117

; <label>:115:                                    ; preds = %112
  %116 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.77, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %117

; <label>:117:                                    ; preds = %115, %112
  %118 = load i32, i32* @block_change, align 4
  %119 = icmp slt i32 %118, 0
  br i1 %119, label %120, label %122

; <label>:120:                                    ; preds = %117
  %121 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([50 x i8], [50 x i8]* @.str.77, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %122

; <label>:122:                                    ; preds = %120, %117
  %123 = load i32, i32* @num_vars, align 4
  %124 = icmp slt i32 %123, 1
  br i1 %124, label %125, label %127

; <label>:125:                                    ; preds = %122
  %126 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.78, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %127

; <label>:127:                                    ; preds = %125, %122
  %128 = load i32, i32* @num_pes, align 4
  %129 = load i32, i32* @npx, align 4
  %130 = load i32, i32* @npy, align 4
  %131 = mul nsw i32 %129, %130
  %132 = load i32, i32* @npz, align 4
  %133 = mul nsw i32 %131, %132
  %134 = icmp ne i32 %128, %133
  br i1 %134, label %135, label %137

; <label>:135:                                    ; preds = %127
  %136 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.79, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %137

; <label>:137:                                    ; preds = %135, %127
  %138 = load i32, i32* @stencil, align 4
  %139 = icmp ne i32 %138, 7
  br i1 %139, label %140, label %145

; <label>:140:                                    ; preds = %137
  %141 = load i32, i32* @stencil, align 4
  %142 = icmp ne i32 %141, 27
  br i1 %142, label %143, label %145

; <label>:143:                                    ; preds = %140
  %144 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.80, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %145

; <label>:145:                                    ; preds = %143, %140, %137
  %146 = load i32, i32* @stencil, align 4
  %147 = icmp eq i32 %146, 27
  br i1 %147, label %148, label %156

; <label>:148:                                    ; preds = %145
  %149 = load i32, i32* @num_refine, align 4
  %150 = icmp ne i32 %149, 0
  br i1 %150, label %151, label %156

; <label>:151:                                    ; preds = %148
  %152 = load i32, i32* @uniform_refine, align 4
  %153 = icmp ne i32 %152, 0
  br i1 %153, label %156, label %154

; <label>:154:                                    ; preds = %151
  %155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.81, i32 0, i32 0))
  br label %156

; <label>:156:                                    ; preds = %154, %151, %148, %145
  %157 = load i32, i32* @comm_vars, align 4
  %158 = icmp eq i32 %157, 0
  br i1 %158, label %163, label %159

; <label>:159:                                    ; preds = %156
  %160 = load i32, i32* @comm_vars, align 4
  %161 = load i32, i32* @num_vars, align 4
  %162 = icmp sgt i32 %160, %161
  br i1 %162, label %163, label %165

; <label>:163:                                    ; preds = %159, %156
  %164 = load i32, i32* @num_vars, align 4
  store i32 %164, i32* @comm_vars, align 4
  br label %165

; <label>:165:                                    ; preds = %163, %159
  %166 = load i32, i32* @code, align 4
  %167 = icmp slt i32 %166, 0
  br i1 %167, label %171, label %168

; <label>:168:                                    ; preds = %165
  %169 = load i32, i32* @code, align 4
  %170 = icmp sgt i32 %169, 2
  br i1 %170, label %171, label %173

; <label>:171:                                    ; preds = %168, %165
  %172 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.82, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %173

; <label>:173:                                    ; preds = %171, %168
  %174 = load i32, i32* %1, align 4
  ret i32 %174
}

; Function Attrs: noinline nounwind uwtable
define void @allocate() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = load i32, i32* @num_refine, align 4
  %7 = add nsw i32 %6, 1
  %8 = sext i32 %7 to i64
  %9 = mul i64 %8, 4
  %10 = call i8* @ma_malloc(i64 %9, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 209)
  %11 = bitcast i8* %10 to i32*
  store i32* %11, i32** @num_blocks, align 8
  %12 = load i32, i32* @num_pes, align 4
  %13 = load i32, i32* @init_block_x, align 4
  %14 = mul nsw i32 %12, %13
  %15 = load i32, i32* @init_block_y, align 4
  %16 = mul nsw i32 %14, %15
  %17 = load i32, i32* @init_block_z, align 4
  %18 = mul nsw i32 %16, %17
  %19 = load i32*, i32** @num_blocks, align 8
  %20 = getelementptr inbounds i32, i32* %19, i64 0
  store i32 %18, i32* %20, align 4
  %21 = load i32, i32* @init_block_x, align 4
  %22 = load i32, i32* @init_block_y, align 4
  %23 = mul nsw i32 %21, %22
  %24 = load i32, i32* @init_block_z, align 4
  %25 = mul nsw i32 %23, %24
  %26 = load i32*, i32** @num_blocks, align 8
  %27 = getelementptr inbounds i32, i32* %26, i64 0
  store i32 %25, i32* %27, align 4
  %28 = load i32, i32* @max_num_blocks, align 4
  %29 = sext i32 %28 to i64
  %30 = mul i64 %29, 192
  %31 = call i8* @ma_malloc(i64 %30, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 214)
  %32 = bitcast i8* %31 to %struct.block*
  store %struct.block* %32, %struct.block** @blocks, align 8
  store i32 0, i32* %5, align 4
  br label %33

; <label>:33:                                     ; preds = %139, %0
  %34 = load i32, i32* %5, align 4
  %35 = load i32, i32* @max_num_blocks, align 4
  %36 = icmp slt i32 %34, %35
  br i1 %36, label %37, label %142

; <label>:37:                                     ; preds = %33
  %38 = load %struct.block*, %struct.block** @blocks, align 8
  %39 = load i32, i32* %5, align 4
  %40 = sext i32 %39 to i64
  %41 = getelementptr inbounds %struct.block, %struct.block* %38, i64 %40
  %42 = getelementptr inbounds %struct.block, %struct.block* %41, i32 0, i32 0
  store i32 -1, i32* %42, align 8
  %43 = load i32, i32* @num_vars, align 4
  %44 = sext i32 %43 to i64
  %45 = mul i64 %44, 8
  %46 = call i8* @ma_malloc(i64 %45, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 219)
  %47 = bitcast i8* %46 to double****
  %48 = load %struct.block*, %struct.block** @blocks, align 8
  %49 = load i32, i32* %5, align 4
  %50 = sext i32 %49 to i64
  %51 = getelementptr inbounds %struct.block, %struct.block* %48, i64 %50
  %52 = getelementptr inbounds %struct.block, %struct.block* %51, i32 0, i32 11
  store double**** %47, double***** %52, align 8
  store i32 0, i32* %4, align 4
  br label %53

; <label>:53:                                     ; preds = %135, %37
  %54 = load i32, i32* %4, align 4
  %55 = load i32, i32* @num_vars, align 4
  %56 = icmp slt i32 %54, %55
  br i1 %56, label %57, label %138

; <label>:57:                                     ; preds = %53
  %58 = load i32, i32* @x_block_size, align 4
  %59 = add nsw i32 %58, 2
  %60 = sext i32 %59 to i64
  %61 = mul i64 %60, 8
  %62 = call i8* @ma_malloc(i64 %61, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 223)
  %63 = bitcast i8* %62 to double***
  %64 = load %struct.block*, %struct.block** @blocks, align 8
  %65 = load i32, i32* %5, align 4
  %66 = sext i32 %65 to i64
  %67 = getelementptr inbounds %struct.block, %struct.block* %64, i64 %66
  %68 = getelementptr inbounds %struct.block, %struct.block* %67, i32 0, i32 11
  %69 = load double****, double***** %68, align 8
  %70 = load i32, i32* %4, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds double***, double**** %69, i64 %71
  store double*** %63, double**** %72, align 8
  store i32 0, i32* %1, align 4
  br label %73

; <label>:73:                                     ; preds = %131, %57
  %74 = load i32, i32* %1, align 4
  %75 = load i32, i32* @x_block_size, align 4
  %76 = add nsw i32 %75, 2
  %77 = icmp slt i32 %74, %76
  br i1 %77, label %78, label %134

; <label>:78:                                     ; preds = %73
  %79 = load i32, i32* @y_block_size, align 4
  %80 = add nsw i32 %79, 2
  %81 = sext i32 %80 to i64
  %82 = mul i64 %81, 8
  %83 = call i8* @ma_malloc(i64 %82, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 227)
  %84 = bitcast i8* %83 to double**
  %85 = load %struct.block*, %struct.block** @blocks, align 8
  %86 = load i32, i32* %5, align 4
  %87 = sext i32 %86 to i64
  %88 = getelementptr inbounds %struct.block, %struct.block* %85, i64 %87
  %89 = getelementptr inbounds %struct.block, %struct.block* %88, i32 0, i32 11
  %90 = load double****, double***** %89, align 8
  %91 = load i32, i32* %4, align 4
  %92 = sext i32 %91 to i64
  %93 = getelementptr inbounds double***, double**** %90, i64 %92
  %94 = load double***, double**** %93, align 8
  %95 = load i32, i32* %1, align 4
  %96 = sext i32 %95 to i64
  %97 = getelementptr inbounds double**, double*** %94, i64 %96
  store double** %84, double*** %97, align 8
  store i32 0, i32* %2, align 4
  br label %98

; <label>:98:                                     ; preds = %127, %78
  %99 = load i32, i32* %2, align 4
  %100 = load i32, i32* @y_block_size, align 4
  %101 = add nsw i32 %100, 2
  %102 = icmp slt i32 %99, %101
  br i1 %102, label %103, label %130

; <label>:103:                                    ; preds = %98
  %104 = load i32, i32* @z_block_size, align 4
  %105 = add nsw i32 %104, 2
  %106 = sext i32 %105 to i64
  %107 = mul i64 %106, 8
  %108 = call i8* @ma_malloc(i64 %107, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 231)
  %109 = bitcast i8* %108 to double*
  %110 = load %struct.block*, %struct.block** @blocks, align 8
  %111 = load i32, i32* %5, align 4
  %112 = sext i32 %111 to i64
  %113 = getelementptr inbounds %struct.block, %struct.block* %110, i64 %112
  %114 = getelementptr inbounds %struct.block, %struct.block* %113, i32 0, i32 11
  %115 = load double****, double***** %114, align 8
  %116 = load i32, i32* %4, align 4
  %117 = sext i32 %116 to i64
  %118 = getelementptr inbounds double***, double**** %115, i64 %117
  %119 = load double***, double**** %118, align 8
  %120 = load i32, i32* %1, align 4
  %121 = sext i32 %120 to i64
  %122 = getelementptr inbounds double**, double*** %119, i64 %121
  %123 = load double**, double*** %122, align 8
  %124 = load i32, i32* %2, align 4
  %125 = sext i32 %124 to i64
  %126 = getelementptr inbounds double*, double** %123, i64 %125
  store double* %109, double** %126, align 8
  br label %127

; <label>:127:                                    ; preds = %103
  %128 = load i32, i32* %2, align 4
  %129 = add nsw i32 %128, 1
  store i32 %129, i32* %2, align 4
  br label %98

; <label>:130:                                    ; preds = %98
  br label %131

; <label>:131:                                    ; preds = %130
  %132 = load i32, i32* %1, align 4
  %133 = add nsw i32 %132, 1
  store i32 %133, i32* %1, align 4
  br label %73

; <label>:134:                                    ; preds = %73
  br label %135

; <label>:135:                                    ; preds = %134
  %136 = load i32, i32* %4, align 4
  %137 = add nsw i32 %136, 1
  store i32 %137, i32* %4, align 4
  br label %53

; <label>:138:                                    ; preds = %53
  br label %139

; <label>:139:                                    ; preds = %138
  %140 = load i32, i32* %5, align 4
  %141 = add nsw i32 %140, 1
  store i32 %141, i32* %5, align 4
  br label %33

; <label>:142:                                    ; preds = %33
  %143 = load i32, i32* @max_num_blocks, align 4
  %144 = sext i32 %143 to i64
  %145 = mul i64 %144, 8
  %146 = call i8* @ma_malloc(i64 %145, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 237)
  %147 = bitcast i8* %146 to %struct.sorted_block*
  store %struct.sorted_block* %147, %struct.sorted_block** @sorted_list, align 8
  %148 = load i32, i32* @num_refine, align 4
  %149 = add nsw i32 %148, 2
  %150 = sext i32 %149 to i64
  %151 = mul i64 %150, 4
  %152 = call i8* @ma_malloc(i64 %151, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 239)
  %153 = bitcast i8* %152 to i32*
  store i32* %153, i32** @sorted_index, align 8
  %154 = load i32, i32* @max_num_blocks, align 4
  store i32 %154, i32* @max_num_parents, align 4
  %155 = load i32, i32* @max_num_parents, align 4
  %156 = sext i32 %155 to i64
  %157 = mul i64 %156, 100
  %158 = call i8* @ma_malloc(i64 %157, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 243)
  %159 = bitcast i8* %158 to %struct.parent*
  store %struct.parent* %159, %struct.parent** @parents, align 8
  store i32 0, i32* %5, align 4
  br label %160

; <label>:160:                                    ; preds = %170, %142
  %161 = load i32, i32* %5, align 4
  %162 = load i32, i32* @max_num_parents, align 4
  %163 = icmp slt i32 %161, %162
  br i1 %163, label %164, label %173

; <label>:164:                                    ; preds = %160
  %165 = load %struct.parent*, %struct.parent** @parents, align 8
  %166 = load i32, i32* %5, align 4
  %167 = sext i32 %166 to i64
  %168 = getelementptr inbounds %struct.parent, %struct.parent* %165, i64 %167
  %169 = getelementptr inbounds %struct.parent, %struct.parent* %168, i32 0, i32 0
  store i32 -1, i32* %169, align 4
  br label %170

; <label>:170:                                    ; preds = %164
  %171 = load i32, i32* %5, align 4
  %172 = add nsw i32 %171, 1
  store i32 %172, i32* %5, align 4
  br label %160

; <label>:173:                                    ; preds = %160
  %174 = load i32, i32* @num_vars, align 4
  %175 = sext i32 %174 to i64
  %176 = mul i64 %175, 8
  %177 = call i8* @ma_malloc(i64 %176, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 247)
  %178 = bitcast i8* %177 to double*
  store double* %178, double** @grid_sum, align 8
  %179 = load i32, i32* @num_refine, align 4
  %180 = add nsw i32 %179, 2
  %181 = sext i32 %180 to i64
  %182 = mul i64 %181, 4
  %183 = call i8* @ma_malloc(i64 %182, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 249)
  %184 = bitcast i8* %183 to i32*
  store i32* %184, i32** @p8, align 8
  %185 = load i32, i32* @num_refine, align 4
  %186 = add nsw i32 %185, 2
  %187 = sext i32 %186 to i64
  %188 = mul i64 %187, 4
  %189 = call i8* @ma_malloc(i64 %188, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 250)
  %190 = bitcast i8* %189 to i32*
  store i32* %190, i32** @p2, align 8
  %191 = load i32, i32* @num_refine, align 4
  %192 = add nsw i32 %191, 1
  %193 = sext i32 %192 to i64
  %194 = mul i64 %193, 4
  %195 = call i8* @ma_malloc(i64 %194, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.28, i32 0, i32 0), i32 252)
  %196 = bitcast i8* %195 to i32*
  store i32* %196, i32** @block_start, align 8
  ret void
}

declare void @driver() #2

declare void @profile() #2

; Function Attrs: noinline nounwind uwtable
define void @deallocate() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %4, align 4
  br label %5

; <label>:5:                                      ; preds = %91, %0
  %6 = load i32, i32* %4, align 4
  %7 = load i32, i32* @max_num_blocks, align 4
  %8 = icmp slt i32 %6, %7
  br i1 %8, label %9, label %94

; <label>:9:                                      ; preds = %5
  store i32 0, i32* %3, align 4
  br label %10

; <label>:10:                                     ; preds = %80, %9
  %11 = load i32, i32* %3, align 4
  %12 = load i32, i32* @num_vars, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %83

; <label>:14:                                     ; preds = %10
  store i32 0, i32* %1, align 4
  br label %15

; <label>:15:                                     ; preds = %65, %14
  %16 = load i32, i32* %1, align 4
  %17 = load i32, i32* @x_block_size, align 4
  %18 = add nsw i32 %17, 2
  %19 = icmp slt i32 %16, %18
  br i1 %19, label %20, label %68

; <label>:20:                                     ; preds = %15
  store i32 0, i32* %2, align 4
  br label %21

; <label>:21:                                     ; preds = %46, %20
  %22 = load i32, i32* %2, align 4
  %23 = load i32, i32* @y_block_size, align 4
  %24 = add nsw i32 %23, 2
  %25 = icmp slt i32 %22, %24
  br i1 %25, label %26, label %49

; <label>:26:                                     ; preds = %21
  %27 = load %struct.block*, %struct.block** @blocks, align 8
  %28 = load i32, i32* %4, align 4
  %29 = sext i32 %28 to i64
  %30 = getelementptr inbounds %struct.block, %struct.block* %27, i64 %29
  %31 = getelementptr inbounds %struct.block, %struct.block* %30, i32 0, i32 11
  %32 = load double****, double***** %31, align 8
  %33 = load i32, i32* %3, align 4
  %34 = sext i32 %33 to i64
  %35 = getelementptr inbounds double***, double**** %32, i64 %34
  %36 = load double***, double**** %35, align 8
  %37 = load i32, i32* %1, align 4
  %38 = sext i32 %37 to i64
  %39 = getelementptr inbounds double**, double*** %36, i64 %38
  %40 = load double**, double*** %39, align 8
  %41 = load i32, i32* %2, align 4
  %42 = sext i32 %41 to i64
  %43 = getelementptr inbounds double*, double** %40, i64 %42
  %44 = load double*, double** %43, align 8
  %45 = bitcast double* %44 to i8*
  call void @free(i8* %45) #7
  br label %46

; <label>:46:                                     ; preds = %26
  %47 = load i32, i32* %2, align 4
  %48 = add nsw i32 %47, 1
  store i32 %48, i32* %2, align 4
  br label %21

; <label>:49:                                     ; preds = %21
  %50 = load %struct.block*, %struct.block** @blocks, align 8
  %51 = load i32, i32* %4, align 4
  %52 = sext i32 %51 to i64
  %53 = getelementptr inbounds %struct.block, %struct.block* %50, i64 %52
  %54 = getelementptr inbounds %struct.block, %struct.block* %53, i32 0, i32 11
  %55 = load double****, double***** %54, align 8
  %56 = load i32, i32* %3, align 4
  %57 = sext i32 %56 to i64
  %58 = getelementptr inbounds double***, double**** %55, i64 %57
  %59 = load double***, double**** %58, align 8
  %60 = load i32, i32* %1, align 4
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds double**, double*** %59, i64 %61
  %63 = load double**, double*** %62, align 8
  %64 = bitcast double** %63 to i8*
  call void @free(i8* %64) #7
  br label %65

; <label>:65:                                     ; preds = %49
  %66 = load i32, i32* %1, align 4
  %67 = add nsw i32 %66, 1
  store i32 %67, i32* %1, align 4
  br label %15

; <label>:68:                                     ; preds = %15
  %69 = load %struct.block*, %struct.block** @blocks, align 8
  %70 = load i32, i32* %4, align 4
  %71 = sext i32 %70 to i64
  %72 = getelementptr inbounds %struct.block, %struct.block* %69, i64 %71
  %73 = getelementptr inbounds %struct.block, %struct.block* %72, i32 0, i32 11
  %74 = load double****, double***** %73, align 8
  %75 = load i32, i32* %3, align 4
  %76 = sext i32 %75 to i64
  %77 = getelementptr inbounds double***, double**** %74, i64 %76
  %78 = load double***, double**** %77, align 8
  %79 = bitcast double*** %78 to i8*
  call void @free(i8* %79) #7
  br label %80

; <label>:80:                                     ; preds = %68
  %81 = load i32, i32* %3, align 4
  %82 = add nsw i32 %81, 1
  store i32 %82, i32* %3, align 4
  br label %10

; <label>:83:                                     ; preds = %10
  %84 = load %struct.block*, %struct.block** @blocks, align 8
  %85 = load i32, i32* %4, align 4
  %86 = sext i32 %85 to i64
  %87 = getelementptr inbounds %struct.block, %struct.block* %84, i64 %86
  %88 = getelementptr inbounds %struct.block, %struct.block* %87, i32 0, i32 11
  %89 = load double****, double***** %88, align 8
  %90 = bitcast double**** %89 to i8*
  call void @free(i8* %90) #7
  br label %91

; <label>:91:                                     ; preds = %83
  %92 = load i32, i32* %4, align 4
  %93 = add nsw i32 %92, 1
  store i32 %93, i32* %4, align 4
  br label %5

; <label>:94:                                     ; preds = %5
  %95 = load %struct.block*, %struct.block** @blocks, align 8
  %96 = bitcast %struct.block* %95 to i8*
  call void @free(i8* %96) #7
  %97 = load %struct.sorted_block*, %struct.sorted_block** @sorted_list, align 8
  %98 = bitcast %struct.sorted_block* %97 to i8*
  call void @free(i8* %98) #7
  %99 = load i32*, i32** @sorted_index, align 8
  %100 = bitcast i32* %99 to i8*
  call void @free(i8* %100) #7
  %101 = load %struct.object*, %struct.object** @objects, align 8
  %102 = bitcast %struct.object* %101 to i8*
  call void @free(i8* %102) #7
  %103 = load double*, double** @grid_sum, align 8
  %104 = bitcast double* %103 to i8*
  call void @free(i8* %104) #7
  %105 = load i32*, i32** @p8, align 8
  %106 = bitcast i32* %105 to i8*
  call void @free(i8* %106) #7
  %107 = load i32*, i32** @p2, align 8
  %108 = bitcast i32* %107 to i8*
  call void @free(i8* %108) #7
  ret void
}

; Function Attrs: nounwind
declare void @free(i8*) #4

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readonly "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { noreturn nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { nounwind readonly }
attributes #6 = { noreturn nounwind }
attributes #7 = { nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)"}
